{"version":3,"file":"static/js/352.4dd9f982.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/sdk/dist/marketplacev3-7d2d5b47.esm.js"],"sourcesContent":["import { A as AmountSchema, _ as _defineProperty } from './QueryParams-da88d27c.esm.js';\nimport { af as AddressSchema, ad as BigNumberishSchema, ce as NATIVE_TOKEN_ADDRESS, ag as RawDateSchema, ai as EndDateSchema, cS as FEATURE_DIRECT_LISTINGS, aX as ContractEvents, al as ContractEncoder, aY as ContractInterceptor, aW as GasCostEstimator, cT as getAllInBatches, cU as handleTokenApproval, ba as normalizePriceValue, cV as cleanCurrencyAddress, cW as setErc20Allowance, b4 as Status, b8 as fetchCurrencyValue, cX as fetchTokenMetadataForContract, cY as isTokenApprovedForTransfer, cc as InterfaceId_IERC721, cd as InterfaceId_IERC1155, cZ as FEATURE_ENGLISH_AUCTIONS, b9 as fetchCurrencyMetadata, bv as AuctionHasNotEndedError, c_ as FEATURE_OFFERS, cR as isNativeToken, cf as NATIVE_TOKENS, cM as ContractWrapper, bZ as assertEnabled, am as ContractMetadata, cP as MarketplaceContractSchema, an as ContractRoles, aZ as ContractPlatformFee, b_ as detectContractFeature } from './thirdweb-checkout-2c8d478b.esm.js';\nimport { z } from 'zod';\nimport ERC165Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport Erc721Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport Erc1155Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport { BigNumber, Contract, constants, ethers } from 'ethers';\nimport invariant from 'tiny-invariant';\nimport ERC20Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport 'bn.js';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRouter.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport 'cross-fetch';\nimport '@thirdweb-dev/chains';\nimport 'eventemitter3';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/contracts-js/dist/abis/Router.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport 'merkletreejs';\nimport 'fast-deep-equal';\nimport 'uuid';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryRouter.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWFactory.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWRegistry.json';\nimport 'bs58';\n\n/**\n * @internal\n */\nconst DirectListingInputParamsSchema = z.object({\n  /**\n   * The address of the asset being listed.\n   */\n  assetContractAddress: AddressSchema,\n  /**\n   * The ID of the token to list.\n   */\n  tokenId: BigNumberishSchema,\n  /**\n   * The quantity of tokens to include in the listing.\n   *\n   * For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here).\n   */\n  quantity: BigNumberishSchema.default(1),\n  /**\n   * The address of the currency to accept for the listing.\n   */\n  currencyContractAddress: AddressSchema.default(NATIVE_TOKEN_ADDRESS),\n  /**\n   * The price to pay per unit of NFTs listed.\n   */\n  pricePerToken: AmountSchema,\n  /**\n   * The start time of the listing.\n   */\n  startTimestamp: RawDateSchema.default(new Date()),\n  /**\n   * The end time of the listing.\n   */\n  endTimestamp: EndDateSchema,\n  /**\n   * Whether the listing is reserved to be bought from a specific set of buyers.\n   */\n  isReservedListing: z.boolean().default(false)\n});\n\n/**\n * @public\n */\n\n/**\n * Handles direct listings\n * @public\n */\nclass MarketplaceV3DirectListings {\n  // utilities\n\n  constructor(contractWrapper, storage) {\n    _defineProperty(this, \"featureName\", FEATURE_DIRECT_LISTINGS.name);\n    _defineProperty(this, \"contractWrapper\", void 0);\n    _defineProperty(this, \"storage\", void 0);\n    _defineProperty(this, \"events\", void 0);\n    _defineProperty(this, \"interceptor\", void 0);\n    _defineProperty(this, \"encoder\", void 0);\n    _defineProperty(this, \"estimator\", void 0);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.events = new ContractEvents(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the total number of direct listings.\n   * @returns Returns the total number of direct listings created.\n   * @public\n   *\n   * @example\n   * ```javascript\n   * const totalListings = await contract.directListings.getTotalCount();\n   * ```\n   */\n  async getTotalCount() {\n    return await this.contractWrapper.readContract.totalListings();\n  }\n\n  /**\n   * Get all direct listings.\n   *\n   * @example\n   * ```javascript\n   * const listings = await contract.directListings.getAll();\n   * const priceOfFirstListing = listings[0].price;\n   * ```\n   *\n   * @param filter - optional filter parameters\n   * @returns the Direct listing object array\n   */\n  async getAll(filter) {\n    const totalListings = await this.getTotalCount();\n    let start = BigNumber.from(filter?.start || 0).toNumber();\n    let end = totalListings.toNumber();\n    if (end === 0) {\n      throw new Error(`No listings exist on the contract.`);\n    }\n    let rawListings = [];\n    let batches = await getAllInBatches(start, end, this.contractWrapper.readContract.getAllListings);\n    rawListings = batches.flat();\n    const filteredListings = this.applyFilter(rawListings, filter);\n    return await Promise.all(filteredListings.map(listing => this.mapListing(listing)));\n  }\n\n  /**\n   * Get all valid direct listings.\n   *\n   * A valid listing is where the listing is active,\n   * and the creator still owns & has approved Marketplace to transfer the listed NFTs.\n   *\n   * @example\n   * ```javascript\n   * const listings = await contract.directListings.getAllValid();\n   * const priceOfFirstListing = listings[0].price;\n   * ```\n   *\n   * @param filter - optional filter parameters\n   * @returns the Direct listing object array\n   */\n  async getAllValid(filter) {\n    const totalListings = await this.getTotalCount();\n    let start = BigNumber.from(filter?.start || 0).toNumber();\n    let end = totalListings.toNumber();\n    if (end === 0) {\n      throw new Error(`No listings exist on the contract.`);\n    }\n    let rawListings = [];\n    let batches = await getAllInBatches(start, end, this.contractWrapper.readContract.getAllValidListings);\n    rawListings = batches.flat();\n    const filteredListings = this.applyFilter(rawListings, filter);\n    return await Promise.all(filteredListings.map(listing => this.mapListing(listing)));\n  }\n\n  /**\n   * Get a direct listing by id.\n   *\n   * @param listingId - the listing id\n   * @returns the Direct listing object\n   *\n   * @example\n   * ```javascript\n   * const listingId = 0;\n   * const listing = await contract.directListings.getListing(listingId);\n   * ```\n   */\n  async getListing(listingId) {\n    const listing = await this.contractWrapper.readContract.getListing(listingId);\n    return await this.mapListing(listing);\n  }\n\n  /**\n   * Check whether a buyer is approved for a reserved listing.\n   *\n   * @param listingId - the listing id\n   * @param buyer - buyer address\n   */\n  async isBuyerApprovedForListing(listingId, buyer) {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    if (!listing.isReservedListing) {\n      throw new Error(`Listing ${listingId} is not a reserved listing.`);\n    }\n    return await this.contractWrapper.readContract.isBuyerApprovedForListing(listingId, buyer);\n  }\n\n  /**\n   * Check whether a currency is approved for a listing.\n   *\n   * @param listingId - the listing id\n   * @param currency - currency address\n   */\n  async isCurrencyApprovedForListing(listingId, currency) {\n    await this.validateListing(BigNumber.from(listingId));\n    return await this.contractWrapper.readContract.isCurrencyApprovedForListing(listingId, currency);\n  }\n\n  /**\n   * Check price per token for an approved currency.\n   *\n   * @param listingId - the listing id\n   * @param currencyContractAddress - currency contract address\n   */\n  async currencyPriceForListing(listingId, currencyContractAddress) {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    if (currencyContractAddress === listing.currencyContractAddress) {\n      return listing.pricePerToken;\n    }\n    const isApprovedCurrency = await this.isCurrencyApprovedForListing(listingId, currencyContractAddress);\n    if (!isApprovedCurrency) {\n      throw new Error(`Currency ${currencyContractAddress} is not approved for Listing ${listingId}.`);\n    }\n    return await this.contractWrapper.readContract.currencyPriceForListing(listingId, currencyContractAddress);\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create Direct Listing\n   *\n   * @remarks Create a new listing on the marketplace where people can buy an asset directly.\n   *\n   * @example\n   * ```javascript\n   * // Data of the listing you want to create\n   * const listing = {\n   *   // address of the contract the asset you want to list is on\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to list\n   *   tokenId: \"0\",\n   *   // how many of the asset you want to list\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the listing\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // The price to pay per unit of NFTs listed.\n   *   pricePerToken: 1.5,\n   *   // when should the listing open up for offers\n   *   startTimestamp: new Date(Date.now()),\n   *   // how long the listing will be open for\n   *   endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\n   *   // Whether the listing is reserved for a specific set of buyers.\n   *   isReservedListing: false\n   * }\n   *\n   * const tx = await contract.directListings.createListing(listing);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created listing\n   * ```\n   */\n  async createListing(listing) {\n    const parsedListing = DirectListingInputParamsSchema.parse(listing);\n    await handleTokenApproval(this.contractWrapper, this.getAddress(), parsedListing.assetContractAddress, parsedListing.tokenId, await this.contractWrapper.getSignerAddress());\n    const normalizedPricePerToken = await normalizePriceValue(this.contractWrapper.getProvider(), parsedListing.pricePerToken, parsedListing.currencyContractAddress);\n    const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\n    const blockTime = block.timestamp;\n    if (parsedListing.startTimestamp.lt(blockTime)) {\n      parsedListing.startTimestamp = BigNumber.from(blockTime);\n    }\n    const receipt = await this.contractWrapper.sendTransaction(\"createListing\", [{\n      assetContract: parsedListing.assetContractAddress,\n      tokenId: parsedListing.tokenId,\n      quantity: parsedListing.quantity,\n      currency: cleanCurrencyAddress(parsedListing.currencyContractAddress),\n      pricePerToken: normalizedPricePerToken,\n      startTimestamp: parsedListing.startTimestamp,\n      endTimestamp: parsedListing.endTimestamp,\n      reserved: parsedListing.isReservedListing\n    }], {\n      // Higher gas limit for create listing\n      gasLimit: 500000\n    });\n    const event = this.contractWrapper.parseLogs(\"NewListing\", receipt?.logs);\n    return {\n      id: event[0].args.listingId,\n      receipt\n    };\n  }\n\n  /**\n   * Update a Direct listing with new metadata.\n   *\n   * Note: cannot update a listing with a new quantity of 0. Use `cancelDirectListing` to remove a listing instead.\n   *\n   * @param listing - the new listing information\n   *\n   * @example\n   * ```javascript\n   * // Data of the listing you want to update\n   *\n   * const listingId = 0; // ID of the listing you want to update\n   *\n   * const listing = {\n   *   // address of the contract the asset you want to list is on\n   *   assetContractAddress: \"0x...\", // should be same as original listing\n   *   // token ID of the asset you want to list\n   *   tokenId: \"0\", // should be same as original listing\n   *   // how many of the asset you want to list\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the listing\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // The price to pay per unit of NFTs listed.\n   *   pricePerToken: 1.5,\n   *   // when should the listing open up for offers\n   *   startTimestamp: new Date(Date.now()), // can't change this if listing already active\n   *   // how long the listing will be open for\n   *   endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\n   *   // Whether the listing is reserved for a specific set of buyers.\n   *   isReservedListing: false\n   * }\n   *\n   * const tx = await contract.directListings.updateListing(listingId, listing);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created listing\n   * ```\n   */\n  async updateListing(listingId, listing) {\n    const parsedListing = DirectListingInputParamsSchema.parse(listing);\n    await handleTokenApproval(this.contractWrapper, this.getAddress(), parsedListing.assetContractAddress, parsedListing.tokenId, await this.contractWrapper.getSignerAddress());\n    const normalizedPricePerToken = await normalizePriceValue(this.contractWrapper.getProvider(), parsedListing.pricePerToken, parsedListing.currencyContractAddress);\n    const receipt = await this.contractWrapper.sendTransaction(\"updateListing\", [listingId, {\n      assetContract: parsedListing.assetContractAddress,\n      tokenId: parsedListing.tokenId,\n      quantity: parsedListing.quantity,\n      currency: cleanCurrencyAddress(parsedListing.currencyContractAddress),\n      pricePerToken: normalizedPricePerToken,\n      startTimestamp: parsedListing.startTimestamp,\n      endTimestamp: parsedListing.endTimestamp,\n      reserved: parsedListing.isReservedListing\n    }], {\n      // Higher gas limit for create listing\n      gasLimit: 500000\n    });\n    const event = this.contractWrapper.parseLogs(\"UpdatedListing\", receipt?.logs);\n    return {\n      id: event[0].args.listingId,\n      receipt\n    };\n  }\n\n  /**\n   * Cancel Direct Listing\n   *\n   * @remarks Cancel a direct listing on the marketplace\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the direct listing you want to cancel\n   * const listingId = 0;\n   *\n   * await contract.directListings.cancelListing(listingId);\n   * ```\n   */\n  async cancelListing(listingId) {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"cancelListing\", [listingId])\n    };\n  }\n\n  /**\n   * Buy from a Listing\n   *\n   * @remarks Buy from a specific direct listing from the marketplace.\n   *\n   * @example\n   * ```javascript\n   * // The ID of the listing you want to buy from\n   * const listingId = 0;\n   * // Quantity of the asset you want to buy\n   * const quantityDesired = 1;\n   *\n   * await contract.directListings.buyFromListing(listingId, quantityDesired);\n   * ```\n   *\n   * @param listingId - The listing id to buy\n   * @param quantityDesired - the quantity to buy\n   * @param receiver - optional receiver of the bought listing if different from the connected wallet\n   */\n  async buyFromListing(listingId, quantityDesired, receiver) {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    const {\n      valid,\n      error\n    } = await this.isStillValidListing(listing, quantityDesired);\n    if (!valid) {\n      throw new Error(`Listing ${listingId} is no longer valid. ${error}`);\n    }\n    const buyFor = receiver ? receiver : await this.contractWrapper.getSignerAddress();\n    const quantity = BigNumber.from(quantityDesired);\n    const value = BigNumber.from(listing.pricePerToken).mul(quantity);\n    const overrides = (await this.contractWrapper.getCallOverrides()) || {};\n    await setErc20Allowance(this.contractWrapper, value, listing.currencyContractAddress, overrides);\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"buyFromListing\", [listingId, buyFor, quantity, listing.currencyContractAddress, value], overrides)\n    };\n  }\n\n  /**\n   * Approve buyer for reserved listing.\n   *\n   * @remarks Approve a buyer to buy from a reserved listing.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the direct listing you want approve buyer for\n   * const listingId = \"0\";\n   *\n   * await contract.directListings.approveBuyerForReservedListing(listingId, buyer);\n   * ```\n   *\n   * @param listingId - The listing id to buy\n   * @param buyer - Address of buyer being approved\n   */\n  async approveBuyerForReservedListing(listingId, buyer) {\n    const isApproved = await this.isBuyerApprovedForListing(listingId, buyer);\n    if (!isApproved) {\n      return {\n        receipt: await this.contractWrapper.sendTransaction(\"approveBuyerForListing\", [listingId, buyer, true])\n      };\n    } else {\n      throw new Error(`Buyer ${buyer} already approved for listing ${listingId}.`);\n    }\n  }\n\n  /**\n   * Revoke approval of a buyer for reserved listing.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the direct listing you want approve buyer for\n   * const listingId = \"0\";\n   *\n   * await contract.directListings.revokeBuyerApprovalForReservedListing(listingId, buyer);\n   * ```\n   *\n   * @param listingId - The listing id to buy\n   * @param buyer - Address of buyer being approved\n   */\n  async revokeBuyerApprovalForReservedListing(listingId, buyer) {\n    const isApproved = await this.isBuyerApprovedForListing(listingId, buyer);\n    if (isApproved) {\n      return {\n        receipt: await this.contractWrapper.sendTransaction(\"approveBuyerForListing\", [listingId, buyer, false])\n      };\n    } else {\n      throw new Error(`Buyer ${buyer} not approved for listing ${listingId}.`);\n    }\n  }\n\n  /**\n   * Approve a currency for a listing.\n   *\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the direct listing you want approve currency for\n   * const listingId = \"0\";\n   *\n   * await contract.directListings.approveCurrencyForListing(listingId, currencyContractAddress, pricePerTokenInCurrency);\n   * ```\n   *\n   * @param listingId - The listing id to buy\n   * @param currencyContractAddress - Address of currency being approved\n   * @param pricePerTokenInCurrency - Price per token in the currency\n   */\n  async approveCurrencyForListing(listingId, currencyContractAddress, pricePerTokenInCurrency) {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    if (currencyContractAddress === listing.currencyContractAddress) {\n      invariant(pricePerTokenInCurrency === listing.pricePerToken, \"Approving listing currency with a different price.\");\n    }\n    const currencyPrice = await this.contractWrapper.readContract.currencyPriceForListing(listingId, currencyContractAddress);\n    invariant(pricePerTokenInCurrency === currencyPrice, \"Currency already approved with this price.\");\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"approveCurrencyForListing\", [listingId, currencyContractAddress, pricePerTokenInCurrency])\n    };\n  }\n\n  /**\n   * Revoke approval of a currency from a listing.\n   *\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the direct listing you want to revoke currency for\n   * const listingId = \"0\";\n   *\n   * await contract.directListings.revokeCurrencyApprovalForListing(listingId, currencyContractAddress);\n   * ```\n   *\n   * @param listingId - The listing id to buy\n   * @param currencyContractAddress - Address of currency\n   */\n  async revokeCurrencyApprovalForListing(listingId, currencyContractAddress) {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    if (currencyContractAddress === listing.currencyContractAddress) {\n      throw new Error(`Can't revoke approval for main listing currency.`);\n    }\n    const currencyPrice = await this.contractWrapper.readContract.currencyPriceForListing(listingId, currencyContractAddress);\n    invariant(!currencyPrice.isZero(), \"Currency not approved.\");\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"approveCurrencyForListing\", [listingId, currencyContractAddress, BigNumber.from(0)])\n    };\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Throws error if listing could not be found\n   *\n   * @param listingId - Listing to check for\n   */\n  async validateListing(listingId) {\n    try {\n      return await this.getListing(listingId);\n    } catch (err) {\n      console.error(`Error getting the listing with id ${listingId}`);\n      throw err;\n    }\n  }\n\n  /**\n   * Helper method maps the auction listing to the direct listing interface.\n   *\n   * @internal\n   * @param listing - The listing to map, as returned from the contract.\n   * @returns - The mapped interface.\n   */\n  async mapListing(listing) {\n    let status = Status.UNSET;\n    const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\n    const blockTime = block.timestamp;\n    switch (listing.status) {\n      case 1:\n        status = BigNumber.from(listing.startTimestamp).gt(blockTime) ? Status.Created : BigNumber.from(listing.endTimestamp).lt(blockTime) ? Status.Expired : Status.Active;\n        break;\n      case 2:\n        status = Status.Completed;\n        break;\n      case 3:\n        status = Status.Cancelled;\n        break;\n    }\n    return {\n      assetContractAddress: listing.assetContract,\n      currencyContractAddress: listing.currency,\n      pricePerToken: listing.pricePerToken.toString(),\n      currencyValuePerToken: await fetchCurrencyValue(this.contractWrapper.getProvider(), listing.currency, listing.pricePerToken),\n      id: listing.listingId.toString(),\n      tokenId: listing.tokenId.toString(),\n      quantity: listing.quantity.toString(),\n      startTimeInSeconds: BigNumber.from(listing.startTimestamp).toNumber(),\n      asset: await fetchTokenMetadataForContract(listing.assetContract, this.contractWrapper.getProvider(), listing.tokenId, this.storage),\n      endTimeInSeconds: BigNumber.from(listing.endTimestamp).toNumber(),\n      creatorAddress: listing.listingCreator,\n      isReservedListing: listing.reserved,\n      status: status\n    };\n  }\n\n  /**\n   * Use this method to check if a direct listing is still valid.\n   *\n   * Ways a direct listing can become invalid:\n   * 1. The asset holder transferred the asset to another wallet\n   * 2. The asset holder burned the asset\n   * 3. The asset holder removed the approval on the marketplace\n   *\n   * @internal\n   * @param listing - The listing to check.\n   * @returns - True if the listing is valid, false otherwise.\n   */\n  async isStillValidListing(listing, quantity) {\n    const approved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), listing.assetContractAddress, listing.tokenId, listing.creatorAddress);\n    if (!approved) {\n      return {\n        valid: false,\n        error: `Token '${listing.tokenId}' from contract '${listing.assetContractAddress}' is not approved for transfer`\n      };\n    }\n    const provider = this.contractWrapper.getProvider();\n    const erc165 = new Contract(listing.assetContractAddress, ERC165Abi, provider);\n    const isERC721 = await erc165.supportsInterface(InterfaceId_IERC721);\n    const isERC1155 = await erc165.supportsInterface(InterfaceId_IERC1155);\n    if (isERC721) {\n      const asset = new Contract(listing.assetContractAddress, Erc721Abi, provider);\n      const valid = (await asset.ownerOf(listing.tokenId)).toLowerCase() === listing.creatorAddress.toLowerCase();\n      return {\n        valid,\n        error: valid ? undefined : `Seller is not the owner of Token '${listing.tokenId}' from contract '${listing.assetContractAddress} anymore'`\n      };\n    } else if (isERC1155) {\n      const asset = new Contract(listing.assetContractAddress, Erc1155Abi, provider);\n      const balance = await asset.balanceOf(listing.creatorAddress, listing.tokenId);\n      const valid = balance.gte(quantity || listing.quantity);\n      return {\n        valid,\n        error: valid ? undefined : `Seller does not have enough balance of Token '${listing.tokenId}' from contract '${listing.assetContractAddress} to fulfill the listing`\n      };\n    } else {\n      return {\n        valid: false,\n        error: \"Contract does not implement ERC 1155 or ERC 721.\"\n      };\n    }\n  }\n  applyFilter(listings, filter) {\n    let rawListings = [...listings];\n    if (filter) {\n      if (filter.seller) {\n        rawListings = rawListings.filter(seller => seller.listingCreator.toString().toLowerCase() === filter?.seller?.toString().toLowerCase());\n      }\n      if (filter.tokenContract) {\n        rawListings = rawListings.filter(tokenContract => tokenContract.assetContract.toString().toLowerCase() === filter?.tokenContract?.toString().toLowerCase());\n      }\n      if (filter.tokenId !== undefined) {\n        rawListings = rawListings.filter(tokenContract => tokenContract.tokenId.toString() === filter?.tokenId?.toString());\n      }\n    }\n    return filter?.count && filter.count < rawListings.length ? rawListings.slice(0, filter.count) : rawListings;\n  }\n}\n\n/**\n * @internal\n */\nconst EnglishAuctionInputParamsSchema = z.object({\n  /**\n   * The address of the asset being auctioned.\n   */\n  assetContractAddress: AddressSchema,\n  /**\n   * The ID of the token to auction.\n   */\n  tokenId: BigNumberishSchema,\n  /**\n   * The quantity of tokens to include in the listing.\n   *\n   * For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here).\n   */\n  quantity: BigNumberishSchema.default(1),\n  /**\n   * The address of the currency to accept for the listing.\n   */\n  currencyContractAddress: AddressSchema.default(NATIVE_TOKEN_ADDRESS),\n  /**\n   * The minimum price that a bid must be in order to be accepted.\n   */\n  minimumBidAmount: AmountSchema,\n  /**\n   * The buyout price of the auction.\n   */\n  buyoutBidAmount: AmountSchema,\n  /**\n   * This is a buffer e.g. x seconds.\n   *\n   * If a new winning bid is made less than x seconds before expirationTimestamp, the\n   * expirationTimestamp is increased by x seconds.\n   */\n  timeBufferInSeconds: BigNumberishSchema.default(900),\n  // 15 minutes by default\n\n  /**\n   * This is a buffer in basis points e.g. x%.\n   *\n   * To be considered as a new winning bid, a bid must be at least x% greater than\n   * the current winning bid.\n   */\n  bidBufferBps: BigNumberishSchema.default(500),\n  // 5% by default\n\n  /**\n   * The start time of the auction.\n   */\n  startTimestamp: RawDateSchema.default(new Date()),\n  /**\n   * The end time of the auction.\n   */\n  endTimestamp: EndDateSchema\n});\n\n/**\n * @public\n */\n\n/**\n * Handles auctions\n * @public\n */\nclass MarketplaceV3EnglishAuctions {\n  // utilities\n\n  constructor(contractWrapper, storage) {\n    _defineProperty(this, \"featureName\", FEATURE_ENGLISH_AUCTIONS.name);\n    _defineProperty(this, \"contractWrapper\", void 0);\n    _defineProperty(this, \"storage\", void 0);\n    _defineProperty(this, \"events\", void 0);\n    _defineProperty(this, \"interceptor\", void 0);\n    _defineProperty(this, \"encoder\", void 0);\n    _defineProperty(this, \"estimator\", void 0);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.events = new ContractEvents(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the total number of english auctions.\n   * @returns Returns the total number of auctions created.\n   * @public\n   *\n   * @example\n   * ```javascript\n   * const totalAuctions = await contract.englishAuctions.getTotalCount();\n   * ```\n   */\n  async getTotalCount() {\n    return await this.contractWrapper.readContract.totalAuctions();\n  }\n\n  /**\n   * Get all auctions.\n   *\n   * @example\n   * ```javascript\n   * const auctions = await contract.englishAuctions.getAll();\n   * ```\n   *\n   * @param filter - optional filter parameters\n   * @returns the Auction object array\n   */\n  async getAll(filter) {\n    const totalAuctions = await this.getTotalCount();\n    let start = BigNumber.from(filter?.start || 0).toNumber();\n    let end = totalAuctions.toNumber();\n    if (end === 0) {\n      throw new Error(`No auctions exist on the contract.`);\n    }\n    let rawAuctions = [];\n    let batches = await getAllInBatches(start, end, this.contractWrapper.readContract.getAllAuctions);\n    rawAuctions = batches.flat();\n    const filteredAuctions = this.applyFilter(rawAuctions, filter);\n    return await Promise.all(filteredAuctions.map(auction => this.mapAuction(auction)));\n  }\n\n  /**\n   * Get all valid auctions.\n   *\n   * @example\n   * ```javascript\n   * const auctions = await contract.englishAuctions.getAllValid();\n   * ```\n   *\n   * @param filter - optional filter parameters\n   * @returns the Auction object array\n   */\n  async getAllValid(filter) {\n    const totalAuctions = await this.getTotalCount();\n    let start = BigNumber.from(filter?.start || 0).toNumber();\n    let end = totalAuctions.toNumber();\n    if (end === 0) {\n      throw new Error(`No auctions exist on the contract.`);\n    }\n    let rawAuctions = [];\n    let batches = await getAllInBatches(start, end, this.contractWrapper.readContract.getAllValidAuctions);\n    rawAuctions = batches.flat();\n    const filteredAuctions = this.applyFilter(rawAuctions, filter);\n    return await Promise.all(filteredAuctions.map(auction => this.mapAuction(auction)));\n  }\n\n  /**\n   * Get an Auction by id.\n   *\n   * @example\n   * ```javascript\n   * const auctionId = 0;\n   * const auction = await contract.englishAuctions.getAuction(auctionId);\n   * ```\n   *\n   * @param auctionId - the auction Id\n   * @returns the Auction object\n   */\n  async getAuction(auctionId) {\n    const auction = await this.contractWrapper.readContract.getAuction(auctionId);\n    return await this.mapAuction(auction);\n  }\n\n  /**\n   * Get Highest Bid\n   *\n   * @remarks Get the current highest bid of an active auction.\n   *\n   * @example\n   * ```javascript\n   * // The ID of the auction\n   * const auctionId = 0;\n   *\n   * contract.englishAuctions.\n   *   .getWinningBid(auctionId)\n   *   .then((bid) => console.log(bid))\n   *   .catch((err) => console.error(err));\n   * ```\n   */\n  async getWinningBid(auctionId) {\n    await this.validateAuction(BigNumber.from(auctionId));\n    const bid = await this.contractWrapper.readContract.getWinningBid(auctionId);\n    if (bid._bidder === constants.AddressZero) {\n      return undefined;\n    }\n    return await this.mapBid(auctionId.toString(), bid._bidder, bid._currency, bid._bidAmount.toString());\n  }\n\n  /**\n   * Check if a bid-amount is/will be a winning bid.\n   *\n   * @param auctionId - Auction Id\n   * @param bidAmount - Amount to bid\n   * @returns the Auction object\n   */\n  async isWinningBid(auctionId, bidAmount) {\n    return await this.contractWrapper.readContract.isNewWinningBid(auctionId, bidAmount);\n  }\n\n  /**\n   * Get Auction Winner\n   *\n   * @remarks Get the winner of the auction after an auction ends.\n   *\n   * @example\n   * ```javascript\n   * // The auction ID of the auction that closed\n   * const auctionId = 0;\n   *\n   * contract.englishAuctions.\n   *   .getWinner(auctionId)\n   *   .then((auctionWinner) => console.log(auctionWinner))\n   *   .catch((err) => console.error(err));\n   * ```\n   */\n  async getWinner(auctionId) {\n    const auction = await this.validateAuction(BigNumber.from(auctionId));\n    const bid = await this.contractWrapper.readContract.getWinningBid(auctionId);\n    const now = BigNumber.from(Math.floor(Date.now() / 1000));\n    const endTime = BigNumber.from(auction.endTimeInSeconds);\n\n    // if we have a winner in the map and the current time is past the endtime of the auction return the address of the winner\n    if (now.gt(endTime) && bid._bidder !== constants.AddressZero) {\n      return bid._bidder;\n    }\n    // otherwise fall back to query filter things\n\n    // TODO this should be via indexer or direct contract call\n    const closedAuctions = await this.contractWrapper.readContract.queryFilter(this.contractWrapper.readContract.filters.AuctionClosed());\n    const closed = closedAuctions.find(a => a.args.auctionId.eq(BigNumber.from(auctionId)));\n    if (!closed) {\n      throw new Error(`Could not find auction with ID ${auctionId} in closed auctions`);\n    }\n    return closed.args.winningBidder;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create Auction\n   *\n   * @remarks Create a new auction where people can bid on an asset.\n   *\n   * @example\n   * ```javascript\n   * // Data of the auction you want to create\n   * const auction = {\n   *   // address of the contract of the asset you want to auction\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to auction\n   *   tokenId: \"0\",\n   *   // how many of the asset you want to auction\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the auctioned tokens\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // the minimum bid that will be accepted for the token\n   *   minimumBidAmount: \"1.5\",\n   *   // how much people would have to bid to instantly buy the asset\n   *   buyoutBidAmount: \"10\",\n   *   // If a bid is made less than these many seconds before expiration, the expiration time is increased by this.\n   *   timeBufferInSeconds: \"900\", // 15 minutes by default\n   *   // A bid must be at least this much bps greater than the current winning bid\n   *   bidBufferBps: \"500\", // 5% by default\n   *   // when should the auction open up for bidding\n   *   startTimestamp: new Date(Date.now()),\n   *   // end time of auction\n   *   endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\n   * }\n   *\n   * const tx = await contract.englishAuctions.createAuction(auction);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created auction\n   * ```\n   */\n  async createAuction(auction) {\n    const parsedAuction = EnglishAuctionInputParamsSchema.parse(auction);\n    await handleTokenApproval(this.contractWrapper, this.getAddress(), parsedAuction.assetContractAddress, parsedAuction.tokenId, await this.contractWrapper.getSignerAddress());\n    const normalizedBuyoutAmount = await normalizePriceValue(this.contractWrapper.getProvider(), parsedAuction.buyoutBidAmount, parsedAuction.currencyContractAddress);\n    const normalizedMinBidAmount = await normalizePriceValue(this.contractWrapper.getProvider(), parsedAuction.minimumBidAmount, parsedAuction.currencyContractAddress);\n    const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\n    const blockTime = block.timestamp;\n    if (parsedAuction.startTimestamp.lt(blockTime)) {\n      parsedAuction.startTimestamp = BigNumber.from(blockTime);\n    }\n    const receipt = await this.contractWrapper.sendTransaction(\"createAuction\", [{\n      assetContract: parsedAuction.assetContractAddress,\n      tokenId: parsedAuction.tokenId,\n      quantity: parsedAuction.quantity,\n      currency: cleanCurrencyAddress(parsedAuction.currencyContractAddress),\n      minimumBidAmount: normalizedMinBidAmount,\n      buyoutBidAmount: normalizedBuyoutAmount,\n      timeBufferInSeconds: parsedAuction.timeBufferInSeconds,\n      bidBufferBps: parsedAuction.bidBufferBps,\n      startTimestamp: parsedAuction.startTimestamp,\n      endTimestamp: parsedAuction.endTimestamp\n    }], {\n      // Higher gas limit for create auction\n      gasLimit: 500000\n    });\n    const event = this.contractWrapper.parseLogs(\"NewAuction\", receipt?.logs);\n    return {\n      id: event[0].args.auctionId,\n      receipt\n    };\n  }\n\n  /**\n   * Buyout Auction\n   *\n   * @remarks Buy a specific auction from the marketplace.\n   *\n   * @example\n   * ```javascript\n   * // The auction ID of the asset you want to buy\n   * const auctionId = 0;\n   *\n   * await contract.englishAuctions.buyoutAuction(auctionId);\n   * ```\n   */\n  async buyoutAuction(auctionId) {\n    const auction = await this.validateAuction(BigNumber.from(auctionId));\n    const currencyMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), auction.currencyContractAddress);\n    return this.makeBid(auctionId, ethers.utils.formatUnits(auction.buyoutBidAmount, currencyMetadata.decimals));\n  }\n\n  /**\n   * Bid On Auction\n   *\n   * @remarks Make a bid on an auction\n   *\n   * @example\n   * ```javascript\n   * // The auction ID of the asset you want to bid on\n   * const auctionId = 0;\n   * // The total amount you are willing to bid for auctioned tokens\n   * const bidAmount = 1;\n   *\n   * await contract.englishAuctions.makeBid(auctionId, bidAmount);\n   * ```\n   */\n  async makeBid(auctionId, bidAmount) {\n    const auction = await this.validateAuction(BigNumber.from(auctionId));\n    const normalizedBidAmount = await normalizePriceValue(this.contractWrapper.getProvider(), bidAmount, auction.currencyContractAddress);\n    if (normalizedBidAmount.eq(BigNumber.from(0))) {\n      throw new Error(\"Cannot make a bid with 0 value\");\n    }\n    if (BigNumber.from(auction.buyoutBidAmount).gt(0) && normalizedBidAmount.gt(auction.buyoutBidAmount)) {\n      throw new Error(\"Bid amount must be less than or equal to buyoutBidAmount\");\n    }\n    const winningBid = await this.getWinningBid(auctionId);\n    if (winningBid) {\n      const isWinnner = await this.isWinningBid(auctionId, normalizedBidAmount);\n      invariant(isWinnner, \"Bid price is too low based on the current winning bid and the bid buffer\");\n    } else {\n      const tokenPrice = normalizedBidAmount;\n      const minimumBidAmount = BigNumber.from(auction.minimumBidAmount);\n      invariant(tokenPrice.gte(minimumBidAmount), \"Bid price is too low based on minimum bid amount\");\n    }\n    const overrides = (await this.contractWrapper.getCallOverrides()) || {};\n    await setErc20Allowance(this.contractWrapper, normalizedBidAmount, auction.currencyContractAddress, overrides);\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"bidInAuction\", [auctionId, normalizedBidAmount], overrides)\n    };\n  }\n\n  /**\n   * Cancel Auction\n   *\n   * @remarks Cancel an auction on the marketplace\n   *\n   * @example\n   * ```javascript\n   * // The ID of the auction you want to cancel\n   * const auctionId = \"0\";\n   *\n   * await contract.englishAuctions.cancelAuction(auctionId);\n   * ```\n   */\n  async cancelAuction(auctionId) {\n    const winningBid = await this.getWinningBid(auctionId);\n    if (winningBid) {\n      throw new Error(`Bids already made.`);\n    }\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"cancelAuction\", [auctionId])\n    };\n  }\n\n  /**\n   * Close the Auction for the buyer\n   *\n   * @remarks Closes the Auction and executes the sale for the buyer.\n   *\n   * @example\n   * ```javascript\n   * // The ID of the auction you want to close\n   * const auction = \"0\";\n   * await contract.englishAuctions.closeAuctionForBidder(auctionId);\n   * ```\n   *\n   * @param auctionId - the auction id to close\n   * @param closeFor - optionally pass the winning bid offeror address to close the auction on their behalf\n   */\n  async closeAuctionForBidder(auctionId, closeFor) {\n    if (!closeFor) {\n      closeFor = await this.contractWrapper.getSignerAddress();\n    }\n    const auction = await this.validateAuction(BigNumber.from(auctionId));\n    try {\n      return {\n        receipt: await this.contractWrapper.sendTransaction(\"collectAuctionTokens\", [BigNumber.from(auctionId)])\n      };\n    } catch (err) {\n      if (err.message.includes(\"Marketplace: auction still active.\")) {\n        throw new AuctionHasNotEndedError(auctionId.toString(), auction.endTimeInSeconds.toString());\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  /**\n   * Close the Auction for the seller, i.e. the auction creator\n   *\n   * @remarks Closes the Auction and executes the sale for the seller.\n   *\n   * @example\n   * ```javascript\n   * // The ID of the auction you want to close\n   * const auctionId = \"0\";\n   * await contract.englishAuctions.closeAuctionForSeller(auctionId);\n   * ```\n   *\n   * @param auctionId - the auction id to close\n   */\n  async closeAuctionForSeller(auctionId) {\n    const auction = await this.validateAuction(BigNumber.from(auctionId));\n    try {\n      return {\n        receipt: await this.contractWrapper.sendTransaction(\"collectAuctionPayout\", [BigNumber.from(auctionId)])\n      };\n    } catch (err) {\n      if (err.message.includes(\"Marketplace: auction still active.\")) {\n        throw new AuctionHasNotEndedError(auctionId.toString(), auction.endTimeInSeconds.toString());\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  /**\n   * Execute the Auction Sale\n   *\n   * @remarks Closes the Auction and executes the sale for both parties.\n   *\n   * @example\n   * ```javascript\n   * // The ID of the auction you want to close\n   * const auction = \"0\";\n   * await contract.englishAuctions.executeSale(auctionId);\n   * ```\n   *\n   * @param auctionId - the auction to close\n   */\n  async executeSale(auctionId) {\n    const auction = await this.validateAuction(BigNumber.from(auctionId));\n    try {\n      const winningBid = await this.getWinningBid(auctionId);\n      invariant(winningBid, \"No winning bid found\");\n      const closeForSeller = this.encoder.encode(\"collectAuctionPayout\", [auctionId]);\n      const closeForBuyer = this.encoder.encode(\"collectAuctionTokens\", [auctionId]);\n      return await this.contractWrapper.multiCall([closeForSeller, closeForBuyer]);\n    } catch (err) {\n      if (err.message.includes(\"Marketplace: auction still active.\")) {\n        throw new AuctionHasNotEndedError(auctionId.toString(), auction.endTimeInSeconds.toString());\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  /**\n   * Get the buffer in basis points between bids for an auction.\n   *\n   * @param auctionId - id of the auction\n   */\n  async getBidBufferBps(auctionId) {\n    return (await this.getAuction(auctionId)).bidBufferBps;\n  }\n\n  /**\n   * returns the minimum bid a user can place to outbid the previous highest bid\n   * @param auctionId - id of the auction\n   */\n  async getMinimumNextBid(auctionId) {\n    // we can fetch all of these at the same time using promise.all\n    const [currentBidBufferBps, winningBid, auction] = await Promise.all([this.getBidBufferBps(auctionId), this.getWinningBid(auctionId), await this.validateAuction(BigNumber.from(auctionId))]);\n    const currentBidOrReservePrice = winningBid ?\n    // if there is a winning bid use the value of it\n    BigNumber.from(winningBid.bidAmount) :\n    // if there is no winning bid use the reserve price\n    BigNumber.from(auction.minimumBidAmount);\n    const minimumNextBid = currentBidOrReservePrice.add(\n    // the addition of the current bid and the buffer\n    // (have to divide by 10000 to get the fraction of the buffer (since it's in basis points))\n    currentBidOrReservePrice.mul(currentBidBufferBps).div(10000));\n\n    // it's more useful to return a currency value here\n    return fetchCurrencyValue(this.contractWrapper.getProvider(), auction.currencyContractAddress, minimumNextBid);\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Throws error if auction could not be found\n   *\n   * @param auctionId - Auction to check for\n   */\n  async validateAuction(auctionId) {\n    try {\n      return await this.getAuction(auctionId);\n    } catch (err) {\n      console.error(`Error getting the auction with id ${auctionId}`);\n      throw err;\n    }\n  }\n\n  /**\n   * Helper method maps the auction to the auction interface.\n   *\n   * @internal\n   * @param auction - The auction to map, as returned from the contract.\n   * @returns - The mapped interface.\n   */\n  async mapAuction(auction) {\n    let status = Status.UNSET;\n    const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\n    const blockTime = block.timestamp;\n    switch (auction.status) {\n      case 1:\n        status = BigNumber.from(auction.startTimestamp).gt(blockTime) ? Status.Created : BigNumber.from(auction.endTimestamp).lt(blockTime) ? Status.Expired : Status.Active;\n        break;\n      case 2:\n        status = Status.Completed;\n        break;\n      case 3:\n        status = Status.Cancelled;\n        break;\n    }\n    return {\n      id: auction.auctionId.toString(),\n      creatorAddress: auction.auctionCreator,\n      assetContractAddress: auction.assetContract,\n      tokenId: auction.tokenId.toString(),\n      quantity: auction.quantity.toString(),\n      currencyContractAddress: auction.currency,\n      minimumBidAmount: auction.minimumBidAmount.toString(),\n      minimumBidCurrencyValue: await fetchCurrencyValue(this.contractWrapper.getProvider(), auction.currency, auction.minimumBidAmount),\n      buyoutBidAmount: auction.buyoutBidAmount.toString(),\n      buyoutCurrencyValue: await fetchCurrencyValue(this.contractWrapper.getProvider(), auction.currency, auction.buyoutBidAmount),\n      timeBufferInSeconds: BigNumber.from(auction.timeBufferInSeconds).toNumber(),\n      bidBufferBps: BigNumber.from(auction.bidBufferBps).toNumber(),\n      startTimeInSeconds: BigNumber.from(auction.startTimestamp).toNumber(),\n      endTimeInSeconds: BigNumber.from(auction.endTimestamp).toNumber(),\n      asset: await fetchTokenMetadataForContract(auction.assetContract, this.contractWrapper.getProvider(), auction.tokenId, this.storage),\n      status: status\n    };\n  }\n\n  /**\n   * Maps an auction-bid to the strict interface\n   *\n   * @internal\n   * @param bid\n   * @returns - A `Bid` object\n   */\n  async mapBid(auctionId, bidderAddress, currencyContractAddress, bidAmount) {\n    return {\n      auctionId,\n      bidderAddress,\n      currencyContractAddress,\n      bidAmount,\n      bidAmountCurrencyValue: await fetchCurrencyValue(this.contractWrapper.getProvider(), currencyContractAddress, bidAmount)\n    };\n  }\n  applyFilter(auctions, filter) {\n    let rawAuctions = [...auctions];\n    if (filter) {\n      if (filter.seller) {\n        rawAuctions = rawAuctions.filter(seller => seller.auctionCreator.toString().toLowerCase() === filter?.seller?.toString().toLowerCase());\n      }\n      if (filter.tokenContract) {\n        rawAuctions = rawAuctions.filter(tokenContract => tokenContract.assetContract.toString().toLowerCase() === filter?.tokenContract?.toString().toLowerCase());\n      }\n      if (filter.tokenId !== undefined) {\n        rawAuctions = rawAuctions.filter(tokenContract => tokenContract.tokenId.toString() === filter?.tokenId?.toString());\n      }\n    }\n    return filter?.count && filter.count < rawAuctions.length ? rawAuctions.slice(0, filter.count) : rawAuctions;\n  }\n}\n\n/**\n * @internal\n */\nconst OfferInputParamsSchema = z.object({\n  /**\n   * The address of the asset being sought.\n   */\n  assetContractAddress: AddressSchema,\n  /**\n   * The ID of the token.\n   */\n  tokenId: BigNumberishSchema,\n  /**\n   * The quantity of tokens to buy.\n   *\n   * For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here).\n   */\n  quantity: BigNumberishSchema.default(1),\n  /**\n   * The address of the currency offered for the NFTs.\n   */\n  currencyContractAddress: AddressSchema.default(NATIVE_TOKEN_ADDRESS),\n  /**\n   * The total offer amount for the NFTs.\n   */\n  totalPrice: AmountSchema,\n  /**\n   * The end time of the offer.\n   */\n  endTimestamp: EndDateSchema\n});\n\n/**\n * @public\n */\n\n/**\n * Handles marketplace offers\n * @public\n */\nclass MarketplaceV3Offers {\n  // utilities\n\n  constructor(contractWrapper, storage) {\n    _defineProperty(this, \"featureName\", FEATURE_OFFERS.name);\n    _defineProperty(this, \"contractWrapper\", void 0);\n    _defineProperty(this, \"storage\", void 0);\n    _defineProperty(this, \"events\", void 0);\n    _defineProperty(this, \"interceptor\", void 0);\n    _defineProperty(this, \"encoder\", void 0);\n    _defineProperty(this, \"estimator\", void 0);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.events = new ContractEvents(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the total number of offers\n   * @returns Returns the total number of offers created.\n   * @public\n   *\n   * @example\n   * ```javascript\n   * const totalOffers = await contract.offers.getTotalCount();\n   * ```\n   */\n  async getTotalCount() {\n    return await this.contractWrapper.readContract.totalOffers();\n  }\n\n  /**\n   * Get all offers.\n   *\n   * @example\n   * ```javascript\n   * const offers = await contract.offers.getAll();\n   * ```\n   *\n   * @param filter - optional filter parameters\n   * @returns the Offer object array\n   */\n  async getAll(filter) {\n    const totalOffers = await this.getTotalCount();\n    let start = BigNumber.from(filter?.start || 0).toNumber();\n    let end = totalOffers.toNumber();\n    if (end === 0) {\n      throw new Error(`No offers exist on the contract.`);\n    }\n    let rawOffers = [];\n    let batches = await getAllInBatches(start, end, this.contractWrapper.readContract.getAllOffers);\n    rawOffers = batches.flat();\n    const filteredOffers = this.applyFilter(rawOffers, filter);\n    return await Promise.all(filteredOffers.map(offer => this.mapOffer(offer)));\n  }\n\n  /**\n   * Get all valid offers.\n   *\n   * @example\n   * ```javascript\n   * const offers = await contract.offers.getAllValid();\n   * ```\n   *\n   * @param filter - optional filter parameters\n   * @returns the Offer object array\n   */\n  async getAllValid(filter) {\n    const totalOffers = await this.getTotalCount();\n    let start = BigNumber.from(filter?.start || 0).toNumber();\n    let end = totalOffers.toNumber();\n    if (end === 0) {\n      throw new Error(`No offers exist on the contract.`);\n    }\n    let rawOffers = [];\n    let batches = await getAllInBatches(start, end, this.contractWrapper.readContract.getAllValidOffers);\n    rawOffers = batches.flat();\n    const filteredOffers = this.applyFilter(rawOffers, filter);\n    return await Promise.all(filteredOffers.map(offer => this.mapOffer(offer)));\n  }\n\n  /**\n   * Get a offer by id\n   *\n   * @example\n   * ```javascript\n   * const offerId = 0;\n   * const offer = await contract.offers.getOffer(offerId);\n   * ```\n   *\n   * @param offerId - the listing id\n   * @returns the Direct listing object\n   */\n  async getOffer(offerId) {\n    const offer = await this.contractWrapper.readContract.getOffer(offerId);\n    return await this.mapOffer(offer);\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Make Offer\n   *\n   * @remarks Make an offer on the marketplace for an asset.\n   *\n   * @example\n   * ```javascript\n   * // Data of the offer you want to make\n   * const offer = {\n   *   // address of the contract the asset you want to make an offer for\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to buy\n   *   tokenId: \"0\",\n   *   // how many of the asset you want to buy\n   *   quantity: 1,\n   *   // address of the currency contract that you offer to pay in\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // Total price you offer to pay for the mentioned token(s)\n   *   totalPrice: \"1.5\",\n   *   // Offer valid until\n   *   endTimestamp: new Date(),\n   * }\n   *\n   * const tx = await contract.offers.makeOffer(offer);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created offer\n   * ```\n   */\n  async makeOffer(offer) {\n    const parsedOffer = OfferInputParamsSchema.parse(offer);\n    const chainId = await this.contractWrapper.getChainID();\n    const currency = isNativeToken(parsedOffer.currencyContractAddress) ? NATIVE_TOKENS[chainId].wrapped.address : parsedOffer.currencyContractAddress;\n    const normalizedTotalPrice = await normalizePriceValue(this.contractWrapper.getProvider(), parsedOffer.totalPrice, currency);\n    const overrides = await this.contractWrapper.getCallOverrides();\n    await setErc20Allowance(this.contractWrapper, normalizedTotalPrice, currency, overrides);\n    const receipt = await this.contractWrapper.sendTransaction(\"makeOffer\", [{\n      assetContract: parsedOffer.assetContractAddress,\n      tokenId: parsedOffer.tokenId,\n      quantity: parsedOffer.quantity,\n      currency: currency,\n      totalPrice: normalizedTotalPrice,\n      expirationTimestamp: parsedOffer.endTimestamp\n    }], {\n      // Higher gas limit for create listing\n      gasLimit: 500000\n    });\n    const event = this.contractWrapper.parseLogs(\"NewOffer\", receipt?.logs);\n    return {\n      id: event[0].args.offerId,\n      receipt\n    };\n  }\n\n  /**\n   * Cancel Offer\n   *\n   * @remarks Cancel an offer on the marketplace\n   *\n   * @example\n   * ```javascript\n   * // The ID of the offer you want to cancel\n   * const offerId = \"0\";\n   *\n   * await contract.offers.cancelOffer(offerId);\n   * ```\n   */\n  async cancelOffer(offerId) {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"cancelOffer\", [offerId])\n    };\n  }\n\n  /**\n   * Accept an offer\n   *\n   * @example\n   * ```javascript\n   * // The ID of the offer you want to accept\n   * const offerId = 0;\n   *\n   * await contract.offers.acceptOffer(offerId);\n   * ```\n   *\n   * @param offerId - The offer id\n   */\n  async acceptOffer(offerId) {\n    const offer = await this.validateOffer(BigNumber.from(offerId));\n    const {\n      valid,\n      error\n    } = await this.isStillValidOffer(offer);\n    if (!valid) {\n      throw new Error(`Offer ${offerId} is no longer valid. ${error}`);\n    }\n    const overrides = (await this.contractWrapper.getCallOverrides()) || {};\n    await handleTokenApproval(this.contractWrapper, this.getAddress(), offer.assetContractAddress, offer.tokenId, await this.contractWrapper.getSignerAddress());\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"acceptOffer\", [offerId], overrides)\n    };\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Throws error if offer could not be found\n   *\n   * @param offerId - offer to check for\n   */\n  async validateOffer(offerId) {\n    try {\n      return await this.getOffer(offerId);\n    } catch (err) {\n      console.error(`Error getting the offer with id ${offerId}`);\n      throw err;\n    }\n  }\n\n  /**\n   * Helper method maps the offer to the offer interface.\n   *\n   * @internal\n   * @param offer - The offer to map, as returned from the contract.\n   * @returns - The mapped interface.\n   */\n  async mapOffer(offer) {\n    let status = Status.UNSET;\n    const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\n    const blockTime = block.timestamp;\n    switch (offer.status) {\n      case 1:\n        status = BigNumber.from(offer.expirationTimestamp).lt(blockTime) ? Status.Expired : Status.Active;\n        break;\n      case 2:\n        status = Status.Completed;\n        break;\n      case 3:\n        status = Status.Cancelled;\n        break;\n    }\n    return {\n      id: offer.offerId.toString(),\n      offerorAddress: offer.offeror,\n      assetContractAddress: offer.assetContract,\n      currencyContractAddress: offer.currency,\n      tokenId: offer.tokenId.toString(),\n      quantity: offer.quantity.toString(),\n      totalPrice: offer.totalPrice.toString(),\n      currencyValue: await fetchCurrencyValue(this.contractWrapper.getProvider(), offer.currency, offer.totalPrice),\n      asset: await fetchTokenMetadataForContract(offer.assetContract, this.contractWrapper.getProvider(), offer.tokenId, this.storage),\n      endTimeInSeconds: BigNumber.from(offer.expirationTimestamp).toNumber(),\n      status: status\n    };\n  }\n\n  /**\n   * Use this method to check if an offer is still valid.\n   *\n   * Ways an offer can become invalid:\n   * 1. The offer has expired\n   * 2. The offeror doesn't have enough balance of currency tokens\n   * 3. The offeror removed the approval of currency tokens on the marketplace\n   *\n   * @internal\n   * @param offer - The offer to check.\n   * @returns - True if the offer is valid, false otherwise.\n   */\n  async isStillValidOffer(offer) {\n    const now = BigNumber.from(Math.floor(Date.now() / 1000));\n    if (now.gt(offer.endTimeInSeconds)) {\n      return {\n        valid: false,\n        error: `Offer with ID ${offer.id} has expired`\n      };\n    }\n    const chainId = await this.contractWrapper.getChainID();\n    const currency = isNativeToken(offer.currencyContractAddress) ? NATIVE_TOKENS[chainId].wrapped.address : offer.currencyContractAddress;\n    const provider = this.contractWrapper.getProvider();\n    const erc20 = new ContractWrapper(provider, currency, ERC20Abi, {});\n    const offerorBalance = await erc20.readContract.balanceOf(offer.offerorAddress);\n    if (offerorBalance.lt(offer.totalPrice)) {\n      return {\n        valid: false,\n        error: `Offeror ${offer.offerorAddress} doesn't have enough balance of token ${currency}`\n      };\n    }\n    const offerorAllowance = await erc20.readContract.allowance(offer.offerorAddress, this.getAddress());\n    if (offerorAllowance.lt(offer.totalPrice)) {\n      return {\n        valid: false,\n        error: `Offeror ${offer.offerorAddress} hasn't approved enough amount of token ${currency}`\n      };\n    }\n    return {\n      valid: true,\n      error: \"\"\n    };\n  }\n  applyFilter(offers, filter) {\n    let rawOffers = [...offers];\n    if (filter) {\n      if (filter.offeror) {\n        rawOffers = rawOffers.filter(offeror => offeror.offeror.toString().toLowerCase() === filter?.offeror?.toString().toLowerCase());\n      }\n      if (filter.tokenContract) {\n        rawOffers = rawOffers.filter(tokenContract => tokenContract.assetContract.toString().toLowerCase() === filter?.tokenContract?.toString().toLowerCase());\n      }\n      if (filter.tokenId !== undefined) {\n        rawOffers = rawOffers.filter(tokenContract => tokenContract.tokenId.toString() === filter?.tokenId?.toString());\n      }\n    }\n    return filter?.count && filter.count < rawOffers.length ? rawOffers.slice(0, filter.count) : rawOffers;\n  }\n}\n\n/**\n * Create your own whitelabel marketplace that enables users to buy and sell any digital assets.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"marketplace\");\n * ```\n *\n * @public\n */\nclass MarketplaceV3 {\n  /**\n   * @internal\n   */\n\n  /**\n   * Direct listings\n   * @remarks Create and manage direct listings in your marketplace.\n   * ```javascript\n   * // Data of the listing you want to create\n   * const listing = {\n   *   // address of the contract the asset you want to list is on\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to list\n   *   tokenId: \"0\",\n   *   // how many of the asset you want to list\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the listing\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // The price to pay per unit of NFTs listed.\n   *   pricePerToken: 1.5,\n   *   // when should the listing open up for offers\n   *   startTimestamp: new Date(Date.now()),\n   *   // how long the listing will be open for\n   *   endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\n   *   // Whether the listing is reserved for a specific set of buyers.\n   *   isReservedListing: false\n   * }\n   *\n   * const tx = await contract.directListings.createListing(listing);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created listing\n   *\n   * // And on the buyers side:\n   * // The ID of the listing you want to buy from\n   * const listingId = 0;\n   * // Quantity of the asset you want to buy\n   * const quantityDesired = 1;\n   *\n   * await contract.directListings.buyFromListing(listingId, quantityDesired);\n   * ```\n   */\n  get directListings() {\n    return assertEnabled(this.detectDirectListings(), FEATURE_DIRECT_LISTINGS);\n  }\n  /**\n   * Auctions\n   * @remarks Create and manage auctions in your marketplace.\n   * @example\n   * ```javascript\n   * // Data of the auction you want to create\n   * const auction = {\n   *   // address of the contract of the asset you want to auction\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to auction\n   *   tokenId: \"0\",\n   *   // how many of the asset you want to auction\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the auctioned tokens\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // the minimum bid that will be accepted for the token\n   *   minimumBidAmount: \"1.5\",\n   *   // how much people would have to bid to instantly buy the asset\n   *   buyoutBidAmount: \"10\",\n   *   // If a bid is made less than these many seconds before expiration, the expiration time is increased by this.\n   *   timeBufferInSeconds: \"1000\",\n   *   // A bid must be at least this much bps greater than the current winning bid\n   *   bidBufferBps: \"100\", // 100 bps stands for 1%\n   *   // when should the auction open up for bidding\n   *   startTimestamp: new Date(Date.now()),\n   *   // end time of auction\n   *   endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\n   * }\n   *\n   * const tx = await contract.englishAuctions.createAuction(auction);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created auction\n   *\n   * // And on the buyers side:\n   * // The auction ID of the asset you want to bid on\n   * const auctionId = 0;\n   * // The total amount you are willing to bid for auctioned tokens\n   * const bidAmount = 1;\n   *\n   * await contract.englishAuctions.makeBid(auctionId, bidAmount);\n   * ```\n   */\n  get englishAuctions() {\n    return assertEnabled(this.detectEnglishAuctions(), FEATURE_ENGLISH_AUCTIONS);\n  }\n\n  /**\n   * Offers\n   * @remarks Make and manage offers.\n   * @example\n   * ```javascript\n   * // Data of the offer you want to make\n   * const offer = {\n   *   // address of the contract the asset you want to make an offer for\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to buy\n   *   tokenId: \"0\",\n   *   // how many of the asset you want to buy\n   *   quantity: 1,\n   *   // address of the currency contract that you offer to pay in\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // Total price you offer to pay for the mentioned token(s)\n   *   totalPrice: \"1.5\",\n   *   // Offer valid until\n   *   endTimestamp: new Date(),\n   * }\n   *\n   * const tx = await contract.offers.makeOffer(offer);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created offer\n   *\n   * // And on the seller's side:\n   * // The ID of the offer you want to accept\n   * const offerId = 0;\n   * await contract.offers.acceptOffer(offerId);\n   * ```\n   */\n  get offers() {\n    return assertEnabled(this.detectOffers(), FEATURE_OFFERS);\n  }\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options);\n    _defineProperty(this, \"abi\", void 0);\n    _defineProperty(this, \"contractWrapper\", void 0);\n    _defineProperty(this, \"storage\", void 0);\n    _defineProperty(this, \"encoder\", void 0);\n    _defineProperty(this, \"events\", void 0);\n    _defineProperty(this, \"estimator\", void 0);\n    _defineProperty(this, \"platformFees\", void 0);\n    _defineProperty(this, \"metadata\", void 0);\n    _defineProperty(this, \"roles\", void 0);\n    _defineProperty(this, \"interceptor\", void 0);\n    _defineProperty(this, \"_chainId\", void 0);\n    this._chainId = chainId;\n    this.abi = abi;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.metadata = new ContractMetadata(this.contractWrapper, MarketplaceContractSchema, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, MarketplaceV3.contractRoles);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n  }\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return this.contractWrapper.call(functionName, ...args);\n  }\n\n  /** ********************\n   * FEATURE DETECTION\n   * ********************/\n\n  detectDirectListings() {\n    if (detectContractFeature(this.contractWrapper, \"DirectListings\")) {\n      return new MarketplaceV3DirectListings(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectEnglishAuctions() {\n    if (detectContractFeature(this.contractWrapper, \"EnglishAuctions\")) {\n      return new MarketplaceV3EnglishAuctions(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectOffers() {\n    if (detectContractFeature(this.contractWrapper, \"Offers\")) {\n      return new MarketplaceV3Offers(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n}\n_defineProperty(MarketplaceV3, \"contractRoles\", [\"admin\", \"lister\", \"asset\"]);\n\nexport { MarketplaceV3 };\n"],"names":["DirectListingInputParamsSchema","z","assetContractAddress","AddressSchema","tokenId","BigNumberishSchema","quantity","currencyContractAddress","NATIVE_TOKEN_ADDRESS","pricePerToken","AmountSchema","startTimestamp","RawDateSchema","Date","endTimestamp","EndDateSchema","isReservedListing","default","MarketplaceV3DirectListings","contractWrapper","storage","_defineProperty","this","FEATURE_DIRECT_LISTINGS","events","ContractEvents","encoder","ContractEncoder","interceptor","ContractInterceptor","estimator","GasCostEstimator","readContract","address","totalListings","filter","getTotalCount","start","BigNumber","toNumber","end","Error","rawListings","getAllInBatches","getAllListings","batches","flat","filteredListings","applyFilter","Promise","all","map","listing","mapListing","getAllValidListings","listingId","getListing","buyer","validateListing","isBuyerApprovedForListing","currency","isCurrencyApprovedForListing","currencyPriceForListing","parsedListing","parse","handleTokenApproval","getAddress","getSignerAddress","normalizePriceValue","getProvider","normalizedPricePerToken","getBlock","block","blockTime","timestamp","lt","sendTransaction","assetContract","cleanCurrencyAddress","reserved","gasLimit","receipt","event","parseLogs","logs","id","args","quantityDesired","receiver","isStillValidListing","valid","error","buyFor","value","mul","getCallOverrides","overrides","setErc20Allowance","pricePerTokenInCurrency","invariant","currencyPrice","isZero","console","status","Status","gt","toString","fetchCurrencyValue","fetchTokenMetadataForContract","listingCreator","currencyValuePerToken","startTimeInSeconds","asset","endTimeInSeconds","creatorAddress","isTokenApprovedForTransfer","provider","erc165","Contract","ERC165Abi","supportsInterface","InterfaceId_IERC721","isERC721","InterfaceId_IERC1155","isERC1155","Erc721Abi","ownerOf","toLowerCase","undefined","Erc1155Abi","balanceOf","balance","gte","listings","seller","tokenContract","count","length","slice","EnglishAuctionInputParamsSchema","minimumBidAmount","buyoutBidAmount","timeBufferInSeconds","bidBufferBps","MarketplaceV3EnglishAuctions","FEATURE_ENGLISH_AUCTIONS","totalAuctions","rawAuctions","getAllAuctions","filteredAuctions","auction","mapAuction","getAllValidAuctions","auctionId","getAuction","validateAuction","getWinningBid","bid","_bidder","constants","mapBid","_currency","_bidAmount","bidAmount","isNewWinningBid","now","Math","floor","endTime","queryFilter","filters","AuctionClosed","closedAuctions","closed","find","a","eq","winningBidder","parsedAuction","normalizedBuyoutAmount","normalizedMinBidAmount","fetchCurrencyMetadata","currencyMetadata","makeBid","ethers","decimals","normalizedBidAmount","isWinningBid","isWinnner","tokenPrice","closeFor","message","includes","AuctionHasNotEndedError","winningBid","closeForSeller","encode","closeForBuyer","multiCall","getBidBufferBps","currentBidBufferBps","currentBidOrReservePrice","minimumNextBid","add","div","auctionCreator","minimumBidCurrencyValue","buyoutCurrencyValue","bidderAddress","bidAmountCurrencyValue","auctions","OfferInputParamsSchema","totalPrice","MarketplaceV3Offers","FEATURE_OFFERS","totalOffers","rawOffers","getAllOffers","filteredOffers","offer","mapOffer","getAllValidOffers","offerId","getOffer","parsedOffer","getChainID","chainId","isNativeToken","NATIVE_TOKENS","wrapped","normalizedTotalPrice","expirationTimestamp","validateOffer","isStillValidOffer","offeror","offerorAddress","currencyValue","erc20","ContractWrapper","ERC20Abi","allowance","offers","MarketplaceV3","network","options","arguments","abi","_chainId","metadata","ContractMetadata","MarketplaceContractSchema","roles","ContractRoles","contractRoles","platformFees","ContractPlatformFee","assertEnabled","detectDirectListings","detectEnglishAuctions","detectOffers","updateSignerOrProvider","functionName","_len","Array","_key","call","detectContractFeature"],"sourceRoot":""}