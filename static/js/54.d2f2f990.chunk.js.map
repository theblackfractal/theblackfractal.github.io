{"version":3,"file":"static/js/54.d2f2f990.chunk.js","mappings":"yRAyFMA,G,okBAAa,0CA2FjB,WAAYC,EAASC,EAASC,GAAS,sBACrC,IAAIC,EAAUC,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,CAAC,EAC/EG,EAAMH,UAAUC,OAAS,EAAID,UAAU,QAAKE,EAC5CE,EAAUJ,UAAUC,OAAS,EAAID,UAAU,QAAKE,EAChDG,EAAkBL,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,IAAIM,EAAAA,GAAgBV,EAASC,EAASM,EAAKJ,GAkC7E,OAjCxD,cAAMM,EAAiBP,EAASM,IAChCG,EAAAA,EAAAA,IAAgB,UAAM,WAAO,IAC7BA,EAAAA,EAAAA,IAAgB,UAAM,cAAU,IAChCA,EAAAA,EAAAA,IAAgB,UAAM,aAAS,IAC/BA,EAAAA,EAAAA,IAAgB,UAAM,eAAW,IACjCA,EAAAA,EAAAA,IAAgB,UAAM,iBAAa,IACnCA,EAAAA,EAAAA,IAAgB,UAAM,gBAAY,IAClCA,EAAAA,EAAAA,IAAgB,UAAM,aAAS,IAC/BA,EAAAA,EAAAA,IAAgB,UAAM,oBAAgB,IACtCA,EAAAA,EAAAA,IAAgB,UAAM,cAAU,IAChCA,EAAAA,EAAAA,IAAgB,UAAM,aAAS,IAC/BA,EAAAA,EAAAA,IAAgB,UAAM,mBAAe,IACrCA,EAAAA,EAAAA,IAAgB,UAAM,iBAAa,IACnCA,EAAAA,EAAAA,IAAgB,UAAM,uBAAmB,IACzCA,EAAAA,EAAAA,IAAgB,UAAM,gBAAY,IAClCA,EAAAA,EAAAA,IAAgB,UAAM,iBAAa,IACnCA,EAAAA,EAAAA,IAAgB,UAAM,gBAAY,GAClC,EAAKJ,IAAMA,EACX,EAAKK,SAAW,IAAIC,EAAAA,GAAiB,EAAKJ,gBAAiBK,EAAAA,GAA0B,EAAKZ,SAC1F,EAAKa,MAAQ,IAAIC,EAAAA,GAAc,EAAKP,gBAAiBV,EAAckB,eACnE,EAAKC,UAAY,IAAIC,EAAAA,GAAgB,EAAKV,gBAAiB,EAAKG,UAChE,EAAKQ,MAAQ,IAAIC,EAAAA,GAAoB,EAAKZ,iBAC1C,EAAKa,QAAU,IAAIC,EAAAA,GAAgB,EAAKd,iBACxC,EAAKe,UAAY,IAAIC,EAAAA,GAAiB,EAAKhB,iBAC3C,EAAKiB,OAAS,IAAIC,EAAAA,GAAe,EAAKlB,iBACtC,EAAKmB,aAAe,IAAIC,EAAAA,GAAoB,EAAKpB,iBACjD,EAAKqB,YAAc,IAAIC,EAAAA,GAAoB,EAAKtB,iBAChD,EAAKuB,OAAS,IAAIC,EAAAA,GAAO,EAAKxB,gBAAiB,EAAKP,QAASM,GAC7D,EAAK0B,gBAAkB,IAAIC,EAAAA,GAAoB,EAAK1B,gBAAiB,EAAKG,SAAU,EAAKV,SACzF,EAAKkC,UAAY,IAAIC,EAAAA,GAAoC,EAAK5B,gBAAiB,EAAKP,SACpF,EAAKoC,SAAW,IAAIC,EAAAA,GAAc,EAAK9B,gBAAiB,EAAKP,QAASsC,EAAAA,GAAAA,MAA6B,kBAAM,EAAKR,OAAOS,mBAAmB,IACxI,EAAKL,UAAY,IAAIC,EAAAA,GAAoC,EAAK5B,gBAAiB,EAAKP,SACpF,EAAKwC,MAAQ,IAAIC,EAAAA,GAAc,EAAKlC,iBACpC,EAAKmC,SAAW,IAAIC,EAAAA,GAAc,EAAKpC,iBAAiB,CAC1D,CAkNC,OAhND,wCAGA,SAAiBT,GACf8C,KAAKrC,gBAAgBsC,uBAAuB/C,EAC9C,GAAC,wBACD,WACE,OAAO8C,KAAKrC,gBAAgBuC,aAAa/C,OAC3C,GAMA,kEAGA,2GACwB6C,KAAKG,qBAAoB,OAAlC,OAAPC,EAAU,EAAH,cACWJ,KAAKK,uBAAsB,OAApC,OAATC,EAAY,EAAH,uBACRF,EAAQG,IAAID,IAAU,gDAC9B,kDAPD,IASA,oEAcA,WAAoBE,GAAW,uFAGX,OAFZC,EAAQC,EAAAA,GAAAA,MAA0B,OAAXF,QAAW,IAAXA,OAAW,EAAXA,EAAaC,QAAS,GAAGE,WAChDC,EAAQF,EAAAA,GAAAA,MAA0B,OAAXF,QAAW,IAAXA,OAAW,EAAXA,EAAaI,QAASC,EAAAA,GAAyBF,WAAU,KACxEG,KAAI,SAAYd,KAAKG,qBAAoB,OAAjC,OAAiC,YAAEQ,WAAQ,KAAIF,EAAQG,EAAvEG,EAAQ,EAAH,GAAQC,IAAG,+BACTC,QAAQC,IAAIC,MAAMC,KAAKD,MAAMJ,GAAOM,QAAQC,KAAI,SAAAC,GAAC,OAAI,EAAKC,IAAID,EAAEE,WAAW,KAAE,0FAC3F,mDAnBD,IAqBA,sEAcA,WAAsBjB,GAAW,yFAGS,OAFlCC,EAAQC,EAAAA,GAAAA,MAA0B,OAAXF,QAAW,IAAXA,OAAW,EAAXA,EAAaC,QAAS,GAAGE,WAChDC,EAAQF,EAAAA,GAAAA,MAA0B,OAAXF,QAAW,IAAXA,OAAW,EAAXA,EAAaI,QAASC,EAAAA,GAAyBF,WAAU,KACjED,EAAAA,GAAS,KAAMI,KAAI,SAAYd,KAAKG,qBAAoB,OAC5C,OAD4C,YAAEQ,WAAQ,KAAIF,EAAK,UAAvDiB,IAAG,qBAAtCC,EAAe,EAAH,GAAaP,KAAI,qBACrBV,EAAAA,GAAS,KAAMI,KAAI,UAAYd,KAAKrC,gBAAgBuC,aAAaP,oBAAmB,QAAtE,OAAsE,YAAEgB,WAAQ,KAAIgB,EAAahB,WAAaC,EAAK,UAA7GI,IAAG,qBAA/BD,EAAQ,EAAH,GAAaK,KAAI,0BACfH,QAAQC,IAAIC,MAAMC,KAAKD,MAAMJ,EAAMa,IAAID,GAAchB,YAAYU,QAAQC,KAAI,SAAAC,GAAC,OAAI,EAAKrC,OAAO2C,iBAAiBF,EAAapB,IAAIgB,GAAGE,WAAW,KAAE,0FAC9J,mDApBD,IAsBA,yEAYA,4GACSzB,KAAKd,OAAOiB,sBAAoB,gDACxC,kDAdD,IAgBA,2EAYA,4GACSH,KAAKd,OAAOmB,wBAAsB,gDAC1C,kDAdD,IAgBA,2EAGA,yGACkCL,KAAKrC,gBAAgBuC,aAAa4B,SAAQC,EAAAA,EAAAA,IAAY,YAAaC,EAAAA,GAAsB,OAAlG,OAAjBC,EAAoB,EAAH,wBACfA,GAAiB,gDAC1B,kDAND,IAYA,kEA0BA,WAAkBC,EAAW7E,GAAO,+FAC3B2C,KAAKd,OAAOiD,SAASD,EAAW7E,IAAQ,gDAChD,qDA5BD,IA8BA,0EAOA,WAA0B+E,EAAoBC,EAAUhF,GAAO,+FACtD2C,KAAKd,OAAOoD,oBAAoBF,EAAoBC,EAAUhF,IAAQ,gDAC9E,uDATD,IAWA,8DAsBA,WAAc+E,EAAoBC,EAAUhF,GAAO,+FAC1C2C,KAAKd,OAAOqD,QAAQH,EAAoBC,EAAUhF,IAAQ,gDAClE,uDAxBD,IA0BA,4DAOA,WAAYgF,EAAUhF,GAAO,+FACpB2C,KAAKd,OAAOsD,MAAMH,EAAUhF,IAAQ,gDAC5C,qDATD,IAWA,2DAQA,WAAWoF,GAAO,+FACTzC,KAAKd,OAAOwD,KAAKD,IAAQ,gDACjC,mDAVD,IAYA,2DAGA,WAAWE,GAAY,8FACrB,IAASC,EAAO,EAAUrF,OAAQsF,EAAO,IAAI1B,MAAMyB,EAAO,EAAIA,EAAO,EAAI,GAAIE,EAAO,EAAGA,EAAOF,EAAME,IAClGD,EAAKC,EAAO,GAAK,EAAUA,GAC5B,0BACM,EAAA9C,KAAKrC,iBAAgBoF,KAAI,SAACJ,GAAY,OAAKE,KAAK,gDACxD,mDARD,MAQC,EApVgB,CAASG,EAAAA,MAsV5BnF,EAAAA,EAAAA,GAAgBZ,EAAe,gBAAiB,CAAC,QAAS,SAAU,Y","sources":["../node_modules/@thirdweb-dev/sdk/dist/signature-drop-2b7b28c3.esm.js"],"sourcesContent":["import { _ as _defineProperty, c as DEFAULT_QUERY_ALL_COUNT } from './QueryParams-da88d27c.esm.js';\nimport { aK as StandardErc721, cM as ContractWrapper, am as ContractMetadata, d3 as DropErc721ContractSchema, an as ContractRoles, ao as ContractRoyalty, ap as ContractPrimarySale, al as ContractEncoder, aW as GasCostEstimator, aX as ContractEvents, aZ as ContractPlatformFee, aY as ContractInterceptor, aB as Erc721, ar as DropClaimConditions, aE as Erc721WithQuantitySignatureMintable, aq as DelayedReveal, d4 as FEATURE_NFT_REVEALABLE, a$ as ContractOwner, cL as PaperCheckout, bC as getRoleHash } from './thirdweb-checkout-2c8d478b.esm.js';\nimport { BigNumber, constants } from 'ethers';\nimport 'bn.js';\nimport 'zod';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport 'tiny-invariant';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRouter.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport 'cross-fetch';\nimport '@thirdweb-dev/chains';\nimport 'eventemitter3';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/contracts-js/dist/abis/Router.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport 'merkletreejs';\nimport 'fast-deep-equal';\nimport 'uuid';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryRouter.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWFactory.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWRegistry.json';\nimport 'bs58';\n\n/**\n * Setup a collection of NFTs where when it comes to minting, you can authorize\n * some external party to mint tokens on your contract, and specify what exactly\n * will be minted by that external party..\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"signature-drop\");\n * ```\n *\n * @public\n */\nclass SignatureDrop extends StandardErc721 {\n  /**\n   * @internal\n   */\n\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalties.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim NFTs in the collection, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const claimCondition = {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxQuantity: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   * };\n   * await contract.claimConditions.set([claimCondition]);\n   * ```\n   */\n\n  /**\n   * Delayed reveal\n   * @remarks Create a batch of encrypted NFTs that can be revealed at a later time.\n   * @example\n   * ```javascript\n   * // the real NFTs, these will be encrypted until you reveal them\n   * const realNFTs = [{\n   *   name: \"Common NFT #1\",\n   *   description: \"Common NFT, one of many.\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }, {\n   *   name: \"Super Rare NFT #2\",\n   *   description: \"You got a Super Rare NFT!\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   * // A placeholder NFT that people will get immediately in their wallet, and will be converted to the real NFT at reveal time\n   * const placeholderNFT = {\n   *   name: \"Hidden NFT\",\n   *   description: \"Will be revealed next week!\"\n   * };\n   * // Create and encrypt the NFTs\n   * await contract.revealer.createDelayedRevealBatch(\n   *   placeholderNFT,\n   *   realNFTs,\n   *   \"my secret password\",\n   * );\n   * // Whenever you're ready, reveal your NFTs at any time\n   * const batchId = 0; // the batch to reveal\n   * await contract.revealer.reveal(batchId, \"my secret password\");\n   * ```\n   */\n\n  /**\n   * Signature Minting\n   * @remarks Generate dynamic NFTs with your own signature, and let others mint them using that signature.\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `contract.signature.generate()` documentation\n   * const signedPayload = contract.signature.generate(payload);\n   *\n   * // now anyone can mint the NFT\n   * const tx = contract.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * const mintedId = tx.id; // the id of the NFT minted\n   * ```\n   */\n\n  /**\n   * Checkout\n   * @remarks Create a FIAT currency checkout for your NFT drop.\n   */\n\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options);\n    super(contractWrapper, storage, chainId);\n    _defineProperty(this, \"abi\", void 0);\n    _defineProperty(this, \"erc721\", void 0);\n    _defineProperty(this, \"owner\", void 0);\n    _defineProperty(this, \"encoder\", void 0);\n    _defineProperty(this, \"estimator\", void 0);\n    _defineProperty(this, \"metadata\", void 0);\n    _defineProperty(this, \"sales\", void 0);\n    _defineProperty(this, \"platformFees\", void 0);\n    _defineProperty(this, \"events\", void 0);\n    _defineProperty(this, \"roles\", void 0);\n    _defineProperty(this, \"interceptor\", void 0);\n    _defineProperty(this, \"royalties\", void 0);\n    _defineProperty(this, \"claimConditions\", void 0);\n    _defineProperty(this, \"revealer\", void 0);\n    _defineProperty(this, \"signature\", void 0);\n    _defineProperty(this, \"checkout\", void 0);\n    this.abi = abi;\n    this.metadata = new ContractMetadata(this.contractWrapper, DropErc721ContractSchema, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, SignatureDrop.contractRoles);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.sales = new ContractPrimarySale(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.erc721 = new Erc721(this.contractWrapper, this.storage, chainId);\n    this.claimConditions = new DropClaimConditions(this.contractWrapper, this.metadata, this.storage);\n    this.signature = new Erc721WithQuantitySignatureMintable(this.contractWrapper, this.storage);\n    this.revealer = new DelayedReveal(this.contractWrapper, this.storage, FEATURE_NFT_REVEALABLE.name, () => this.erc721.nextTokenIdToMint());\n    this.signature = new Erc721WithQuantitySignatureMintable(this.contractWrapper, this.storage);\n    this.owner = new ContractOwner(this.contractWrapper);\n    this.checkout = new PaperCheckout(this.contractWrapper);\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the total count NFTs in this drop contract, both claimed and unclaimed\n   */\n  async totalSupply() {\n    const claimed = await this.totalClaimedSupply();\n    const unclaimed = await this.totalUnclaimedSupply();\n    return claimed.add(unclaimed);\n  }\n\n  /**\n   * Get All Claimed NFTs\n   *\n   * @remarks Fetch all the NFTs (and their owners) that have been claimed in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const claimedNFTs = await contract.getAllClaimed();\n   * const firstOwner = claimedNFTs[0].owner;\n   * ```\n   *\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata and their ownersfor all NFTs queried.\n   */\n  async getAllClaimed(queryParams) {\n    const start = BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = BigNumber.from(queryParams?.count || DEFAULT_QUERY_ALL_COUNT).toNumber();\n    const maxId = Math.min((await this.totalClaimedSupply()).toNumber(), start + count);\n    return await Promise.all(Array.from(Array(maxId).keys()).map(i => this.get(i.toString())));\n  }\n\n  /**\n   * Get All Unclaimed NFTs\n   *\n   * @remarks Fetch all the NFTs that have been not been claimed yet in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const unclaimedNFTs = await contract.getAllUnclaimed();\n   * const firstUnclaimedNFT = unclaimedNFTs[0].name;\n   * ```\n   *\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  async getAllUnclaimed(queryParams) {\n    const start = BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = BigNumber.from(queryParams?.count || DEFAULT_QUERY_ALL_COUNT).toNumber();\n    const firstTokenId = BigNumber.from(Math.max((await this.totalClaimedSupply()).toNumber(), start));\n    const maxId = BigNumber.from(Math.min((await this.contractWrapper.readContract.nextTokenIdToMint()).toNumber(), firstTokenId.toNumber() + count));\n    return await Promise.all(Array.from(Array(maxId.sub(firstTokenId).toNumber()).keys()).map(i => this.erc721.getTokenMetadata(firstTokenId.add(i).toString())));\n  }\n\n  /**\n   * Get the claimed supply\n   *\n   * @remarks Get the number of claimed NFTs in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const claimedNFTCount = await contract.totalClaimedSupply();\n   * console.log(`NFTs claimed so far: ${claimedNFTCount}`);\n   * ```\n   * @returns the claimed supply\n   */\n  async totalClaimedSupply() {\n    return this.erc721.totalClaimedSupply();\n  }\n\n  /**\n   * Get the unclaimed supply\n   *\n   * @remarks Get the number of unclaimed NFTs in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const unclaimedNFTCount = await contract.totalUnclaimedSupply();\n   * console.log(`NFTs left to claim: ${unclaimedNFTCount}`);\n   * ```\n   * @returns the unclaimed supply\n   */\n  async totalUnclaimedSupply() {\n    return this.erc721.totalUnclaimedSupply();\n  }\n\n  /**\n   * Get whether users can transfer NFTs from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(getRoleHash(\"transfer\"), constants.AddressZero);\n    return !anyoneCanTransfer;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create a batch of unique NFTs to be claimed in the future\n   *\n   * @remarks Create batch allows you to create a batch of many unique NFTs in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata of the NFTs to create\n   * const metadatas = [{\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   *\n   * const results = await contract.createBatch(metadatas); // uploads and creates the NFTs on chain\n   * const firstTokenId = results[0].id; // token id of the first created NFT\n   * const firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT\n   * ```\n   *\n   * @param metadatas - The metadata to include in the batch.\n   * @param options - optional upload progress callback\n   */\n  async createBatch(metadatas, options) {\n    return this.erc721.lazyMint(metadatas, options);\n  }\n\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress\n   * @param quantity\n   * @param checkERC20Allowance\n   */\n  async getClaimTransaction(destinationAddress, quantity, options) {\n    return this.erc721.getClaimTransaction(destinationAddress, quantity, options);\n  }\n\n  /**\n   * Claim unique NFTs to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const quantity = 1; // how many unique NFTs you want to claim\n   *\n   * const tx = await contract.claimTo(address, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const claimedTokenId = tx.id; // the id of the NFT claimed\n   * const claimedNFT = await tx.data(); // (optional) get the claimed NFT metadata\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   *\n   * @returns - an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\n   */\n  async claimTo(destinationAddress, quantity, options) {\n    return this.erc721.claimTo(destinationAddress, quantity, options);\n  }\n\n  /**\n   * Claim NFTs to the connected wallet.\n   *\n   * @remarks See {@link NFTDrop.claimTo}\n   *\n   * @returns - an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\n   */\n  async claim(quantity, options) {\n    return this.erc721.claim(quantity, options);\n  }\n\n  /**\n   * Burn a single NFT\n   * @param tokenId - the token Id to burn\n   * @example\n   * ```javascript\n   * const result = await contract.burnToken(tokenId);\n   * ```\n   */\n  async burn(tokenId) {\n    return this.erc721.burn(tokenId);\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return this.contractWrapper.call(functionName, ...args);\n  }\n}\n_defineProperty(SignatureDrop, \"contractRoles\", [\"admin\", \"minter\", \"transfer\"]);\n\nexport { SignatureDrop };\n"],"names":["SignatureDrop","network","address","storage","options","arguments","length","undefined","abi","chainId","contractWrapper","ContractWrapper","_defineProperty","metadata","ContractMetadata","DropErc721ContractSchema","roles","ContractRoles","contractRoles","royalties","ContractRoyalty","sales","ContractPrimarySale","encoder","ContractEncoder","estimator","GasCostEstimator","events","ContractEvents","platformFees","ContractPlatformFee","interceptor","ContractInterceptor","erc721","Erc721","claimConditions","DropClaimConditions","signature","Erc721WithQuantitySignatureMintable","revealer","DelayedReveal","FEATURE_NFT_REVEALABLE","nextTokenIdToMint","owner","ContractOwner","checkout","PaperCheckout","this","updateSignerOrProvider","readContract","totalClaimedSupply","claimed","totalUnclaimedSupply","unclaimed","add","queryParams","start","BigNumber","toNumber","count","DEFAULT_QUERY_ALL_COUNT","Math","maxId","min","Promise","all","Array","from","keys","map","i","get","toString","max","firstTokenId","sub","getTokenMetadata","hasRole","getRoleHash","constants","anyoneCanTransfer","metadatas","lazyMint","destinationAddress","quantity","getClaimTransaction","claimTo","claim","tokenId","burn","functionName","_len","args","_key","call","StandardErc721"],"sourceRoot":""}