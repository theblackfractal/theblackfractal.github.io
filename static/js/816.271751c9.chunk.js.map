{"version":3,"file":"static/js/816.271751c9.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/sdk/dist/split-ed1e9c7e.esm.js"],"sourcesContent":["import { _ as _defineProperty } from './QueryParams-da88d27c.esm.js';\nimport { cM as ContractWrapper, am as ContractMetadata, d7 as SplitsContractSchema, an as ContractRoles, al as ContractEncoder, aW as GasCostEstimator, aX as ContractEvents, aY as ContractInterceptor, b8 as fetchCurrencyValue } from './thirdweb-checkout-2c8d478b.esm.js';\nimport ERC20Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport { BigNumber, Contract } from 'ethers';\nimport 'bn.js';\nimport 'zod';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport 'tiny-invariant';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRouter.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport 'cross-fetch';\nimport '@thirdweb-dev/chains';\nimport 'eventemitter3';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/contracts-js/dist/abis/Router.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport 'merkletreejs';\nimport 'fast-deep-equal';\nimport 'uuid';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryRouter.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWFactory.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWRegistry.json';\nimport 'bs58';\n\n/**\n * Create custom royalty splits to distribute funds.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"split\");\n * ```\n *\n * @public\n */\nclass Split {\n  /**\n   * @internal\n   */\n\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options);\n    _defineProperty(this, \"contractWrapper\", void 0);\n    _defineProperty(this, \"storage\", void 0);\n    _defineProperty(this, \"abi\", void 0);\n    _defineProperty(this, \"metadata\", void 0);\n    _defineProperty(this, \"encoder\", void 0);\n    _defineProperty(this, \"estimator\", void 0);\n    _defineProperty(this, \"events\", void 0);\n    _defineProperty(this, \"roles\", void 0);\n    _defineProperty(this, \"interceptor\", void 0);\n    _defineProperty(this, \"_chainId\", void 0);\n    this._chainId = chainId;\n    this.abi = abi;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.metadata = new ContractMetadata(this.contractWrapper, SplitsContractSchema, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, Split.contractRoles);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n  }\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get Recipients of this splits contract\n   *\n   * @remarks Get the data about the shares of every split recipient on the contract\n   *\n   * @example\n   * ```javascript\n   * const recipients = await contract.getAllRecipients();\n   * console.log(recipients);\n   * ```\n   */\n  async getAllRecipients() {\n    const recipients = [];\n    let index = BigNumber.from(0);\n    const totalRecipients = await this.contractWrapper.readContract.payeeCount();\n    while (index.lt(totalRecipients)) {\n      try {\n        const recipientAddress = await this.contractWrapper.readContract.payee(index);\n        recipients.push(await this.getRecipientSplitPercentage(recipientAddress));\n        index = index.add(1);\n      } catch (err) {\n        // The only way we know how to detect that we've found all recipients\n        // is if we get an error when trying to get the next recipient.\n        if (\"method\" in err && err[\"method\"].toLowerCase().includes(\"payee(uint256)\")) {\n          break;\n        } else {\n          throw err;\n        }\n      }\n    }\n    return recipients;\n  }\n\n  /**\n   * Returns all the recipients and their balances in the native currency.\n   *\n   * @returns A map of recipient addresses to their balances in the native currency.\n   */\n  async balanceOfAllRecipients() {\n    const recipients = await this.getAllRecipients();\n    const balances = {};\n    for (const recipient of recipients) {\n      balances[recipient.address] = await this.balanceOf(recipient.address);\n    }\n    return balances;\n  }\n\n  /**\n   * Returns all the recipients and their balances in a non-native currency.\n   *\n   * @param tokenAddress - The address of the currency to check the balances in.\n   * @returns A map of recipient addresses to their balances in the specified currency.\n   */\n  async balanceOfTokenAllRecipients(tokenAddress) {\n    const recipients = await this.getAllRecipients();\n    const balances = {};\n    for (const recipient of recipients) {\n      balances[recipient.address] = await this.balanceOfToken(recipient.address, tokenAddress);\n    }\n    return balances;\n  }\n\n  /**\n   * Get Funds owed to a particular wallet\n   *\n   * @remarks Get the amount of funds in the native currency held by the contract that is owed to a specific recipient.\n   *\n   * @example\n   * ```javascript\n   * // The address to check the funds of\n   * const address = \"{{wallet_address}}\";\n   * const funds = await contract.balanceOf(address);\n   * console.log(funds);\n   * ```\n   */\n  async balanceOf(address) {\n    const walletBalance = await this.contractWrapper.readContract.provider.getBalance(this.getAddress());\n    const totalReleased = await this.contractWrapper.readContract[\"totalReleased()\"]();\n    const totalReceived = walletBalance.add(totalReleased);\n    return this._pendingPayment(address, totalReceived, await this.contractWrapper.readContract[\"released(address)\"](address));\n  }\n\n  /**\n   * Get non-native Token Funds owed to a particular wallet\n   *\n   * @remarks Get the amount of funds in the non-native tokens held by the contract that is owed to a specific recipient.\n   *\n   * @example\n   * ```javascript\n   * // The address to check the funds of\n   * const address = \"{{wallet_address}}\";\n   * // The address of the currency to check the contracts funds of\n   * const tokenAddress = \"0x...\"\n   * const funds = await contract.balanceOfToken(address, tokenAddress);\n   * console.log(funds);\n   * ```\n   */\n  async balanceOfToken(walletAddress, tokenAddress) {\n    const erc20 = new Contract(tokenAddress, ERC20Abi, this.contractWrapper.getProvider());\n    const walletBalance = await erc20.balanceOf(this.getAddress());\n    const totalReleased = await this.contractWrapper.readContract[\"totalReleased(address)\"](tokenAddress);\n    const totalReceived = walletBalance.add(totalReleased);\n    const value = await this._pendingPayment(walletAddress, totalReceived, await this.contractWrapper.readContract[\"released(address,address)\"](tokenAddress, walletAddress));\n    return await fetchCurrencyValue(this.contractWrapper.getProvider(), tokenAddress, value);\n  }\n\n  /**\n   * Get the % of funds owed to a given address\n   * @param address - the address to check percentage of\n   */\n  async getRecipientSplitPercentage(address) {\n    const [totalShares, walletsShares] = await Promise.all([this.contractWrapper.readContract.totalShares(), this.contractWrapper.readContract.shares(address)]);\n    // We convert to basis points to avoid floating point loss of precision\n    return {\n      address,\n      splitPercentage: walletsShares.mul(BigNumber.from(1e7)).div(totalShares).toNumber() / 1e5\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Withdraw Funds\n   * @remarks Triggers a transfer to account of the amount of native currency they are owed.\n   *\n   * @example\n   * ```javascript\n   * // the wallet address that wants to withdraw their funds\n   * const walletAddress = \"{{wallet_address}}\"\n   * await contract.withdraw(walletAddress);\n   * ```\n   *\n   * @param walletAddress - The address to distributes the amount to\n   */\n  async withdraw(walletAddress) {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"release(address)\", [walletAddress])\n    };\n  }\n\n  /**\n   * Triggers a transfer to account of the amount of a given currency they are owed.\n   *\n   * @param walletAddress - The address to distributes the amount to\n   * @param tokenAddress - The address of the currency contract to distribute funds\n   */\n  async withdrawToken(walletAddress, tokenAddress) {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"release(address,address)\", [tokenAddress, walletAddress])\n    };\n  }\n\n  /**\n   * Distribute Funds\n   *\n   * @remarks Distribute funds held by the contract in the native currency to all recipients.\n   *\n   * @example\n   * ```javascript\n   * await contract.distribute();\n   * ```\n   */\n  async distribute() {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"distribute()\", [])\n    };\n  }\n\n  /**\n   * Distribute Funds\n   *\n   * @remarks Distribute funds held by the contract in the native currency to all recipients.\n   *\n   * @example\n   * ```javascript\n   * // The address of the currency to distribute funds\n   * const tokenAddress = \"0x...\"\n   * await contract.distributeToken(tokenAddress);\n   * ```\n   *\n   * @param tokenAddress - The address of the currency contract to distribute funds\n   */\n  async distributeToken(tokenAddress) {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"distribute(address)\", [tokenAddress])\n    };\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  async _pendingPayment(address, totalReceived, alreadyReleased) {\n    const addressReceived = totalReceived.mul(await this.contractWrapper.readContract.shares(address));\n    const totalRoyaltyAvailable = addressReceived.div(await this.contractWrapper.readContract.totalShares());\n    return totalRoyaltyAvailable.sub(alreadyReleased);\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return this.contractWrapper.call(functionName, ...args);\n  }\n}\n_defineProperty(Split, \"contractRoles\", [\"admin\"]);\n\nexport { Split };\n"],"names":["Split","network","address","storage","options","arguments","length","undefined","abi","chainId","contractWrapper","ContractWrapper","_defineProperty","this","_chainId","metadata","ContractMetadata","SplitsContractSchema","roles","ContractRoles","contractRoles","encoder","ContractEncoder","estimator","GasCostEstimator","events","ContractEvents","interceptor","ContractInterceptor","updateSignerOrProvider","readContract","recipients","index","BigNumber","payeeCount","totalRecipients","lt","payee","recipientAddress","getRecipientSplitPercentage","push","add","toLowerCase","includes","getAllRecipients","balances","recipient","balanceOf","tokenAddress","balanceOfToken","provider","getBalance","getAddress","walletBalance","totalReleased","totalReceived","_pendingPayment","walletAddress","erc20","Contract","ERC20Abi","getProvider","value","fetchCurrencyValue","Promise","all","totalShares","shares","walletsShares","splitPercentage","mul","div","toNumber","sendTransaction","receipt","alreadyReleased","addressReceived","totalRoyaltyAvailable","sub","functionName","_len","args","Array","_key","call"],"sourceRoot":""}