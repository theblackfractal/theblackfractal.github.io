{"version":3,"file":"static/js/728.3ff3959b.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/sdk/dist/multiwrap-48e23977.esm.js"],"sourcesContent":["import { _ as _defineProperty } from './QueryParams-da88d27c.esm.js';\nimport { aK as StandardErc721, cM as ContractWrapper, am as ContractMetadata, c$ as MultiwrapContractSchema, an as ContractRoles, al as ContractEncoder, aW as GasCostEstimator, aX as ContractEvents, ao as ContractRoyalty, a$ as ContractOwner, b9 as fetchCurrencyMetadata, d0 as uploadOrExtractURI, ba as normalizePriceValue, d1 as hasERC20Allowance, cY as isTokenApprovedForTransfer } from './thirdweb-checkout-2c8d478b.esm.js';\nimport { ethers } from 'ethers';\nimport 'bn.js';\nimport 'zod';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport 'tiny-invariant';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRouter.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport 'cross-fetch';\nimport '@thirdweb-dev/chains';\nimport 'eventemitter3';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/contracts-js/dist/abis/Router.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport 'merkletreejs';\nimport 'fast-deep-equal';\nimport 'uuid';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryRouter.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWFactory.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWRegistry.json';\nimport 'bs58';\n\n/**\n * Multiwrap lets you wrap any number of ERC20, ERC721 and ERC1155 tokens you own into a single wrapped token bundle.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"multiwrap\");\n * ```\n *\n * @beta\n */\nclass Multiwrap extends StandardErc721 {\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalties.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options);\n    super(contractWrapper, storage, chainId);\n    _defineProperty(this, \"abi\", void 0);\n    _defineProperty(this, \"encoder\", void 0);\n    _defineProperty(this, \"estimator\", void 0);\n    _defineProperty(this, \"metadata\", void 0);\n    _defineProperty(this, \"events\", void 0);\n    _defineProperty(this, \"roles\", void 0);\n    _defineProperty(this, \"royalties\", void 0);\n    _defineProperty(this, \"owner\", void 0);\n    this.abi = abi;\n    this.metadata = new ContractMetadata(this.contractWrapper, MultiwrapContractSchema, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, Multiwrap.contractRoles);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.owner = new ContractOwner(this.contractWrapper);\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the contents of a wrapped token bundle\n   * @example\n   * ```javascript\n   * const contents = await contract.getWrappedContents(wrappedTokenId);\n   * console.log(contents.erc20Tokens);\n   * console.log(contents.erc721Tokens);\n   * console.log(contents.erc1155Tokens);\n   * ```\n   * @param wrappedTokenId - the id of the wrapped token bundle\n   */\n  async getWrappedContents(wrappedTokenId) {\n    const wrappedTokens = await this.contractWrapper.readContract.getWrappedContents(wrappedTokenId);\n    const erc20Tokens = [];\n    const erc721Tokens = [];\n    const erc1155Tokens = [];\n    for (const token of wrappedTokens) {\n      switch (token.tokenType) {\n        case 0:\n          {\n            const tokenMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), token.assetContract);\n            erc20Tokens.push({\n              contractAddress: token.assetContract,\n              quantity: ethers.utils.formatUnits(token.totalAmount, tokenMetadata.decimals)\n            });\n            break;\n          }\n        case 1:\n          {\n            erc721Tokens.push({\n              contractAddress: token.assetContract,\n              tokenId: token.tokenId\n            });\n            break;\n          }\n        case 2:\n          {\n            erc1155Tokens.push({\n              contractAddress: token.assetContract,\n              tokenId: token.tokenId,\n              quantity: token.totalAmount.toString()\n            });\n            break;\n          }\n      }\n    }\n    return {\n      erc20Tokens,\n      erc721Tokens,\n      erc1155Tokens\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Wrap any number of ERC20/ERC721/ERC1155 tokens into a single wrapped token\n   * @example\n   * ```javascript\n   * const tx = await contract.wrap({\n   *   erc20Tokens: [{\n   *     contractAddress: \"0x...\",\n   *     quantity: \"0.8\"\n   *   }],\n   *   erc721Tokens: [{\n   *     contractAddress: \"0x...\",\n   *     tokenId: \"0\"\n   *   }],\n   *   erc1155Tokens: [{\n   *     contractAddress: \"0x...\",\n   *     tokenId: \"1\",\n   *     quantity: \"2\"\n   *   }]\n   * }, {\n   *     name: \"Wrapped bundle\",\n   *     description: \"This is a wrapped bundle of tokens and NFTs\",\n   *     image: \"ipfs://...\",\n   * });\n   * const receipt = tx.receipt(); // the transaction receipt\n   * const wrappedTokenId = tx.id; // the id of the wrapped token bundle\n   * ```\n   * @param contents - the contents to wrap\n   * @param wrappedTokenMetadata - metadata to represent the wrapped token bundle\n   * @param recipientAddress - Optional. The address to send the wrapped token bundle to\n   */\n  async wrap(contents, wrappedTokenMetadata, recipientAddress) {\n    const uri = await uploadOrExtractURI(wrappedTokenMetadata, this.storage);\n    const recipient = recipientAddress ? recipientAddress : await this.contractWrapper.getSignerAddress();\n    const tokens = await this.toTokenStructList(contents);\n    const receipt = await this.contractWrapper.sendTransaction(\"wrap\", [tokens, uri, recipient]);\n    const event = this.contractWrapper.parseLogs(\"TokensWrapped\", receipt?.logs);\n    if (event.length === 0) {\n      throw new Error(\"TokensWrapped event not found\");\n    }\n    const tokenId = event[0].args.tokenIdOfWrappedToken;\n    return {\n      id: tokenId,\n      receipt,\n      data: () => this.get(tokenId)\n    };\n  }\n\n  /**\n   * Unwrap a wrapped token bundle, and retrieve its contents\n   * @example\n   * ```javascript\n   * await contract.unwrap(wrappedTokenId);\n   * ```\n   * @param wrappedTokenId - the id of the wrapped token bundle\n   * @param recipientAddress - Optional. The address to send the unwrapped tokens to\n   */\n  async unwrap(wrappedTokenId, recipientAddress) {\n    const recipient = recipientAddress ? recipientAddress : await this.contractWrapper.getSignerAddress();\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"unwrap\", [wrappedTokenId, recipient])\n    };\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  async toTokenStructList(contents) {\n    const tokens = [];\n    const provider = this.contractWrapper.getProvider();\n    const owner = await this.contractWrapper.getSignerAddress();\n    if (contents.erc20Tokens) {\n      for (const erc20 of contents.erc20Tokens) {\n        const normalizedQuantity = await normalizePriceValue(provider, erc20.quantity, erc20.contractAddress);\n        const hasAllowance = await hasERC20Allowance(this.contractWrapper, erc20.contractAddress, normalizedQuantity);\n        if (!hasAllowance) {\n          throw new Error(`ERC20 token with contract address \"${erc20.contractAddress}\" does not have enough allowance to transfer.\\n\\nYou can set allowance to the multiwrap contract to transfer these tokens by running:\\n\\nawait sdk.getToken(\"${erc20.contractAddress}\").setAllowance(\"${this.getAddress()}\", ${erc20.quantity});\\n\\n`);\n        }\n        tokens.push({\n          assetContract: erc20.contractAddress,\n          totalAmount: normalizedQuantity,\n          tokenId: 0,\n          tokenType: 0\n        });\n      }\n    }\n    if (contents.erc721Tokens) {\n      for (const erc721 of contents.erc721Tokens) {\n        const isApproved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), erc721.contractAddress, erc721.tokenId, owner);\n        if (!isApproved) {\n          throw new Error(`ERC721 token \"${erc721.tokenId}\" with contract address \"${erc721.contractAddress}\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getNFTCollection(\"${erc721.contractAddress}\").setApprovalForToken(\"${this.getAddress()}\", ${erc721.tokenId});\\n\\n`);\n        }\n        tokens.push({\n          assetContract: erc721.contractAddress,\n          totalAmount: 0,\n          tokenId: erc721.tokenId,\n          tokenType: 1\n        });\n      }\n    }\n    if (contents.erc1155Tokens) {\n      for (const erc1155 of contents.erc1155Tokens) {\n        const isApproved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), erc1155.contractAddress, erc1155.tokenId, owner);\n        if (!isApproved) {\n          throw new Error(`ERC1155 token \"${erc1155.tokenId}\" with contract address \"${erc1155.contractAddress}\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getEdition(\"${erc1155.contractAddress}\").setApprovalForAll(\"${this.getAddress()}\", true);\\n\\n`);\n        }\n        tokens.push({\n          assetContract: erc1155.contractAddress,\n          totalAmount: erc1155.quantity,\n          tokenId: erc1155.tokenId,\n          tokenType: 2\n        });\n      }\n    }\n    return tokens;\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return this.contractWrapper.call(functionName, ...args);\n  }\n}\n_defineProperty(Multiwrap, \"contractRoles\", [\"admin\", \"transfer\", \"minter\", \"unwrap\", \"asset\"]);\n\nexport { Multiwrap };\n"],"names":["Multiwrap","network","address","storage","options","arguments","length","undefined","abi","chainId","contractWrapper","ContractWrapper","_defineProperty","metadata","ContractMetadata","MultiwrapContractSchema","roles","ContractRoles","contractRoles","encoder","ContractEncoder","estimator","GasCostEstimator","events","ContractEvents","royalties","ContractRoyalty","owner","ContractOwner","wrappedTokenId","this","readContract","getWrappedContents","wrappedTokens","erc20Tokens","erc721Tokens","erc1155Tokens","token","tokenType","fetchCurrencyMetadata","getProvider","assetContract","tokenMetadata","push","contractAddress","quantity","ethers","totalAmount","decimals","tokenId","toString","contents","wrappedTokenMetadata","recipientAddress","uploadOrExtractURI","uri","getSignerAddress","recipient","toTokenStructList","tokens","sendTransaction","receipt","event","parseLogs","logs","Error","args","tokenIdOfWrappedToken","id","data","get","provider","erc20","normalizePriceValue","normalizedQuantity","hasERC20Allowance","getAddress","erc721","isTokenApprovedForTransfer","erc1155","functionName","_len","Array","_key","call","StandardErc721"],"sourceRoot":""}