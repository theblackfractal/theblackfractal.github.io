{"version":3,"file":"static/js/76471.a93fb127.chunk.js","mappings":"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","sources":["../node_modules/thirdweb/src/extensions/erc20/__generated__/IERC20/read/decimals.ts","../node_modules/thirdweb/src/extensions/erc20/read/decimals.ts","../node_modules/thirdweb/src/extensions/common/__generated__/IContractMetadata/read/name.ts","../node_modules/thirdweb/src/extensions/common/read/name.ts","../node_modules/thirdweb/src/extensions/common/__generated__/IContractMetadata/read/symbol.ts","../node_modules/thirdweb/src/extensions/common/read/symbol.ts","../node_modules/thirdweb/src/extensions/erc20/read/getCurrencyMetadata.ts","../node_modules/thirdweb/src/pay/buyWithFiat/isSwapRequiredPostOnramp.ts","../node_modules/thirdweb/src/react/core/hooks/pay/useBuyWithFiatQuote.ts","../node_modules/thirdweb/src/pay/buyWithFiat/getQuote.ts","../node_modules/thirdweb/src/react/web/ui/components/Drawer.tsx","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/DirectPaymentModeScreen.tsx","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/EstimatedTimeAndFees.tsx","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/PayWIthCreditCard.tsx","../node_modules/thirdweb/src/chains/chain-definitions/base-sepolia.ts","../node_modules/thirdweb/src/chains/chain-definitions/base.ts","../node_modules/thirdweb/src/chains/chain-definitions/optimism-sepolia.ts","../node_modules/thirdweb/src/chains/chain-definitions/optimism.ts","../node_modules/thirdweb/src/chains/chain-definitions/zora-sepolia.ts","../node_modules/thirdweb/src/chains/chain-definitions/zora.ts","../node_modules/thirdweb/src/chains/constants.ts","../node_modules/thirdweb/src/transaction/actions/estimate-gas-cost.ts","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/main/useBuyTxStates.ts","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/TransactionModeScreen.tsx","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/WalletSelectorButton.tsx","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/fiat/CurrencySelection.tsx","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/openOnRamppopup.tsx","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/fiat/FiatStatusScreen.tsx","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/fiat/FiatFlow.tsx","../node_modules/thirdweb/src/chains/chain-definitions/polygon.ts","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/swap/BuyTokenInput.tsx","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/utils.ts","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/icons/GenericWalletIcon.tsx","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/swap/PayWithCrypto.tsx","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/swap/TransferFlow.tsx","../node_modules/thirdweb/src/transaction/actions/send-and-confirm-transaction.ts","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/swap/WalletSwitcherDrawerContent.tsx","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/BuyScreen.tsx","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/usePayerSetup.tsx","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/main/useUISelectionStates.ts","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/main/useEnabledPaymentMethods.ts","../node_modules/thirdweb/src/react/core/hooks/pay/useBuyWithCryptoQuote.ts"],"sourcesContent":["import { readContract } from \"../../../../../transaction/read-contract.js\";\nimport type { BaseTransactionOptions } from \"../../../../../transaction/types.js\";\n\nimport { decodeAbiParameters } from \"viem\";\nimport type { Hex } from \"../../../../../utils/encoding/hex.js\";\nimport type { ThirdwebContract } from \"../../../../../contract/contract.js\";\nimport { detectMethod } from \"../../../../../utils/bytecode/detectExtension.js\";\n\nexport const FN_SELECTOR = \"0x313ce567\" as const;\nconst FN_INPUTS = [] as const;\nconst FN_OUTPUTS = [\n  {\n    type: \"uint8\",\n  },\n] as const;\n\n/**\n * Checks if the `decimals` method is supported by the given contract.\n * @param contract The ThirdwebContract.\n * @returns A promise that resolves to a boolean indicating if the `decimals` method is supported.\n * @extension ERC20\n * @example\n * ```ts\n * import { isDecimalsSupported } from \"thirdweb/extensions/erc20\";\n *\n * const supported = await isDecimalsSupported(contract);\n * ```\n */\nexport async function isDecimalsSupported(contract: ThirdwebContract<any>) {\n  return detectMethod({\n    contract,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS] as const,\n  });\n}\n\n/**\n * Decodes the result of the decimals function call.\n * @param result - The hexadecimal result to decode.\n * @returns The decoded result as per the FN_OUTPUTS definition.\n * @extension ERC20\n * @example\n * ```ts\n * import { decodeDecimalsResult } from \"thirdweb/extensions/erc20\";\n * const result = decodeDecimalsResult(\"...\");\n * ```\n */\nexport function decodeDecimalsResult(result: Hex) {\n  return decodeAbiParameters(FN_OUTPUTS, result)[0];\n}\n\n/**\n * Calls the \"decimals\" function on the contract.\n * @param options - The options for the decimals function.\n * @returns The parsed result of the function call.\n * @extension ERC20\n * @example\n * ```ts\n * import { decimals } from \"thirdweb/extensions/erc20\";\n *\n * const result = await decimals({\n *  contract,\n * });\n *\n * ```\n */\nexport async function decimals(options: BaseTransactionOptions) {\n  return readContract({\n    contract: options.contract,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS] as const,\n    params: [],\n  });\n}\n","import type { BaseTransactionOptions } from \"../../../transaction/types.js\";\nimport { withCache } from \"../../../utils/promise/withCache.js\";\nimport { decimals as generatedDecimals } from \"../__generated__/IERC20/read/decimals.js\";\n\n/**\n * Retrieves the number of decimal places for a given ERC20 contract.\n * @param options - The options for the transaction.\n * @returns A promise that resolves to the number of decimal places.\n * @extension ERC20\n * @example\n * ```ts\n * import { decimals } from \"thirdweb/extensions/erc20\";\n *\n * const tokenDecimals = await decimals({ contract });\n * ```\n */\nexport async function decimals(\n  options: BaseTransactionOptions,\n): Promise<number> {\n  return withCache(() => generatedDecimals(options), {\n    cacheKey: `${options.contract.chain.id}:${options.contract.address}:decimals`,\n    // can never change, so cache forever\n    cacheTime: Number.POSITIVE_INFINITY,\n  });\n}\n","import { readContract } from \"../../../../../transaction/read-contract.js\";\nimport type { BaseTransactionOptions } from \"../../../../../transaction/types.js\";\n\nimport { decodeAbiParameters } from \"viem\";\nimport type { Hex } from \"../../../../../utils/encoding/hex.js\";\nimport type { ThirdwebContract } from \"../../../../../contract/contract.js\";\nimport { detectMethod } from \"../../../../../utils/bytecode/detectExtension.js\";\n\nexport const FN_SELECTOR = \"0x06fdde03\" as const;\nconst FN_INPUTS = [] as const;\nconst FN_OUTPUTS = [\n  {\n    type: \"string\",\n  },\n] as const;\n\n/**\n * Checks if the `name` method is supported by the given contract.\n * @param contract The ThirdwebContract.\n * @returns A promise that resolves to a boolean indicating if the `name` method is supported.\n * @extension COMMON\n * @example\n * ```ts\n * import { isNameSupported } from \"thirdweb/extensions/common\";\n *\n * const supported = await isNameSupported(contract);\n * ```\n */\nexport async function isNameSupported(contract: ThirdwebContract<any>) {\n  return detectMethod({\n    contract,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS] as const,\n  });\n}\n\n/**\n * Decodes the result of the name function call.\n * @param result - The hexadecimal result to decode.\n * @returns The decoded result as per the FN_OUTPUTS definition.\n * @extension COMMON\n * @example\n * ```ts\n * import { decodeNameResult } from \"thirdweb/extensions/common\";\n * const result = decodeNameResult(\"...\");\n * ```\n */\nexport function decodeNameResult(result: Hex) {\n  return decodeAbiParameters(FN_OUTPUTS, result)[0];\n}\n\n/**\n * Calls the \"name\" function on the contract.\n * @param options - The options for the name function.\n * @returns The parsed result of the function call.\n * @extension COMMON\n * @example\n * ```ts\n * import { name } from \"thirdweb/extensions/common\";\n *\n * const result = await name({\n *  contract,\n * });\n *\n * ```\n */\nexport async function name(options: BaseTransactionOptions) {\n  return readContract({\n    contract: options.contract,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS] as const,\n    params: [],\n  });\n}\n","import type { BaseTransactionOptions } from \"../../../transaction/types.js\";\nimport { withCache } from \"../../../utils/promise/withCache.js\";\nimport { name as generatedName } from \"../__generated__/IContractMetadata/read/name.js\";\n\n/**\n * Retrieves the name associated with the given contract.\n * @param options - The options for the transaction.\n * @returns A promise that resolves to the name associated with the contract.\n * @extension COMMON\n * @example\n * ```ts\n * import { name } from \"thirdweb/extensions/common\";\n *\n * const contractName = await name({ contract });\n * ```\n */\nexport async function name(options: BaseTransactionOptions): Promise<string> {\n  return withCache(() => generatedName(options), {\n    cacheKey: `${options.contract.chain.id}:${options.contract.address}:name`,\n    // can never change, so cache forever\n    cacheTime: Number.POSITIVE_INFINITY,\n  });\n}\n","import { readContract } from \"../../../../../transaction/read-contract.js\";\nimport type { BaseTransactionOptions } from \"../../../../../transaction/types.js\";\n\nimport { decodeAbiParameters } from \"viem\";\nimport type { Hex } from \"../../../../../utils/encoding/hex.js\";\nimport type { ThirdwebContract } from \"../../../../../contract/contract.js\";\nimport { detectMethod } from \"../../../../../utils/bytecode/detectExtension.js\";\n\nexport const FN_SELECTOR = \"0x95d89b41\" as const;\nconst FN_INPUTS = [] as const;\nconst FN_OUTPUTS = [\n  {\n    type: \"string\",\n  },\n] as const;\n\n/**\n * Checks if the `symbol` method is supported by the given contract.\n * @param contract The ThirdwebContract.\n * @returns A promise that resolves to a boolean indicating if the `symbol` method is supported.\n * @extension COMMON\n * @example\n * ```ts\n * import { isSymbolSupported } from \"thirdweb/extensions/common\";\n *\n * const supported = await isSymbolSupported(contract);\n * ```\n */\nexport async function isSymbolSupported(contract: ThirdwebContract<any>) {\n  return detectMethod({\n    contract,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS] as const,\n  });\n}\n\n/**\n * Decodes the result of the symbol function call.\n * @param result - The hexadecimal result to decode.\n * @returns The decoded result as per the FN_OUTPUTS definition.\n * @extension COMMON\n * @example\n * ```ts\n * import { decodeSymbolResult } from \"thirdweb/extensions/common\";\n * const result = decodeSymbolResult(\"...\");\n * ```\n */\nexport function decodeSymbolResult(result: Hex) {\n  return decodeAbiParameters(FN_OUTPUTS, result)[0];\n}\n\n/**\n * Calls the \"symbol\" function on the contract.\n * @param options - The options for the symbol function.\n * @returns The parsed result of the function call.\n * @extension COMMON\n * @example\n * ```ts\n * import { symbol } from \"thirdweb/extensions/common\";\n *\n * const result = await symbol({\n *  contract,\n * });\n *\n * ```\n */\nexport async function symbol(options: BaseTransactionOptions) {\n  return readContract({\n    contract: options.contract,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS] as const,\n    params: [],\n  });\n}\n","import type { BaseTransactionOptions } from \"../../../transaction/types.js\";\nimport { withCache } from \"../../../utils/promise/withCache.js\";\nimport { symbol as generatedSymbol } from \"../__generated__/IContractMetadata/read/symbol.js\";\n\n/**\n * Retrieves the name associated with the given contract.\n * @param options - The options for the transaction.\n * @returns A promise that resolves to the name associated with the contract.\n * @extension COMMON\n * @example\n * ```ts\n * import { symbol } from \"thirdweb/extensions/common\";\n *\n * const contractSymbol = await symbol({ contract });\n * ```\n */\nexport async function symbol(options: BaseTransactionOptions): Promise<string> {\n  return withCache(() => generatedSymbol(options), {\n    cacheKey: `${options.contract.chain.id}:${options.contract.address}:symbol`,\n    // can never change, so cache forever\n    cacheTime: Number.POSITIVE_INFINITY,\n  });\n}\n","import { isNativeTokenAddress } from \"../../../constants/addresses.js\";\nimport type { BaseTransactionOptions } from \"../../../transaction/types.js\";\nimport { name } from \"../../common/read/name.js\";\nimport { symbol } from \"../../common/read/symbol.js\";\nimport { decimals } from \"../__generated__/IERC20/read/decimals.js\";\n\n/**\n * @extension ERC20\n */\nexport type GetCurrencyMetadataResult = {\n  name: string;\n  symbol: string;\n  decimals: number;\n};\n\n/**\n * Retrieves the metadata of a currency.\n * @param options - The options for the transaction.\n * @returns A promise that resolves to an object containing the currency metadata.\n * @extension ERC20\n * @example\n * ```ts\n * import { getCurrencyMetadata } from \"thirdweb/extensions/erc20\";\n *\n * const currencyMetadata = await getCurrencyMetadata({ contract });\n * ```\n */\nexport async function getCurrencyMetadata(\n  options: BaseTransactionOptions,\n): Promise<GetCurrencyMetadataResult> {\n  // if the contract is the native token, return the native currency metadata\n  if (isNativeTokenAddress(options.contract.address)) {\n    return {\n      name: \"Ether\",\n      symbol: \"ETH\",\n      decimals: 18,\n      // overwrite with native currency of the chain if available\n      ...options.contract.chain.nativeCurrency,\n    };\n  }\n\n  try {\n    const [name_, symbol_, decimals_] = await Promise.all([\n      name(options).catch(() => \"\"),\n      symbol(options),\n      decimals(options),\n    ]);\n\n    return {\n      name: name_,\n      symbol: symbol_,\n      decimals: decimals_,\n    };\n  } catch (e) {\n    throw new Error(\"Invalid currency token\");\n  }\n}\n","import { getAddress } from \"../../utils/address.js\";\nimport type { BuyWithFiatQuote } from \"./getQuote.js\";\n\n/**\n * Check if a Swap is required after on-ramp when buying a token with fiat currency.\n *\n * If `quote.toToken` and `quote.onRampToken` are the same (same token and chain),\n * it means on-ramp provider can directly send the desired token to the user's wallet and no swap is required.\n *\n * If `quote.toToken` and `quote.onRampToken` are different (different token or chain), A swap is required to swap the on-ramp token to the desired token.\n *\n * @param buyWithFiatQuote - The quote of type [`BuyWithFiatQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithFiatQuote) returned\n * by the [`getBuyWithFiatQuote`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithFiatQuote) function.\n * @buyCrypto\n */\nexport function isSwapRequiredPostOnramp(\n  buyWithFiatQuote: Pick<BuyWithFiatQuote, \"toToken\" | \"onRampToken\">,\n) {\n  const sameChain =\n    buyWithFiatQuote.toToken.chainId ===\n    buyWithFiatQuote.onRampToken.token.chainId;\n\n  const sameToken =\n    getAddress(buyWithFiatQuote.toToken.tokenAddress) ===\n    getAddress(buyWithFiatQuote.onRampToken.token.tokenAddress);\n\n  return !(sameChain && sameToken);\n}\n","import {\n  type UseQueryOptions,\n  type UseQueryResult,\n  useQuery,\n} from \"@tanstack/react-query\";\nimport {\n  type BuyWithFiatQuote,\n  type GetBuyWithFiatQuoteParams,\n  getBuyWithFiatQuote,\n} from \"../../../../pay/buyWithFiat/getQuote.js\";\n\n/**\n * @internal\n */\nexport type BuyWithFiatQuoteQueryOptions = Omit<\n  UseQueryOptions<BuyWithFiatQuote>,\n  \"queryFn\" | \"queryKey\" | \"enabled\"\n>;\n\n/**\n * Hook to get a price quote for performing a \"Buy with Fiat\" transaction that allows users to buy a token with fiat currency.\n *\n * The price quote is an object of type [`BuyWithFiatQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithFiatQuote).\n * This quote contains the information about the purchase such as token amounts, processing fees, estimated time etc.\n *\n * This hook is a React Query wrapper of the [`getBuyWithFiatQuote`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithFiatQuote) function.\n * You can also use that function directly\n *\n * Once you have the `quote`, you can open a new window with `quote.onRampLink` to allow the user to buy the token with fiat currency.\n * and [`useBuyWithFiatStatus`](https://portal.thirdweb.com/references/typescript/v5/useBuyWithFiatStatus) function to start polling for the status of this transaction.\n *\n * @param params - object of type [`GetBuyWithFiatQuoteParams`](https://portal.thirdweb.com/references/typescript/v5/GetBuyWithFiatQuoteParams)\n * @param queryParams - options to configure the react query\n * @returns A React Query object which contains the data of type [`BuyWithFiatQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithFiatQuote)\n * @example\n * ```ts\n * import { NATIVE_TOKEN_ADDRESS } from \"thirdweb\";\n * import { base } from \"thirdweb/chains\";\n * import { useBuyWithFiatQuote } from \"thirdweb/react\";\n *\n * // get a quote for buying 0.01 base native token with USD fiat currency\n * function Example() {\n *   const quote = useBuyWithFiatQuote({\n *     client: client, // thirdweb client\n *     fromCurrencySymbol: \"USD\", // fiat currency symbol\n *     toChainId: base.id, // base chain id\n *     toAmount: \"0.01\", // amount of token to buy\n *     toTokenAddress: NATIVE_TOKEN_ADDRESS, // native token\n *     toAddress: \"0x...\", // user's wallet address\n *   });\n *\n *   return (\n *     <div>\n *       {quote.data && (\n *         <a href={quote.data.onRampLink} target=\"_blank\">\n *           open onramp provider\n *         </a>\n *       )}\n *     </div>\n *   );\n * }\n * ```\n * @buyCrypto\n */\nexport function useBuyWithFiatQuote(\n  params?: GetBuyWithFiatQuoteParams,\n  queryOptions?: BuyWithFiatQuoteQueryOptions,\n): UseQueryResult<BuyWithFiatQuote> {\n  return useQuery({\n    ...queryOptions,\n    queryKey: [\"useBuyWithFiatQuote\", params],\n    queryFn: async () => {\n      if (!params) {\n        throw new Error(\"No params provided\");\n      }\n      return getBuyWithFiatQuote(params);\n    },\n    enabled: !!params,\n    retry(failureCount, error) {\n      if (failureCount > 3) {\n        return false;\n      }\n      try {\n        // biome-ignore lint/suspicious/noExplicitAny: <explanation>\n        if ((error as any).error.code === \"MINIMUM_PURCHASE_AMOUNT\") {\n          return false;\n        }\n      } catch {\n        return true;\n      }\n\n      return true;\n    },\n  });\n}\n","import type { ThirdwebClient } from \"../../client/client.js\";\nimport { getClientFetch } from \"../../utils/fetch.js\";\nimport { getPayBuyWithFiatQuoteEndpoint } from \"../utils/definitions.js\";\n\n/**\n * Parameters for [`getBuyWithFiatQuote`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithFiatQuote) function\n * @buyCrypto\n */\nexport type GetBuyWithFiatQuoteParams = {\n  /**\n   * A client is the entry point to the thirdweb SDK. It is required for all other actions.\n   *\n   * You can create a client using the `createThirdwebClient` function.\n   * Refer to the [Creating a Client](https://portal.thirdweb.com/typescript/v5/client) documentation for more information.\n   */\n  client: ThirdwebClient;\n\n  /**\n   * The address of the wallet where the tokens will be sent.\n   */\n  toAddress: string;\n\n  /**\n   * The address of the wallet which will be used to buy the token.\n   */\n  fromAddress: string;\n\n  /**\n   * Chain id of the token to buy.\n   */\n  toChainId: number;\n\n  /**\n   * Token address of the token to buy.\n   */\n  toTokenAddress: string;\n\n  /**\n   * Symbol of the fiat currency to buy the token with.\n   */\n  fromCurrencySymbol: \"USD\" | \"CAD\" | \"GBP\" | \"EUR\";\n\n  /**\n   * The maximum slippage in basis points (bps) allowed for the transaction.\n   * For example, if you want to allow a maximum slippage of 0.5%, you should specify `50` bps.\n   */\n  maxSlippageBPS?: number;\n\n  /**\n   * The amount of fiat currency to spend to buy the token.\n   * This is useful if you want to buy whatever amount of token you can get for a certain amount of fiat currency.\n   *\n   * If you want a certain amount of token, you can provide `toAmount` instead of `fromAmount`.\n   */\n  fromAmount?: string;\n\n  /**\n   * The amount of token to buy\n   * This is useful if you want to get a certain amount of token.\n   *\n   * If you want to buy however much token you can get for a certain amount of fiat currency, you can provide `fromAmount` instead of `toAmount`.\n   */\n  toAmount?: string;\n\n  /**\n   * Whether to use on-ramp provider in test mode for testing purpose or not.\n   *\n   * Defaults to `false`\n   */\n  isTestMode?: boolean;\n\n  /**\n   * Extra details to store with the purchase.\n   *\n   * This details will be stored with the purchase and can be retrieved later via the status API or Webhook\n   */\n  purchaseData?: object;\n\n  /**\n   * Optional parameter to onramp gas with the purchase\n   * If native token, will onramp extra native token amount\n   * If erc20, will onramp native token + erc20\n   */\n  toGasAmountWei?: string;\n};\n\n/**\n * The response object returned by the [`getBuyWithFiatQuote`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithFiatQuote) function.\n *\n * This includes various information for buying a token using a fiat currency:\n * - on-ramp provider UI link\n * - The estimated time for the transaction to complete.\n * - The on-ramp and destination token information.\n * - Processing fees\n *\n * @buyCrypto\n */\nexport type BuyWithFiatQuote = {\n  /**\n   * Estimated time for the transaction to complete in seconds.\n   */\n  estimatedDurationSeconds: number;\n  /**\n   * Minimum amount of token that is expected to be received in units.\n   */\n  estimatedToAmountMin: string;\n  /**\n   * Minimum amount of token that is expected to be received in wei.\n   */\n  estimatedToAmountMinWei: string;\n  /**\n   * Amount of token that is expected to be received in units.\n   *\n   * (estimatedToAmountMinWei - maxSlippageWei)\n   */\n  toAmountMinWei: string;\n  /**\n   * Amount of token that is expected to be received in wei.\n   *\n   * (estimatedToAmountMin - maxSlippageWei)\n   */\n  toAmountMin: string;\n  /**\n   * fiat currency used to buy the token - excluding the fees.\n   */\n  fromCurrency: {\n    amount: string;\n    amountUnits: string;\n    decimals: number;\n    currencySymbol: string;\n  };\n  /**\n   * Fiat currency used to buy the token - including the fees.\n   */\n  fromCurrencyWithFees: {\n    amount: string;\n    amountUnits: string;\n    decimals: number;\n    currencySymbol: string;\n  };\n  /**\n   * Token information for the desired token. (token the user wants to buy)\n   */\n  toToken: {\n    symbol?: string | undefined;\n    priceUSDCents?: number | undefined;\n    name?: string | undefined;\n    chainId: number;\n    tokenAddress: string;\n    decimals: number;\n  };\n  /**\n   * Address of the wallet to which the tokens will be sent.\n   */\n  toAddress: string;\n  /**\n   * Address of the wallet used for buying the token.\n   */\n  fromAddress: string;\n  /**\n   * The maximum slippage in basis points (bps) allowed for the transaction.\n   */\n  maxSlippageBPS: number;\n  /**\n   * Id of transaction\n   */\n  intentId: string;\n  /**\n   * Array of processing fees for the transaction.\n   *\n   * This includes the processing fees for on-ramp and swap (if required).\n   */\n  processingFees: {\n    amount: string;\n    amountUnits: string;\n    decimals: number;\n    currencySymbol: string;\n    feeType: \"ON_RAMP\" | \"NETWORK\";\n  }[];\n  /**\n   * Token that will be sent to the user's wallet address by the on-ramp provider.\n   *\n   * If the token is same as `toToken` - the user can directly buy the token from the on-ramp provider.\n   * If not, the user will receive this token and a swap is required to convert it `toToken`.\n   */\n  onRampToken: {\n    amount: string;\n    amountWei: string;\n    amountUSDCents: number;\n    token: {\n      chainId: number;\n      decimals: number;\n      name: string;\n      priceUSDCents: number;\n      symbol: string;\n      tokenAddress: string;\n    };\n  };\n\n  /**\n   * Gas Token that will be sent to the user's wallet address by the on-ramp provider.\n   *\n   * Only used for ERC20 + Gas on-ramp flow. This will hold the details of the gas token and amount sent for gas.\n   *\n   * In Native Currency case, extra for gas will be added to the output amount of the onramp.\n   */\n  gasToken?: {\n    amount: string;\n    amountWei: string;\n    amountUSDCents: number;\n    token: {\n      chainId: number;\n      decimals: number;\n      name: string;\n      priceUSDCents: number;\n      symbol: string;\n      tokenAddress: string;\n    };\n  };\n\n  /**\n   * Link to the on-ramp provider UI that will prompt the user to buy the token with fiat currency.\n   *\n   * This link should be opened in a new tab.\n   * @example\n   * ```ts\n   * window.open(quote.onRampLink, \"_blank\");\n   * ```\n   *\n   */\n  onRampLink: string;\n};\n\n/**\n * Get a quote of type [`BuyWithFiatQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithFiatQuote) to buy given token with fiat currency.\n * This quote contains the information about the swap such as token amounts, processing fees, estimated time etc.\n *\n * ### Rendering the On-Ramp provider UI\n * Once you have the `quote`, you can open the `quote.onRampLink` in a new tab - This will prompt the user to buy the token with fiat currency\n *\n * ### Determining the steps required\n * If `quote.onRampToken.token` is same as `quote.toToken` ( same chain + same token address ) - This means that the token can be directly bought from the on-ramp provider.\n * But if they are different, On-ramp provider will send the `quote.onRampToken` to the user's wallet address and a swap is required to swap it to the desired token onchain.\n *\n * You can use the [`isSwapRequiredPostOnramp`](https://portal.thirdweb.com/references/typescript/v5/isSwapRequiredPostOnramp) utility function to check if a swap is required after the on-ramp is done.\n *\n * ### Polling for the status\n * Once you open the `quote.onRampLink` in a new tab, you can start polling for the status using [`getBuyWithFiatStatus`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithFiatStatus) to get the status of the transaction.\n *\n * `getBuyWithFiatStatus` returns a status object of type [`BuyWithFiatStatus`](https://portal.thirdweb.com/references/typescript/v5/BuyWithFiatStatus).\n *\n * - If no swap is required - the status will become `\"ON_RAMP_TRANSFER_COMPLETED\"` once the on-ramp provider has sent the desired token to the user's wallet address. Once you receive this status, the process is complete.\n * - If a swap is required - the status will become `\"CRYPTO_SWAP_REQUIRED\"` once the on-ramp provider has sent the tokens to the user's wallet address. Once you receive this status, you need to start the swap process.\n *\n * ### Swap Process\n * On receiving the `\"CRYPTO_SWAP_REQUIRED\"` status, you can use the [`getPostOnRampQuote`](https://portal.thirdweb.com/references/typescript/v5/getPostOnRampQuote) function to get the quote for the swap of type [`BuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoQuote).\n *\n * Once you have this quote - You can follow the same steps as mentioned in the [`getBuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithCryptoQuote) documentation to perform the swap.\n *\n * @param params - object of type [`GetBuyWithFiatQuoteParams`](https://portal.thirdweb.com/references/typescript/v5/GetBuyWithFiatQuoteParams)\n * @returns Object of type [`BuyWithFiatQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithFiatQuote) which contains the information about the quote such as processing fees, estimated time, converted token amounts, etc.\n * @example\n * Get a quote for buying 10 USDC on polygon chain (chainId: 137) with USD fiat currency:\n *\n * ```ts\n * import { getBuyWithFiatQuote } from \"thirdweb/pay\";\n *\n * const quote = await getBuyWithFiatQuote({\n *  client: client, // thirdweb client\n *  fromCurrencySymbol: \"USD\", // fiat currency symbol\n *  toChainId: 137, // polygon chain id\n *  toAmount: \"10\", // amount of USDC to buy\n *  toTokenAddress: \"0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359\" // USDC token address in polygon chain\n *  toAddress: \"0x...\", // user's wallet address\n *  isTestMode: false, // whether to use onramp in test mode for testing purpose (defaults to false)\n * });\n *\n * window.open(quote.onRampLink, \"_blank\");\n * ```\n * @buyCrypto\n */\nexport async function getBuyWithFiatQuote(\n  params: GetBuyWithFiatQuoteParams,\n): Promise<BuyWithFiatQuote> {\n  try {\n    const clientFetch = getClientFetch(params.client);\n\n    const response = await clientFetch(getPayBuyWithFiatQuoteEndpoint(), {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        toAddress: params.toAddress,\n        fromCurrencySymbol: params.fromCurrencySymbol,\n        toChainId: params.toChainId.toString(),\n        toTokenAddress: params.toTokenAddress,\n        fromAmount: params.fromAmount,\n        toAmount: params.toAmount,\n        maxSlippageBPS: params.maxSlippageBPS,\n        isTestMode: params.isTestMode,\n        purchaseData: params.purchaseData,\n        fromAddress: params.fromAddress,\n        toGasAmountWei: params.toGasAmountWei,\n      }),\n    });\n\n    // Assuming the response directly matches the SwapResponse interface\n    if (!response.ok) {\n      const errorObj = await response.json();\n      if (errorObj && \"error\" in errorObj) {\n        throw errorObj;\n      }\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    return (await response.json()).result;\n  } catch (error) {\n    console.error(\"Error getting buy with fiat quote\", error);\n    throw error;\n  }\n}\n","\"use client\";\nimport { keyframes } from \"@emotion/react\";\nimport { Cross2Icon } from \"@radix-ui/react-icons\";\nimport {\n  forwardRef,\n  useCallback,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { useCustomTheme } from \"../../../core/design-system/CustomThemeProvider.js\";\nimport { iconSize, radius } from \"../../../core/design-system/index.js\";\nimport { fadeInAnimation } from \"../design-system/animations.js\";\nimport { StyledDiv } from \"../design-system/elements.js\";\nimport { DynamicHeight } from \"./DynamicHeight.js\";\nimport { CrossContainer } from \"./Modal.js\";\nimport { Container } from \"./basic.js\";\nimport { IconButton } from \"./buttons.js\";\n\ntype DrawerProps = {\n  children: React.ReactNode;\n  close: () => void;\n};\n/**\n *\n * @internal\n */\nexport const Drawer = /* @__PURE__ */ forwardRef<HTMLDivElement, DrawerProps>(\n  function Drawer_(props, ref) {\n    return (\n      <DrawerContainer ref={ref}>\n        <DynamicHeight>\n          <Container p=\"lg\">\n            <CrossContainer>\n              <IconButton\n                type=\"button\"\n                aria-label=\"Close\"\n                onClick={props.close}\n              >\n                <Cross2Icon\n                  width={iconSize.md}\n                  height={iconSize.md}\n                  style={{\n                    color: \"inherit\",\n                  }}\n                />\n              </IconButton>\n            </CrossContainer>\n\n            {props.children}\n          </Container>\n        </DynamicHeight>\n      </DrawerContainer>\n    );\n  },\n);\n\nexport const DrawerContainer = /* @__PURE__ */ StyledDiv((_) => {\n  const theme = useCustomTheme();\n  return {\n    zIndex: 10000,\n    borderTopLeftRadius: radius.xl,\n    borderTopRightRadius: radius.xl,\n    background: theme.colors.modalBg,\n    position: \"absolute\",\n    bottom: 0,\n    left: 0,\n    right: 0,\n    animation: `${drawerOpenAnimation} 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.1)`,\n    borderTop: `1px solid ${theme.colors.borderColor}`,\n  };\n});\n\nexport const drawerOpenAnimation = keyframes`\n  from {\n    opacity: 0;\n    transform: translateY(100px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n`;\n\nexport const DrawerOverlay = /* @__PURE__ */ StyledDiv((_) => {\n  const theme = useCustomTheme();\n  return {\n    backgroundColor: theme.colors.modalOverlayBg,\n    zIndex: 9999,\n    position: \"absolute\",\n    inset: 0,\n    animation: `${fadeInAnimation} 400ms cubic-bezier(0.16, 1, 0.3, 1)`,\n  };\n});\n\n/**\n *\n * @internal\n */\nexport function useDrawer() {\n  const [isOpen, _setIsOpen] = useState(false);\n  const drawerRef = useRef<HTMLDivElement>(null);\n  const drawerOverlayRef = useRef<HTMLDivElement>(null);\n\n  const closeDrawerAnimation = useCallback(() => {\n    return new Promise<void>((resolve) => {\n      if (drawerRef.current) {\n        const animOptions = {\n          easing: \"cubic-bezier(0.175, 0.885, 0.32, 1.1)\",\n          fill: \"forwards\",\n          duration: 300,\n        } as const;\n\n        const closeAnimation = drawerRef.current.animate(\n          [{ transform: \"translateY(100%)\", opacity: 0 }],\n          animOptions,\n        );\n\n        drawerOverlayRef.current?.animate([{ opacity: 0 }], animOptions);\n        closeAnimation.onfinish = () => resolve();\n      } else {\n        resolve();\n      }\n    });\n  }, []);\n\n  const setIsOpen = useCallback(\n    async (value: boolean) => {\n      if (value) {\n        _setIsOpen(true);\n      } else {\n        await closeDrawerAnimation();\n        _setIsOpen(false);\n      }\n    },\n    [closeDrawerAnimation],\n  );\n\n  // close on outside click\n  useLayoutEffect(() => {\n    if (!isOpen) {\n      return;\n    }\n\n    const handleClick = (event: MouseEvent) => {\n      if (\n        drawerRef.current &&\n        event.target instanceof Node &&\n        !drawerRef.current.contains(event.target)\n      ) {\n        setIsOpen(false);\n      }\n    };\n\n    // avoid listening to the click event that opened the drawer by adding a frame delay\n    requestAnimationFrame(() => {\n      document.addEventListener(\"click\", handleClick);\n    });\n\n    return () => {\n      document.removeEventListener(\"click\", handleClick);\n    };\n  }, [isOpen, setIsOpen]);\n\n  return {\n    drawerRef,\n    drawerOverlayRef,\n    setIsOpen,\n    isOpen,\n  };\n}\n","import { useQuery } from \"@tanstack/react-query\";\nimport type { Chain } from \"../../../../../../chains/types.js\";\nimport type { ThirdwebClient } from \"../../../../../../client/client.js\";\nimport { NATIVE_TOKEN_ADDRESS } from \"../../../../../../constants/addresses.js\";\nimport { getContract } from \"../../../../../../contract/contract.js\";\nimport { decimals } from \"../../../../../../extensions/erc20/read/decimals.js\";\nimport { shortenAddress } from \"../../../../../../utils/address.js\";\nimport { formatNumber } from \"../../../../../../utils/formatNumber.js\";\nimport { toTokens } from \"../../../../../../utils/units.js\";\nimport type { Account } from \"../../../../../../wallets/interfaces/wallet.js\";\nimport { useCustomTheme } from \"../../../../../core/design-system/CustomThemeProvider.js\";\nimport { iconSize, spacing } from \"../../../../../core/design-system/index.js\";\nimport type { PayUIOptions } from \"../../../../../core/hooks/connection/ConnectButtonProps.js\";\nimport { useChainMetadata } from \"../../../../../core/hooks/others/useChainQuery.js\";\nimport { useActiveWallet } from \"../../../../../core/hooks/wallets/useActiveWallet.js\";\nimport type { TokenInfo } from \"../../../../../core/utils/defaultTokens.js\";\nimport { useEnsName } from \"../../../../../core/utils/wallet.js\";\nimport { LoadingScreen } from \"../../../../wallets/shared/LoadingScreen.js\";\nimport type { PayEmbedConnectOptions } from \"../../../PayEmbed.js\";\nimport { ChainIcon } from \"../../../components/ChainIcon.js\";\nimport { Img } from \"../../../components/Img.js\";\nimport { Spacer } from \"../../../components/Spacer.js\";\nimport { TokenIcon } from \"../../../components/TokenIcon.js\";\nimport { WalletImage } from \"../../../components/WalletImage.js\";\nimport { Container, Line, ModalHeader } from \"../../../components/basic.js\";\nimport { Button } from \"../../../components/buttons.js\";\nimport { Text } from \"../../../components/text.js\";\nimport { ConnectButton } from \"../../ConnectButton.js\";\nimport { type ERC20OrNativeToken, isNativeToken } from \"../nativeToken.js\";\nimport type { SupportedChainAndTokens } from \"./swap/useSwapSupportedChains.js\";\n\nexport function DirectPaymentModeScreen(props: {\n  client: ThirdwebClient;\n  payUiOptions: Extract<PayUIOptions, { mode: \"direct_payment\" }>;\n  supportedDestinations: SupportedChainAndTokens;\n  payerAccount: Account | undefined;\n  connectOptions: PayEmbedConnectOptions | undefined;\n  onContinue: (\n    tokenAmount: string,\n    toChain: Chain,\n    toToken: ERC20OrNativeToken,\n  ) => void;\n}) {\n  const {\n    payUiOptions,\n    supportedDestinations,\n    client,\n    onContinue,\n    payerAccount,\n  } = props;\n  const theme = useCustomTheme();\n  const activeWallet = useActiveWallet();\n  const metadata = payUiOptions.metadata;\n  const paymentInfo = payUiOptions.paymentInfo;\n  const { data: chainData } = useChainMetadata(paymentInfo.chain);\n  const { data: sellerEns } = useEnsName({\n    client,\n    address: paymentInfo.sellerAddress,\n  });\n\n  const totalCostQuery = useQuery({\n    queryKey: [\"amount\", paymentInfo],\n    queryFn: async () => {\n      let tokenDecimals = 18;\n      if (paymentInfo.token && !isNativeToken(paymentInfo.token)) {\n        tokenDecimals = await decimals({\n          contract: getContract({\n            address: paymentInfo.token.address,\n            chain: paymentInfo.chain,\n            client,\n          }),\n        });\n      }\n      let cost: string;\n      if (\"amountWei\" in paymentInfo) {\n        cost = toTokens(paymentInfo.amountWei, tokenDecimals);\n      } else {\n        cost = paymentInfo.amount;\n      }\n      return cost;\n    },\n  });\n\n  const totalCost = totalCostQuery.data;\n  if (!chainData || totalCost === undefined) {\n    return <LoadingScreen />;\n  }\n\n  const token: TokenInfo = paymentInfo.token\n    ? {\n        ...paymentInfo.token,\n        icon:\n          paymentInfo.token?.icon ||\n          supportedDestinations\n            .find((c) => c.chain.id === paymentInfo.chain.id)\n            ?.tokens.find(\n              (t) =>\n                t.address.toLowerCase() ===\n                paymentInfo.token?.address.toLowerCase(),\n            )?.icon,\n      }\n    : {\n        address: NATIVE_TOKEN_ADDRESS,\n        name: chainData.nativeCurrency.name,\n        symbol: chainData.nativeCurrency.symbol,\n        icon: chainData.icon?.url,\n      };\n\n  return (\n    <Container p=\"lg\">\n      <ModalHeader title={metadata?.name || \"Payment Details\"} />\n\n      <Spacer y=\"lg\" />\n      <Container>\n        {metadata?.image ? (\n          <Img\n            client={client}\n            src={metadata?.image}\n            style={{\n              width: \"100%\",\n              borderRadius: spacing.md,\n              backgroundColor: theme.colors.tertiaryBg,\n            }}\n          />\n        ) : activeWallet ? (\n          <Container\n            flex=\"row\"\n            center=\"both\"\n            style={{\n              padding: spacing.md,\n              marginBottom: spacing.md,\n              borderRadius: spacing.md,\n              backgroundColor: theme.colors.tertiaryBg,\n            }}\n          >\n            <WalletImage\n              size={iconSize.xl}\n              id={activeWallet.id}\n              client={client}\n            />\n            <div\n              style={{\n                flexGrow: 1,\n                borderBottom: \"6px dotted\",\n                borderColor: theme.colors.secondaryIconColor,\n                marginLeft: spacing.md,\n                marginRight: spacing.md,\n              }}\n            />\n            <ChainIcon\n              client={client}\n              size={iconSize.xl}\n              chainIconUrl={chainData.icon?.url}\n            />\n          </Container>\n        ) : null}\n        <Spacer y=\"md\" />\n        <Container flex=\"row\">\n          <Container flex=\"column\" expand>\n            <Text size=\"md\" color=\"primaryText\" weight={700}>\n              {\"Price\"}\n            </Text>\n          </Container>\n          <Container expand>\n            <Container\n              flex=\"row\"\n              gap=\"xs\"\n              center=\"y\"\n              style={{ justifyContent: \"right\" }}\n            >\n              <TokenIcon\n                chain={paymentInfo.chain}\n                client={props.client}\n                size=\"sm\"\n                token={token}\n              />\n              <Text color=\"primaryText\" size=\"md\" weight={700}>\n                {String(formatNumber(Number(totalCost), 6))} {token.symbol}\n              </Text>\n            </Container>\n          </Container>\n        </Container>\n        <Spacer y=\"md\" />\n        <Line />\n        <Spacer y=\"md\" />\n        <Container flex=\"row\">\n          <Container flex=\"column\" expand>\n            <Text size=\"xs\" color=\"secondaryText\">\n              Network\n            </Text>\n          </Container>\n          <Container expand>\n            <Container\n              flex=\"row\"\n              gap=\"xs\"\n              center=\"y\"\n              style={{ justifyContent: \"right\" }}\n            >\n              <ChainIcon\n                chainIconUrl={chainData.icon?.url}\n                size=\"xs\"\n                client={props.client}\n              />\n              <Text\n                size=\"xs\"\n                color=\"secondaryText\"\n                style={{ textAlign: \"right\" }}\n              >\n                {chainData.name}\n              </Text>\n            </Container>\n          </Container>\n        </Container>\n        <Spacer y=\"sm\" />\n        <Container flex=\"row\">\n          <Container flex=\"column\" expand>\n            <Text size=\"xs\" color=\"secondaryText\">\n              Seller\n            </Text>\n          </Container>\n          <Container expand>\n            <Container\n              flex=\"row\"\n              gap=\"xs\"\n              center=\"y\"\n              style={{ justifyContent: \"right\" }}\n            >\n              <Text\n                size=\"xs\"\n                color=\"secondaryText\"\n                style={{ textAlign: \"right\" }}\n              >\n                {sellerEns || shortenAddress(paymentInfo.sellerAddress)}\n              </Text>\n            </Container>\n          </Container>\n        </Container>\n      </Container>\n      <Spacer y=\"xl\" />\n      {payerAccount ? (\n        <Button\n          variant=\"accent\"\n          fullWidth\n          onClick={() => {\n            onContinue(totalCost, paymentInfo.chain, token);\n          }}\n        >\n          Choose Payment Method\n        </Button>\n      ) : (\n        <div>\n          <ConnectButton\n            {...props.connectOptions}\n            client={client}\n            theme={theme}\n            connectButton={{\n              style: {\n                width: \"100%\",\n              },\n            }}\n          />\n        </div>\n      )}\n    </Container>\n  );\n}\n","import { ClockIcon } from \"@radix-ui/react-icons\";\nimport {\n  fontSize,\n  iconSize,\n  radius,\n} from \"../../../../../core/design-system/index.js\";\nimport { Skeleton } from \"../../../components/Skeleton.js\";\nimport { Container } from \"../../../components/basic.js\";\nimport { Button } from \"../../../components/buttons.js\";\nimport { Text } from \"../../../components/text.js\";\nimport type { IconFC } from \"../../icons/types.js\";\nimport { formatSeconds } from \"./swap/formatSeconds.js\";\n\nexport function EstimatedTimeAndFees(props: {\n  estimatedSeconds?: number | undefined;\n  quoteIsLoading: boolean;\n  onViewFees: () => void;\n}) {\n  const { estimatedSeconds, quoteIsLoading } = props;\n\n  return (\n    <Container\n      bg=\"tertiaryBg\"\n      flex=\"row\"\n      borderColor=\"borderColor\"\n      style={{\n        borderRadius: radius.md,\n        borderTopLeftRadius: 0,\n        borderTopRightRadius: 0,\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n        borderWidth: \"1px\",\n        borderStyle: \"solid\",\n      }}\n    >\n      <Container flex=\"row\" center=\"y\" gap=\"xxs\" color=\"accentText\" p=\"sm\">\n        <ClockIcon width={iconSize.sm} height={iconSize.sm} />\n        {quoteIsLoading ? (\n          <Skeleton height={fontSize.xs} width=\"50px\" color=\"borderColor\" />\n        ) : (\n          <Text size=\"xs\" color=\"secondaryText\">\n            {estimatedSeconds !== undefined\n              ? `~${formatSeconds(estimatedSeconds)}`\n              : \"--\"}\n          </Text>\n        )}\n      </Container>\n\n      <Button variant=\"ghost\" onClick={props.onViewFees} gap=\"xs\">\n        <Container color=\"accentText\" flex=\"row\" center=\"both\">\n          <ViewFeeIcon size={iconSize.sm} />\n        </Container>\n        <Text size=\"xs\" color=\"secondaryText\">\n          View Fees\n        </Text>\n      </Button>\n    </Container>\n  );\n}\n\nconst ViewFeeIcon: IconFC = (props) => {\n  return (\n    <svg\n      width={props.size}\n      height={props.size}\n      viewBox=\"0 0 12 12\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      aria-hidden=\"true\"\n    >\n      <path\n        d=\"M9.5 1.5H2.5C1.94772 1.5 1.5 1.94772 1.5 2.5V9.5C1.5 10.0523 1.94772 10.5 2.5 10.5H9.5C10.0523 10.5 10.5 10.0523 10.5 9.5V2.5C10.5 1.94772 10.0523 1.5 9.5 1.5Z\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M4.5 7.5L7.5 4.5\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n    </svg>\n  );\n};\n","import styled from \"@emotion/styled\";\nimport { ChevronDownIcon } from \"@radix-ui/react-icons\";\nimport type { ThirdwebClient } from \"../../../../../../client/client.js\";\nimport { formatNumber } from \"../../../../../../utils/formatNumber.js\";\nimport {\n  fontSize,\n  iconSize,\n  radius,\n  spacing,\n} from \"../../../../../core/design-system/index.js\";\nimport { Skeleton } from \"../../../components/Skeleton.js\";\nimport { Container } from \"../../../components/basic.js\";\nimport { Button } from \"../../../components/buttons.js\";\nimport { Text } from \"../../../components/text.js\";\nimport type { CurrencyMeta } from \"./fiat/currencies.js\";\n\n/**\n * Shows an amount \"value\" and renders the selected token and chain\n * It also renders the buttons to select the token and chain\n * It also renders the balance of active wallet for the selected token in selected chain\n * @internal\n */\nexport function PayWithCreditCard(props: {\n  value?: string;\n  isLoading: boolean;\n  client: ThirdwebClient;\n  currency: CurrencyMeta;\n  onSelectCurrency: () => void;\n}) {\n  return (\n    <Container\n      bg=\"tertiaryBg\"\n      borderColor=\"borderColor\"\n      flex=\"row\"\n      style={{\n        borderRadius: radius.md,\n        borderBottomRightRadius: 0,\n        borderBottomLeftRadius: 0,\n        borderWidth: \"1px\",\n        borderStyle: \"solid\",\n        borderBottom: \"none\",\n        flexWrap: \"nowrap\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n      }}\n    >\n      {/* Left */}\n      <CurrencyButton\n        variant=\"ghost\"\n        onClick={props.onSelectCurrency}\n        style={{\n          minHeight: \"64px\",\n          justifyContent: \"flex-start\",\n          minWidth: \"50%\",\n        }}\n        gap=\"sm\"\n      >\n        <props.currency.icon size={iconSize.md} />\n        <Container flex=\"row\" center=\"y\" gap=\"xxs\" color=\"secondaryText\">\n          <Text color=\"primaryText\">{props.currency.shorthand}</Text>\n          <ChevronDownIcon width={iconSize.sm} height={iconSize.sm} />\n        </Container>\n      </CurrencyButton>\n\n      {/* Right */}\n      <div\n        style={{\n          flexGrow: 1,\n          flexShrink: 1,\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"flex-end\",\n          gap: spacing.xxs,\n          overflow: \"hidden\",\n          textOverflow: \"ellipsis\",\n          whiteSpace: \"nowrap\",\n          justifyContent: \"center\",\n          paddingRight: spacing.sm,\n        }}\n      >\n        {props.isLoading ? (\n          <Skeleton width=\"100px\" height={fontSize.lg} />\n        ) : (\n          <Text size=\"lg\" color={props.value ? \"primaryText\" : \"secondaryText\"}>\n            {props.value ? `${formatNumber(Number(props.value), 6)}` : \"--\"}\n          </Text>\n        )}\n      </div>\n    </Container>\n  );\n}\n\nconst CurrencyButton = /* @__PURE__ */ styled(Button)(() => {\n  return {\n    \"&[disabled]:hover\": {\n      borderColor: \"transparent\",\n    },\n  };\n});\n","import { defineChain } from \"../utils.js\";\n\n/**\n * @chain\n */\nexport const baseSepolia = /* @__PURE__ */ defineChain({\n  id: 84532,\n  name: \"Base Sepolia\",\n  nativeCurrency: { name: \"Sepolia Ether\", symbol: \"ETH\", decimals: 18 },\n  blockExplorers: [\n    {\n      name: \"Basescan\",\n      url: \"https://sepolia.basescan.org\",\n      apiUrl: \"https://api-sepolia.basescan.org/api\",\n    },\n  ],\n  testnet: true,\n});\n","import { defineChain } from \"../utils.js\";\n\n/**\n * @chain\n */\nexport const base = /* @__PURE__ */ defineChain({\n  id: 8453,\n  name: \"Base\",\n  nativeCurrency: { name: \"Ether\", symbol: \"ETH\", decimals: 18 },\n  blockExplorers: [\n    {\n      name: \"Basescan\",\n      url: \"https://basescan.org\",\n      apiUrl: \"https://api.basescan.org/api\",\n    },\n  ],\n});\n","import { defineChain } from \"../utils.js\";\n\n/**\n * @chain\n */\nexport const optimismSepolia = /* @__PURE__ */ defineChain({\n  id: 11155420,\n  name: \"OP Sepolia\",\n  nativeCurrency: { name: \"Sepolia Ether\", symbol: \"ETH\", decimals: 18 },\n  blockExplorers: [\n    {\n      name: \"Blockscout\",\n      url: \"https://optimism-sepolia.blockscout.com\",\n      apiUrl: \"https://optimism-sepolia.blockscout.com/api\",\n    },\n  ],\n  testnet: true,\n});\n","import { defineChain } from \"../utils.js\";\n\n/**\n * @chain\n */\nexport const optimism = /* @__PURE__ */ defineChain({\n  id: 10,\n  name: \"OP Mainnet\",\n  nativeCurrency: { name: \"Ether\", symbol: \"ETH\", decimals: 18 },\n  blockExplorers: [\n    {\n      name: \"Optimism Explorer\",\n      url: \"https://optimistic.etherscan.io\",\n      apiUrl: \"https://api-optimistic.etherscan.io\",\n    },\n  ],\n});\n","import { defineChain } from \"../utils.js\";\n\n/**\n * @chain\n */\nexport const zoraSepolia = /*@__PURE__*/ defineChain({\n  id: 999999999,\n  name: \"Zora Sepolia\",\n\n  nativeCurrency: {\n    decimals: 18,\n    name: \"Zora Sepolia\",\n    symbol: \"ETH\",\n  },\n  blockExplorers: [\n    {\n      name: \"Zora Sepolia Explorer\",\n      url: \"https://sepolia.explorer.zora.energy/\",\n      apiUrl: \"https://sepolia.explorer.zora.energy/api\",\n    },\n  ],\n  testnet: true,\n});\n","import { defineChain } from \"../utils.js\";\n\n/**\n * @chain\n */\nexport const zora = /*@__PURE__*/ defineChain({\n  id: 7777777,\n  name: \"Zora\",\n  nativeCurrency: {\n    decimals: 18,\n    name: \"Ether\",\n    symbol: \"ETH\",\n  },\n  blockExplorers: [\n    {\n      name: \"Explorer\",\n      url: \"https://explorer.zora.energy\",\n      apiUrl: \"https://explorer.zora.energy/api\",\n    },\n  ],\n});\n","import { baseSepolia } from \"./chain-definitions/base-sepolia.js\";\nimport { base } from \"./chain-definitions/base.js\";\nimport { optimismSepolia } from \"./chain-definitions/optimism-sepolia.js\";\nimport { optimism } from \"./chain-definitions/optimism.js\";\nimport { zoraSepolia } from \"./chain-definitions/zora-sepolia.js\";\nimport { zora } from \"./chain-definitions/zora.js\";\nimport type { Chain } from \"./types.js\";\n\nconst opChains = [\n  base.id,\n  baseSepolia.id,\n  optimism.id,\n  optimismSepolia.id,\n  zora.id,\n  zoraSepolia.id,\n  34443, // mode\n  919, // mode testnet\n  42220, // celo\n  44787, // celo testnet\n  204, // opBNB\n  5611, // opBNB testnet\n];\n\n/**\n * TODO this should be in the chain definition itself\n * @internal\n */\nexport function isOpStackChain(chain: Chain) {\n  return opChains.includes(chain.id);\n}\n","import { isOpStackChain } from \"../../chains/constants.js\";\nimport { getGasPrice } from \"../../gas/get-gas-price.js\";\nimport { resolvePromisedValue } from \"../../utils/promise/resolve-promised-value.js\";\nimport { toEther } from \"../../utils/units.js\";\nimport { type EstimateGasOptions, estimateGas } from \"./estimate-gas.js\";\n\nexport type EstimateGasCostResult = {\n  /**\n   * The estimated gas cost in ether.\n   */\n  ether: string;\n  /**\n   * The estimated gas cost in wei.\n   */\n  wei: bigint;\n};\n\n/**\n * Estimate the gas cost of a transaction in ether and wei.\n * @example\n * ```ts\n * import { estimateGasCost } from \"thirdweb\";\n *\n * const gasCost = await estimateGasCost({ transaction });\n * ```\n * @transaction\n */\nexport async function estimateGasCost(\n  options: EstimateGasOptions,\n): Promise<EstimateGasCostResult> {\n  const { transaction } = options;\n  const from = options.from ?? options.account?.address ?? undefined;\n  const gasLimit =\n    (await resolvePromisedValue(transaction.gas)) ||\n    (await estimateGas({ transaction, from }));\n  const gasPrice = await getGasPrice({\n    client: transaction.client,\n    chain: transaction.chain,\n  });\n  let l1Fee: bigint;\n  if (isOpStackChain(transaction.chain)) {\n    const { estimateL1Fee } = await import(\"../../gas/estimate-l1-fee.js\");\n    l1Fee = await estimateL1Fee({\n      transaction,\n    });\n  } else {\n    l1Fee = 0n;\n  }\n  const wei = gasLimit * gasPrice + l1Fee;\n  return {\n    ether: toEther(wei),\n    wei,\n  };\n}\n","import { useQuery } from \"@tanstack/react-query\";\nimport { useEffect, useState } from \"react\";\nimport { getChainMetadata } from \"../../../../../../../chains/utils.js\";\nimport { NATIVE_TOKEN_ADDRESS } from \"../../../../../../../constants/addresses.js\";\nimport { getContract } from \"../../../../../../../contract/contract.js\";\nimport { getCurrencyMetadata } from \"../../../../../../../extensions/erc20/read/getCurrencyMetadata.js\";\nimport { getGasPrice } from \"../../../../../../../gas/get-gas-price.js\";\nimport { encode } from \"../../../../../../../transaction/actions/encode.js\";\nimport { estimateGasCost } from \"../../../../../../../transaction/actions/estimate-gas-cost.js\";\nimport type { PreparedTransaction } from \"../../../../../../../transaction/prepare-transaction.js\";\nimport type { Hex } from \"../../../../../../../utils/encoding/hex.js\";\nimport { resolvePromisedValue } from \"../../../../../../../utils/promise/resolve-promised-value.js\";\nimport type { Account } from \"../../../../../../../wallets/interfaces/wallet.js\";\nimport { getWalletBalance } from \"../../../../../../../wallets/utils/getWalletBalance.js\";\nimport type { SupportedChainAndTokens } from \"../swap/useSwapSupportedChains.js\";\nimport type { TransactionCostAndData } from \"./types.js\";\n\nexport function useTransactionCostAndData(args: {\n  transaction: PreparedTransaction;\n  account: Account | undefined;\n  supportedDestinations: SupportedChainAndTokens;\n}) {\n  const { transaction, account, supportedDestinations } = args;\n  // Compute query key of the transaction first\n  const [txQueryKey, setTxQueryKey] = useState<\n    | {\n        value: string | undefined;\n        erc20Value: string | undefined;\n        erc20Currency: string | undefined;\n        to: string | undefined;\n        data: Hex | undefined;\n      }\n    | undefined\n  >();\n  useEffect(() => {\n    Promise.all([\n      resolvePromisedValue(transaction.value),\n      resolvePromisedValue(transaction.erc20Value),\n      resolvePromisedValue(transaction.to),\n      encode(transaction),\n    ]).then(([value, erc20Value, to, data]) => {\n      setTxQueryKey({\n        value: value?.toString(),\n        erc20Value: erc20Value?.amountWei?.toString(),\n        erc20Currency: erc20Value?.tokenAddress,\n        to,\n        data,\n      });\n    });\n  }, [transaction]);\n\n  return useQuery({\n    queryKey: [\n      \"transaction-cost\",\n      transaction.chain.id,\n      account?.address,\n      txQueryKey,\n    ],\n    queryFn: async () => {\n      if (!account) {\n        throw new Error(\"No account\");\n      }\n\n      const erc20Value = await resolvePromisedValue(transaction.erc20Value);\n      if (erc20Value) {\n        const [tokenBalance, tokenMeta, gasCostWei] = await Promise.all([\n          getWalletBalance({\n            address: account.address,\n            chain: transaction.chain,\n            client: transaction.client,\n            tokenAddress: erc20Value.tokenAddress,\n          }),\n          getCurrencyMetadata({\n            contract: getContract({\n              address: erc20Value.tokenAddress,\n              chain: transaction.chain,\n              client: transaction.client,\n            }),\n          }),\n          getTransactionGasCost(transaction, account?.address),\n        ]);\n        const transactionValueWei = erc20Value.amountWei;\n        const walletBalance = tokenBalance;\n        const currency = {\n          address: erc20Value.tokenAddress,\n          name: tokenMeta.name,\n          symbol: tokenMeta.symbol,\n          icon: supportedDestinations\n            .find((c) => c.chain.id === transaction.chain.id)\n            ?.tokens.find(\n              (t) =>\n                t.address.toLowerCase() ===\n                erc20Value.tokenAddress.toLowerCase(),\n            )?.icon,\n        };\n        return {\n          token: currency,\n          decimals: tokenMeta.decimals,\n          walletBalance,\n          gasCostWei,\n          transactionValueWei,\n        } satisfies TransactionCostAndData;\n      }\n\n      const [nativeWalletBalance, chainMetadata, gasCostWei] =\n        await Promise.all([\n          getWalletBalance({\n            address: account.address,\n            chain: transaction.chain,\n            client: transaction.client,\n          }),\n          getChainMetadata(transaction.chain),\n          getTransactionGasCost(transaction, account?.address),\n        ]);\n\n      const walletBalance = nativeWalletBalance;\n      const transactionValueWei =\n        (await resolvePromisedValue(transaction.value)) || 0n;\n      return {\n        token: {\n          address: NATIVE_TOKEN_ADDRESS,\n          name: chainMetadata.nativeCurrency.name,\n          symbol: chainMetadata.nativeCurrency.symbol,\n          icon: chainMetadata.icon?.url,\n        },\n        decimals: 18,\n        walletBalance,\n        gasCostWei,\n        transactionValueWei,\n      } satisfies TransactionCostAndData;\n    },\n    enabled: !!transaction && !!account && !!txQueryKey,\n    refetchInterval: () => {\n      if (transaction.erc20Value) {\n        // if erc20 value is set, we don't need to poll\n        return undefined;\n      }\n      return 30_000;\n    },\n  });\n}\n\nexport async function getTransactionGasCost(\n  tx: PreparedTransaction,\n  from?: string,\n) {\n  try {\n    const gasCost = await estimateGasCost({\n      transaction: tx,\n      from,\n    });\n\n    const bufferCost = gasCost.wei / 10n;\n\n    // Note: get tx.value AFTER estimateGasCost\n    // add 10% extra gas cost to the estimate to ensure user buys enough to cover the tx cost\n    return gasCost.wei + bufferCost;\n  } catch (e) {\n    if (from) {\n      // try again without passing from\n      return await getTransactionGasCost(tx);\n    }\n    // fallback if both fail, use the tx value + 2M * gas price\n    const gasPrice = await getGasPrice({\n      client: tx.client,\n      chain: tx.chain,\n    });\n\n    return 2_000_000n * gasPrice;\n  }\n}\n","import type { Chain } from \"../../../../../../chains/types.js\";\nimport type { ThirdwebClient } from \"../../../../../../client/client.js\";\nimport { NATIVE_TOKEN_ADDRESS } from \"../../../../../../constants/addresses.js\";\nimport { formatNumber } from \"../../../../../../utils/formatNumber.js\";\nimport { toTokens } from \"../../../../../../utils/units.js\";\nimport type { Account } from \"../../../../../../wallets/interfaces/wallet.js\";\nimport { useCustomTheme } from \"../../../../../core/design-system/CustomThemeProvider.js\";\nimport { iconSize, spacing } from \"../../../../../core/design-system/index.js\";\nimport type { PayUIOptions } from \"../../../../../core/hooks/connection/ConnectButtonProps.js\";\nimport { useChainMetadata } from \"../../../../../core/hooks/others/useChainQuery.js\";\nimport { useActiveWallet } from \"../../../../../core/hooks/wallets/useActiveWallet.js\";\nimport { hasSponsoredTransactionsEnabled } from \"../../../../../core/utils/wallet.js\";\nimport { LoadingScreen } from \"../../../../wallets/shared/LoadingScreen.js\";\nimport type { PayEmbedConnectOptions } from \"../../../PayEmbed.js\";\nimport { ChainIcon } from \"../../../components/ChainIcon.js\";\nimport { Img } from \"../../../components/Img.js\";\nimport { Spacer } from \"../../../components/Spacer.js\";\nimport { TokenIcon } from \"../../../components/TokenIcon.js\";\nimport { WalletImage } from \"../../../components/WalletImage.js\";\nimport { Container, Line, ModalHeader } from \"../../../components/basic.js\";\nimport { Button } from \"../../../components/buttons.js\";\nimport { Text } from \"../../../components/text.js\";\nimport { ConnectButton } from \"../../ConnectButton.js\";\nimport type { ERC20OrNativeToken } from \"../nativeToken.js\";\nimport { useTransactionCostAndData } from \"./main/useBuyTxStates.js\";\nimport type { SupportedChainAndTokens } from \"./swap/useSwapSupportedChains.js\";\n\nexport function TransactionModeScreen(props: {\n  client: ThirdwebClient;\n  payUiOptions: Extract<PayUIOptions, { mode: \"transaction\" }>;\n  supportedDestinations: SupportedChainAndTokens;\n  payerAccount: Account | undefined;\n  connectOptions: PayEmbedConnectOptions | undefined;\n  onContinue: (\n    tokenAmount: string,\n    toChain: Chain,\n    toToken: ERC20OrNativeToken,\n  ) => void;\n}) {\n  const {\n    payUiOptions,\n    client,\n    payerAccount,\n    supportedDestinations,\n    onContinue,\n  } = props;\n  const { data: chainData } = useChainMetadata(payUiOptions.transaction.chain);\n  const metadata = payUiOptions.metadata;\n  const { data: transactionCostAndData } = useTransactionCostAndData({\n    transaction: payUiOptions.transaction,\n    account: payerAccount,\n    supportedDestinations,\n  });\n  const theme = useCustomTheme();\n  const activeWallet = useActiveWallet();\n  const sponsoredTransactionsEnabled =\n    hasSponsoredTransactionsEnabled(activeWallet);\n\n  if (!transactionCostAndData || !chainData) {\n    return <LoadingScreen />;\n  }\n\n  return (\n    <Container p=\"lg\">\n      <ModalHeader title={metadata?.name || \"Transaction\"} />\n\n      <Spacer y=\"lg\" />\n      <Container>\n        {metadata?.image ? (\n          <Img\n            client={client}\n            src={metadata?.image}\n            style={{\n              width: \"100%\",\n              borderRadius: spacing.md,\n              backgroundColor: theme.colors.tertiaryBg,\n            }}\n          />\n        ) : activeWallet ? (\n          <Container\n            flex=\"row\"\n            center=\"both\"\n            style={{\n              padding: spacing.md,\n              marginBottom: spacing.md,\n              borderRadius: spacing.md,\n              backgroundColor: theme.colors.tertiaryBg,\n            }}\n          >\n            <WalletImage\n              size={iconSize.xl}\n              id={activeWallet.id}\n              client={client}\n            />\n            <div\n              style={{\n                flexGrow: 1,\n                borderBottom: \"6px dotted\",\n                borderColor: theme.colors.secondaryIconColor,\n                marginLeft: spacing.md,\n                marginRight: spacing.md,\n              }}\n            />\n            <ChainIcon\n              client={client}\n              size={iconSize.xl}\n              chainIconUrl={chainData.icon?.url}\n            />\n          </Container>\n        ) : null}\n        <Spacer y=\"md\" />\n        <Container flex=\"row\">\n          <Container flex=\"column\" expand>\n            <Text size=\"md\" color=\"primaryText\" weight={700}>\n              {\"Price\"}\n            </Text>\n          </Container>\n          <Container expand>\n            <Container\n              flex=\"row\"\n              gap=\"xs\"\n              center=\"y\"\n              style={{ justifyContent: \"right\" }}\n            >\n              <TokenIcon\n                chain={payUiOptions.transaction.chain}\n                client={props.client}\n                size=\"sm\"\n                token={transactionCostAndData.token}\n              />\n              <Text color=\"primaryText\" size=\"md\" weight={700}>\n                {String(\n                  formatNumber(\n                    Number(\n                      toTokens(\n                        transactionCostAndData.transactionValueWei,\n                        transactionCostAndData.decimals,\n                      ),\n                    ),\n                    6,\n                  ),\n                )}{\" \"}\n                {transactionCostAndData.token.symbol}\n              </Text>\n            </Container>\n          </Container>\n        </Container>\n        <Spacer y=\"md\" />\n        <Line />\n        <Spacer y=\"md\" />\n        <Container flex=\"row\">\n          <Container flex=\"column\" expand>\n            <Text size=\"xs\" color=\"secondaryText\">\n              Gas Fees\n            </Text>\n          </Container>\n          <Container expand>\n            <Container\n              flex=\"row\"\n              gap=\"xs\"\n              center=\"y\"\n              style={{ justifyContent: \"right\" }}\n            >\n              <Text\n                color={sponsoredTransactionsEnabled ? \"success\" : \"primaryText\"}\n                size=\"xs\"\n              >\n                {sponsoredTransactionsEnabled\n                  ? \"Sponsored\"\n                  : `${String(\n                      formatNumber(\n                        Number(\n                          toTokens(\n                            transactionCostAndData.gasCostWei,\n                            chainData.nativeCurrency.decimals,\n                          ),\n                        ),\n                        6,\n                      ),\n                    )} ${chainData.nativeCurrency.symbol}`}\n              </Text>\n            </Container>\n          </Container>\n        </Container>\n        <Spacer y=\"sm\" />\n        <Container flex=\"row\">\n          <Container flex=\"column\" expand>\n            <Text size=\"xs\" color=\"secondaryText\">\n              Network\n            </Text>\n          </Container>\n          <Container expand>\n            <Container\n              flex=\"row\"\n              gap=\"xs\"\n              center=\"y\"\n              style={{ justifyContent: \"right\" }}\n            >\n              <ChainIcon\n                chainIconUrl={chainData.icon?.url}\n                size=\"xs\"\n                client={props.client}\n              />\n              <Text\n                size=\"xs\"\n                color=\"secondaryText\"\n                style={{ textAlign: \"right\" }}\n              >\n                {chainData.name}\n              </Text>\n            </Container>\n          </Container>\n        </Container>\n      </Container>\n      <Spacer y=\"xl\" />\n      {payerAccount ? (\n        <Button\n          variant=\"accent\"\n          fullWidth\n          onClick={() => {\n            let totalCostWei = transactionCostAndData.transactionValueWei;\n            if (\n              transactionCostAndData.token.address === NATIVE_TOKEN_ADDRESS &&\n              !sponsoredTransactionsEnabled\n            ) {\n              totalCostWei += transactionCostAndData.gasCostWei;\n            }\n            onContinue(\n              toTokens(totalCostWei, transactionCostAndData.decimals),\n              payUiOptions.transaction.chain,\n              transactionCostAndData.token,\n            );\n          }}\n        >\n          Choose Payment Method\n        </Button>\n      ) : (\n        <div>\n          <ConnectButton\n            {...props.connectOptions}\n            client={client}\n            theme={theme}\n            connectButton={{\n              style: {\n                width: \"100%\",\n              },\n            }}\n          />\n        </div>\n      )}\n    </Container>\n  );\n}\n","import { CheckIcon, ChevronDownIcon } from \"@radix-ui/react-icons\";\nimport type { ThirdwebClient } from \"../../../../../../client/client.js\";\nimport { shortenAddress } from \"../../../../../../utils/address.js\";\nimport type { WalletId } from \"../../../../../../wallets/wallet-types.js\";\nimport { useCustomTheme } from \"../../../../../core/design-system/CustomThemeProvider.js\";\nimport {\n  iconSize,\n  radius,\n  spacing,\n} from \"../../../../../core/design-system/index.js\";\nimport { useConnectedWallets } from \"../../../../../core/hooks/wallets/useConnectedWallets.js\";\nimport { useEnsAvatar, useEnsName } from \"../../../../../core/utils/wallet.js\";\nimport { Img } from \"../../../components/Img.js\";\nimport { WalletImage } from \"../../../components/WalletImage.js\";\nimport { Container } from \"../../../components/basic.js\";\nimport { Button } from \"../../../components/buttons.js\";\nimport { Text } from \"../../../components/text.js\";\n\nexport function WalletSelectorButton(props: {\n  address: string;\n  walletId: WalletId | undefined;\n  onClick: () => void;\n  client: ThirdwebClient;\n  containerStyle?: React.CSSProperties;\n  disableChevron?: boolean;\n  disabled?: boolean;\n  checked?: boolean;\n}) {\n  const theme = useCustomTheme();\n  return (\n    <Container\n      bg=\"tertiaryBg\"\n      style={{\n        borderRadius: radius.lg,\n        border: `1px solid ${theme.colors.borderColor}`,\n        ...props.containerStyle,\n      }}\n    >\n      <Button\n        fullWidth\n        disabled={props.disabled}\n        onClick={props.onClick}\n        variant=\"ghost\"\n        style={{\n          justifyContent: \"space-between\",\n          padding: spacing.sm,\n          backgroundColor: theme.colors.tertiaryBg,\n        }}\n        gap=\"sm\"\n      >\n        <WalletRow client={props.client} address={props.address} />\n        {!props.disableChevron && (\n          <ChevronDownIcon\n            width={iconSize.sm}\n            height={iconSize.sm}\n            style={{\n              color: theme.colors.secondaryText,\n            }}\n          />\n        )}\n\n        {props.checked && (\n          <CheckIcon width={iconSize.md} height={iconSize.md} />\n        )}\n      </Button>\n    </Container>\n  );\n}\n\nexport function WalletRow(props: {\n  client: ThirdwebClient;\n  address: string;\n  walletId?: WalletId;\n}) {\n  const { client, address } = props;\n  const connectedWallets = useConnectedWallets();\n  const wallet = connectedWallets.find(\n    (x) => x.getAccount()?.address === props.address,\n  );\n  const walletId = props.walletId || wallet?.id;\n  const ensNameQuery = useEnsName({\n    client,\n    address,\n  });\n  const addressOrENS = ensNameQuery.data || shortenAddress(address);\n  const ensAvatarQuery = useEnsAvatar({\n    client,\n    ensName: ensNameQuery.data,\n  });\n  return (\n    <Container flex=\"row\" center=\"y\" gap=\"sm\" color=\"secondaryText\">\n      {ensAvatarQuery.data ? (\n        <Img\n          src={ensAvatarQuery.data}\n          width={iconSize.md}\n          height={iconSize.md}\n          style={{\n            borderRadius: radius.sm,\n          }}\n          client={props.client}\n        />\n      ) : walletId ? (\n        <WalletImage id={walletId} size={iconSize.md} client={props.client} />\n      ) : null}\n\n      <Text size=\"sm\" color=\"primaryText\">\n        {addressOrENS || shortenAddress(props.address)}\n      </Text>\n    </Container>\n  );\n}\n","import styled from \"@emotion/styled\";\nimport { useCustomTheme } from \"../../../../../../core/design-system/CustomThemeProvider.js\";\nimport {\n  iconSize,\n  spacing,\n} from \"../../../../../../core/design-system/index.js\";\nimport { Spacer } from \"../../../../components/Spacer.js\";\nimport { Container, Line, ModalHeader } from \"../../../../components/basic.js\";\nimport { Button } from \"../../../../components/buttons.js\";\nimport { Text } from \"../../../../components/text.js\";\nimport { type CurrencyMeta, currencies } from \"./currencies.js\";\n\nexport function CurrencySelection(props: {\n  onSelect: (currency: CurrencyMeta) => void;\n  onBack: () => void;\n}) {\n  return (\n    <Container>\n      <Container p=\"lg\">\n        <ModalHeader title=\"Pay with\" onBack={props.onBack} />\n      </Container>\n\n      <Line />\n      <Spacer y=\"lg\" />\n\n      <Container flex=\"column\" gap=\"xs\" px=\"lg\">\n        {currencies.map((c) => {\n          return (\n            <SelectCurrencyButton\n              fullWidth\n              variant=\"secondary\"\n              key={c.shorthand}\n              onClick={() => props.onSelect(c)}\n              gap=\"sm\"\n            >\n              <c.icon size={iconSize.lg} />\n              <Container flex=\"column\" gap=\"xxs\">\n                <Text color=\"primaryText\">{c.shorthand}</Text>\n                <Text size=\"sm\">{c.name}</Text>\n              </Container>\n            </SelectCurrencyButton>\n          );\n        })}\n      </Container>\n\n      <Spacer y=\"lg\" />\n    </Container>\n  );\n}\n\nconst SelectCurrencyButton = /* @__PURE__ */ styled(Button)(() => {\n  const theme = useCustomTheme();\n  return {\n    background: theme.colors.tertiaryBg,\n    justifyContent: \"flex-start\",\n    gap: spacing.sm,\n    padding: spacing.sm,\n    \"&:hover\": {\n      background: theme.colors.secondaryButtonBg,\n      transform: \"scale(1.01)\",\n    },\n    transition: \"background 200ms ease, transform 150ms ease\",\n  };\n});\n","export function openOnrampPopup(link: string, theme: string) {\n  const height = 750;\n  const width = 500;\n  const top = (window.innerHeight - height) / 2;\n  const left = (window.innerWidth - width) / 2;\n\n  return window.open(\n    `${link}&theme=${theme}`,\n    \"thirdweb Pay\",\n    `width=${width}, height=${height}, top=${top}, left=${left}`,\n  );\n}\n","import { CheckCircledIcon } from \"@radix-ui/react-icons\";\nimport { useQueryClient } from \"@tanstack/react-query\";\nimport { useEffect, useRef } from \"react\";\nimport type { ThirdwebClient } from \"../../../../../../../client/client.js\";\nimport type { BuyWithFiatQuote } from \"../../../../../../../pay/buyWithFiat/getQuote.js\";\nimport type {\n  BuyWithFiatStatus,\n  ValidBuyWithFiatStatus,\n} from \"../../../../../../../pay/buyWithFiat/getStatus.js\";\nimport { isMobile } from \"../../../../../../../utils/web/isMobile.js\";\nimport { iconSize } from \"../../../../../../core/design-system/index.js\";\nimport { useBuyWithFiatStatus } from \"../../../../../../core/hooks/pay/useBuyWithFiatStatus.js\";\nimport { invalidateWalletBalance } from \"../../../../../../core/providers/invalidateWalletBalance.js\";\nimport { Spacer } from \"../../../../components/Spacer.js\";\nimport { Spinner } from \"../../../../components/Spinner.js\";\nimport { StepBar } from \"../../../../components/StepBar.js\";\nimport { Container, ModalHeader } from \"../../../../components/basic.js\";\nimport { Button } from \"../../../../components/buttons.js\";\nimport { Text } from \"../../../../components/text.js\";\nimport { AccentFailIcon } from \"../../../icons/AccentFailIcon.js\";\nimport { getBuyWithFiatStatusMeta } from \"../pay-transactions/statusMeta.js\";\nimport { OnRampTxDetailsTable } from \"./FiatTxDetailsTable.js\";\n\ntype UIStatus = \"loading\" | \"failed\" | \"completed\" | \"partialSuccess\";\n\n/**\n * Poll for \"Buy with Fiat\" status - when the on-ramp is in progress\n * - Show success screen if swap is not required and on-ramp is completed\n * - Show Failed screen if on-ramp failed\n * - call `onShowSwapFlow` if on-ramp is completed and swap is required\n */\nexport function OnrampStatusScreen(props: {\n  title: string;\n  client: ThirdwebClient;\n  onBack: () => void;\n  intentId: string;\n  hasTwoSteps: boolean;\n  openedWindow: Window | null;\n  quote: BuyWithFiatQuote;\n  onDone: () => void;\n  onShowSwapFlow: (status: BuyWithFiatStatus) => void;\n  transactionMode: boolean;\n  isEmbed: boolean;\n  onSuccess: ((status: BuyWithFiatStatus) => void) | undefined;\n}) {\n  const queryClient = useQueryClient();\n  const { openedWindow, onSuccess } = props;\n  const statusQuery = useBuyWithFiatStatus({\n    intentId: props.intentId,\n    client: props.client,\n  });\n\n  // determine UI status\n  let uiStatus: UIStatus = \"loading\";\n  if (\n    statusQuery.data?.status === \"ON_RAMP_TRANSFER_FAILED\" ||\n    statusQuery.data?.status === \"PAYMENT_FAILED\"\n  ) {\n    uiStatus = \"failed\";\n  } else if (statusQuery.data?.status === \"CRYPTO_SWAP_FALLBACK\") {\n    uiStatus = \"partialSuccess\";\n  } else if (statusQuery.data?.status === \"ON_RAMP_TRANSFER_COMPLETED\") {\n    uiStatus = \"completed\";\n  }\n\n  const purchaseCbCalled = useRef(false);\n  useEffect(() => {\n    if (purchaseCbCalled.current || !onSuccess) {\n      return;\n    }\n\n    if (statusQuery.data?.status === \"ON_RAMP_TRANSFER_COMPLETED\") {\n      purchaseCbCalled.current = true;\n      onSuccess(statusQuery.data);\n    }\n  }, [onSuccess, statusQuery.data]);\n\n  // close the onramp popup if onramp is completed\n  useEffect(() => {\n    if (!openedWindow || !statusQuery.data) {\n      return;\n    }\n\n    if (\n      statusQuery.data?.status === \"CRYPTO_SWAP_REQUIRED\" ||\n      statusQuery.data?.status === \"ON_RAMP_TRANSFER_COMPLETED\"\n    ) {\n      openedWindow.close();\n    }\n  }, [statusQuery.data, openedWindow]);\n\n  // invalidate wallet balance when onramp is completed\n  const invalidatedBalance = useRef(false);\n  useEffect(() => {\n    if (\n      !invalidatedBalance.current &&\n      statusQuery.data?.status === \"ON_RAMP_TRANSFER_COMPLETED\"\n    ) {\n      invalidatedBalance.current = true;\n      invalidateWalletBalance(queryClient);\n    }\n  }, [statusQuery.data, queryClient]);\n\n  // show swap flow\n  useEffect(() => {\n    if (statusQuery.data?.status === \"CRYPTO_SWAP_REQUIRED\") {\n      props.onShowSwapFlow(statusQuery.data);\n    }\n  }, [statusQuery.data, props.onShowSwapFlow]);\n\n  return (\n    <Container p=\"lg\">\n      <ModalHeader title={props.title} onBack={props.onBack} />\n\n      {props.hasTwoSteps && (\n        <>\n          <Spacer y=\"lg\" />\n          <StepBar steps={2} currentStep={1} />\n          <Spacer y=\"sm\" />\n          <Text size=\"xs\">\n            Step 1 of 2 - Buying {props.quote.onRampToken.token.symbol} with{\" \"}\n            {props.quote.fromCurrencyWithFees.currencySymbol}\n          </Text>\n        </>\n      )}\n\n      <OnrampStatusScreenUI\n        uiStatus={uiStatus}\n        onDone={props.onDone}\n        fiatStatus={statusQuery.data}\n        client={props.client}\n        transactionMode={props.transactionMode}\n        quote={props.quote}\n        isEmbed={props.isEmbed}\n      />\n    </Container>\n  );\n}\n\nfunction OnrampStatusScreenUI(props: {\n  uiStatus: UIStatus;\n  fiatStatus?: BuyWithFiatStatus;\n  onDone: () => void;\n  client: ThirdwebClient;\n  transactionMode: boolean;\n  isEmbed: boolean;\n  quote: BuyWithFiatQuote;\n}) {\n  const { uiStatus } = props;\n\n  const statusMeta = props.fiatStatus\n    ? getBuyWithFiatStatusMeta(props.fiatStatus)\n    : undefined;\n\n  const fiatStatus: ValidBuyWithFiatStatus | undefined =\n    props.fiatStatus && props.fiatStatus.status !== \"NOT_FOUND\"\n      ? props.fiatStatus\n      : undefined;\n\n  const onRampTokenQuote = props.quote.onRampToken;\n\n  const txDetails = (\n    <OnRampTxDetailsTable\n      client={props.client}\n      token={\n        fiatStatus?.source // source tx is onRamp token\n          ? {\n              chainId: fiatStatus.source.token.chainId,\n              address: fiatStatus.source.token.tokenAddress,\n              symbol: fiatStatus.source.token.symbol || \"\",\n              amount: fiatStatus.source.amount,\n            }\n          : {\n              chainId: onRampTokenQuote.token.chainId,\n              address: onRampTokenQuote.token.tokenAddress,\n              symbol: onRampTokenQuote.token.symbol,\n              amount: onRampTokenQuote.amount,\n            }\n      }\n      fiat={{\n        amount: props.quote.fromCurrencyWithFees.amount,\n        currencySymbol: props.quote.fromCurrencyWithFees.currencySymbol,\n      }}\n      statusMeta={\n        fiatStatus?.source && statusMeta\n          ? {\n              color: statusMeta?.color,\n              text: statusMeta?.status,\n              txHash: fiatStatus.source.transactionHash,\n            }\n          : undefined\n      }\n    />\n  );\n\n  return (\n    <Container>\n      <Spacer y=\"xl\" />\n\n      {uiStatus === \"loading\" && (\n        <>\n          <Spacer y=\"md\" />\n          <Container flex=\"row\" center=\"x\">\n            <Spinner size=\"xxl\" color=\"accentText\" />\n          </Container>\n          <Spacer y=\"md\" />\n          <Text color=\"primaryText\" size=\"lg\" center>\n            Buy Pending\n          </Text>\n          <Spacer y=\"sm\" />\n          {!isMobile() && <Text center>Complete the purchase in popup</Text>}\n          <Spacer y=\"xxl\" />\n          {txDetails}\n        </>\n      )}\n\n      {uiStatus === \"failed\" && (\n        <>\n          <Spacer y=\"md\" />\n          <Container flex=\"row\" center=\"x\">\n            <AccentFailIcon size={iconSize[\"3xl\"]} />\n          </Container>\n          <Spacer y=\"lg\" />\n          <Text color=\"primaryText\" size=\"lg\" center>\n            Transaction Failed\n          </Text>\n          <Spacer y=\"xxl\" />\n          {txDetails}\n        </>\n      )}\n\n      {uiStatus === \"completed\" && (\n        <>\n          <Spacer y=\"md\" />\n          <Container flex=\"row\" center=\"x\" color=\"success\">\n            <CheckCircledIcon\n              width={iconSize[\"3xl\"]}\n              height={iconSize[\"3xl\"]}\n            />\n          </Container>\n          <Spacer y=\"md\" />\n          <Text color=\"primaryText\" size=\"lg\" center>\n            Buy Complete\n          </Text>\n          {props.fiatStatus && props.fiatStatus.status !== \"NOT_FOUND\" && (\n            <>\n              <Spacer y=\"xxl\" />\n              {txDetails}\n              <Spacer y=\"sm\" />\n            </>\n          )}\n\n          {!props.isEmbed && (\n            <Button variant=\"accent\" fullWidth onClick={props.onDone}>\n              {props.transactionMode ? \"Continue Transaction\" : \"Done\"}\n            </Button>\n          )}\n        </>\n      )}\n    </Container>\n  );\n}\n","import { useCallback, useState } from \"react\";\nimport type { ThirdwebClient } from \"../../../../../../../client/client.js\";\nimport type { BuyWithFiatQuote } from \"../../../../../../../pay/buyWithFiat/getQuote.js\";\nimport {\n  type BuyWithFiatStatus,\n  getBuyWithFiatStatus,\n} from \"../../../../../../../pay/buyWithFiat/getStatus.js\";\nimport { isSwapRequiredPostOnramp } from \"../../../../../../../pay/buyWithFiat/isSwapRequiredPostOnramp.js\";\nimport { openOnrampPopup } from \"../openOnRamppopup.js\";\nimport { addPendingTx } from \"../swap/pendingSwapTx.js\";\nimport type { PayerInfo } from \"../types.js\";\nimport { OnrampStatusScreen } from \"./FiatStatusScreen.js\";\nimport { FiatSteps, fiatQuoteToPartialQuote } from \"./FiatSteps.js\";\nimport { PostOnRampSwapFlow } from \"./PostOnRampSwapFlow.js\";\n\n// 2 possible flows\n\n// If a Swap is required after doing onramp\n// 1. show the 2 steps ui with step 1 highlighted, on continue button click:\n// 2. open provider window, show onramp status screen, on onramp success:\n// 3. show the 2 steps ui with step 2 highlighted, on continue button click:\n// 4. show swap flow\n\n//  If a Swap is not required after doing onramp\n//  - window will already be opened before this component is mounted and `openedWindow` prop will be set, show onramp status screen\n\ntype Screen =\n  | {\n      id: \"step-1\";\n    }\n  | {\n      id: \"onramp-status\";\n    }\n  | {\n      id: \"postonramp-swap\";\n      data: BuyWithFiatStatus;\n    }\n  | {\n      id: \"step-2\";\n    };\n\nexport function FiatFlow(props: {\n  title: string;\n  quote: BuyWithFiatQuote;\n  onBack: () => void;\n  client: ThirdwebClient;\n  testMode: boolean;\n  theme: \"light\" | \"dark\";\n  openedWindow: Window | null;\n  onDone: () => void;\n  transactionMode: boolean;\n  isEmbed: boolean;\n  payer: PayerInfo;\n  onSuccess: (status: BuyWithFiatStatus) => void;\n}) {\n  const hasTwoSteps = isSwapRequiredPostOnramp(props.quote);\n  const [screen, setScreen] = useState<Screen>(\n    hasTwoSteps\n      ? {\n          id: \"step-1\",\n        }\n      : {\n          id: \"onramp-status\",\n        },\n  );\n\n  const [popupWindow, setPopupWindow] = useState<Window | null>(\n    props.openedWindow,\n  );\n\n  const onPostOnrampSuccess = useCallback(() => {\n    // report the status of fiat status instead of post onramp swap status when post onramp swap is successful\n    getBuyWithFiatStatus({\n      intentId: props.quote.intentId,\n      client: props.client,\n    }).then((status) => {\n      props.onSuccess(status);\n    });\n  }, [props.onSuccess, props.quote.intentId, props.client]);\n\n  if (screen.id === \"step-1\") {\n    return (\n      <FiatSteps\n        title={props.title}\n        client={props.client}\n        onBack={props.onBack}\n        partialQuote={fiatQuoteToPartialQuote(props.quote)}\n        step={1}\n        onContinue={() => {\n          const popup = openOnrampPopup(props.quote.onRampLink, props.theme);\n          addPendingTx({\n            type: \"fiat\",\n            intentId: props.quote.intentId,\n          });\n          setPopupWindow(popup);\n          setScreen({ id: \"onramp-status\" });\n        }}\n      />\n    );\n  }\n\n  if (screen.id === \"onramp-status\") {\n    return (\n      <OnrampStatusScreen\n        title={props.title}\n        client={props.client}\n        intentId={props.quote.intentId}\n        onBack={props.onBack}\n        hasTwoSteps={hasTwoSteps}\n        openedWindow={popupWindow}\n        quote={props.quote}\n        onDone={props.onDone}\n        onShowSwapFlow={(_status) => {\n          setScreen({ id: \"postonramp-swap\", data: _status });\n        }}\n        transactionMode={props.transactionMode}\n        isEmbed={props.isEmbed}\n        onSuccess={props.onSuccess}\n      />\n    );\n  }\n\n  if (screen.id === \"postonramp-swap\") {\n    return (\n      <PostOnRampSwapFlow\n        title={props.title}\n        status={screen.data}\n        quote={fiatQuoteToPartialQuote(props.quote)}\n        client={props.client}\n        onBack={props.onBack}\n        onDone={props.onDone}\n        onSwapFlowStarted={() => {\n          // no op\n        }}\n        transactionMode={props.transactionMode}\n        isEmbed={props.isEmbed}\n        payer={props.payer}\n        onSuccess={onPostOnrampSuccess}\n      />\n    );\n  }\n\n  // never\n  return null;\n}\n","import { defineChain } from \"../utils.js\";\n\n/**\n * @chain\n */\nexport const polygon = /*@__PURE__*/ defineChain({\n  id: 137,\n  name: \"Polygon\",\n  nativeCurrency: { name: \"MATIC\", symbol: \"MATIC\", decimals: 18 },\n  blockExplorers: [\n    {\n      name: \"PolygonScan\",\n      url: \"https://polygonscan.com\",\n      apiUrl: \"https://api.polygonscan.com/api\",\n    },\n  ],\n});\n","import styled from \"@emotion/styled\";\nimport { ChevronDownIcon } from \"@radix-ui/react-icons\";\nimport type { Chain } from \"../../../../../../../chains/types.js\";\nimport type { ThirdwebClient } from \"../../../../../../../client/client.js\";\nimport { useCustomTheme } from \"../../../../../../core/design-system/CustomThemeProvider.js\";\nimport {\n  fontSize,\n  iconSize,\n  spacing,\n} from \"../../../../../../core/design-system/index.js\";\nimport { useChainName } from \"../../../../../../core/hooks/others/useChainQuery.js\";\nimport { Skeleton } from \"../../../../components/Skeleton.js\";\nimport { Spacer } from \"../../../../components/Spacer.js\";\nimport { TokenIcon } from \"../../../../components/TokenIcon.js\";\nimport { Container } from \"../../../../components/basic.js\";\nimport { Button } from \"../../../../components/buttons.js\";\nimport { Input } from \"../../../../components/formElements.js\";\nimport { Text } from \"../../../../components/text.js\";\nimport { TokenSymbol } from \"../../../../components/token/TokenSymbol.js\";\nimport type { ERC20OrNativeToken } from \"../../nativeToken.js\";\nimport { getBuyTokenAmountFontSize } from \"../utils.js\";\n\n/**\n * @internal\n */\nexport function BuyTokenInput(props: {\n  token: ERC20OrNativeToken;\n  chain: Chain;\n  value: string;\n  onChange: (value: string) => void;\n  onSelectToken: () => void;\n  client: ThirdwebClient;\n  hideTokenSelector?: boolean;\n  freezeAmount?: boolean;\n  freezeChainAndToken?: boolean;\n}) {\n  const { name } = useChainName(props.chain);\n\n  const getWidth = () => {\n    let chars = props.value.replace(\".\", \"\").length;\n    const hasDot = props.value.includes(\".\");\n    if (hasDot) {\n      chars += 0.3;\n    }\n    return `calc(${`${Math.max(1, chars)}ch`} + 6px)`;\n  };\n\n  return (\n    <Container>\n      {/* Input */}\n\n      {/* biome-ignore lint/a11y/useKeyWithClickEvents: <explanation> */}\n      <div\n        onClick={(e) => {\n          e.currentTarget.querySelector(\"input\")?.focus();\n        }}\n      >\n        <Container\n          flex=\"row\"\n          center=\"both\"\n          gap=\"xs\"\n          style={{\n            flexWrap: \"nowrap\",\n          }}\n        >\n          <Input\n            variant=\"outline\"\n            pattern=\"^[0-9]*[.,]?[0-9]*$\"\n            inputMode=\"decimal\"\n            tabIndex={-1}\n            placeholder=\"0\"\n            type=\"text\"\n            data-placeholder={props.value === \"\"}\n            value={props.value || \"0\"}\n            disabled={props.freezeAmount}\n            onClick={(e) => {\n              // put cursor at the end of the input\n              if (props.value === \"\") {\n                e.currentTarget.setSelectionRange(\n                  e.currentTarget.value.length,\n                  e.currentTarget.value.length,\n                );\n              }\n            }}\n            onChange={(e) => {\n              let value = e.target.value;\n\n              if (value.startsWith(\".\")) {\n                value = `0${value}`;\n              }\n\n              const numValue = Number(value);\n              if (Number.isNaN(numValue)) {\n                return;\n              }\n\n              if (value.startsWith(\"0\") && !value.startsWith(\"0.\")) {\n                props.onChange(value.slice(1));\n              } else {\n                props.onChange(value);\n              }\n            }}\n            style={{\n              border: \"none\",\n              fontSize: getBuyTokenAmountFontSize(props.value),\n              boxShadow: \"none\",\n              borderRadius: \"0\",\n              padding: \"0\",\n              paddingBlock: \"2px\",\n              fontWeight: 600,\n              textAlign: \"right\",\n              width: getWidth(),\n              maxWidth: \"calc(100% - 100px)\",\n            }}\n          />\n          <TokenSymbol\n            token={props.token}\n            chain={props.chain}\n            size=\"lg\"\n            color=\"secondaryText\"\n          />\n        </Container>\n      </div>\n\n      {!props.hideTokenSelector && (\n        <>\n          <Spacer y=\"sm\" />\n\n          {/* Token / Chain selector */}\n          <Container flex=\"row\" center=\"x\">\n            <TokenButton\n              variant=\"secondary\"\n              fullWidth\n              style={{\n                fontSize: fontSize.sm,\n              }}\n              gap=\"xxs\"\n              onClick={props.onSelectToken}\n              disabled={props.freezeChainAndToken}\n            >\n              <Container flex=\"row\" center=\"y\" gap=\"sm\">\n                <TokenIcon\n                  token={props.token}\n                  chain={props.chain}\n                  size=\"md\"\n                  client={props.client}\n                />\n\n                <Container\n                  flex=\"column\"\n                  style={{\n                    gap: \"4px\",\n                  }}\n                >\n                  {/* Token Symbol */}\n                  <TokenSymbol\n                    token={props.token}\n                    chain={props.chain}\n                    size=\"sm\"\n                  />\n\n                  {/* Network Name */}\n                  {name ? (\n                    <Text size=\"xs\" color=\"secondaryText\">\n                      {name}\n                    </Text>\n                  ) : (\n                    <Skeleton width=\"90px\" height={fontSize.xs} />\n                  )}\n                </Container>\n              </Container>\n\n              <ChevronDownIcon\n                width={iconSize.sm}\n                height={iconSize.sm}\n                style={{\n                  marginLeft: \"auto\",\n                }}\n              />\n            </TokenButton>\n          </Container>\n        </>\n      )}\n    </Container>\n  );\n}\n\nconst TokenButton = /* @__PURE__ */ styled(Button)(() => {\n  const theme = useCustomTheme();\n  return {\n    background: theme.colors.tertiaryBg,\n    border: `1px solid ${theme.colors.borderColor}`,\n    justifyContent: \"flex-start\",\n    transition: \"background 0.3s\",\n    padding: spacing.sm,\n  };\n});\n","export function getBuyTokenAmountFontSize(value: string) {\n  return value.length > 10 ? \"26px\" : value.length > 6 ? \"34px\" : \"50px\";\n}\n","import type { IconFC } from \"./types.js\";\n\n/**\n * @internal\n */\nexport const GenericWalletIcon: IconFC = (props) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 18 18\"\n      width={props.size}\n      height={props.size}\n      role=\"presentation\"\n    >\n      <path\n        fill=\"currentColor\"\n        d=\"M15.6 4.6H1.85v-.55l12.1-.968v.968h1.65V2.4c0-1.21-.98-2.059-2.177-1.888L2.378 2.089C1.18 2.26.2 3.39.2 4.6v11a2.2 2.2 0 002.2 2.2h13.2a2.2 2.2 0 002.2-2.2V6.8a2.2 2.2 0 00-2.2-2.2zm-1.65 7.707a1.65 1.65 0 01-.63-3.176 1.65 1.65 0 11.63 3.176z\"\n      />\n    </svg>\n  );\n};\n","import { ChevronDownIcon } from \"@radix-ui/react-icons\";\nimport type { Chain } from \"../../../../../../../chains/types.js\";\nimport type { ThirdwebClient } from \"../../../../../../../client/client.js\";\nimport { formatNumber } from \"../../../../../../../utils/formatNumber.js\";\nimport type { Account } from \"../../../../../../../wallets/interfaces/wallet.js\";\nimport {\n  fontSize,\n  iconSize,\n  radius,\n  spacing,\n} from \"../../../../../../core/design-system/index.js\";\nimport { useChainName } from \"../../../../../../core/hooks/others/useChainQuery.js\";\nimport { useWalletBalance } from \"../../../../../../core/hooks/others/useWalletBalance.js\";\nimport type { TokenInfo } from \"../../../../../../core/utils/defaultTokens.js\";\nimport { Skeleton } from \"../../../../components/Skeleton.js\";\nimport { Container } from \"../../../../components/basic.js\";\nimport { Button } from \"../../../../components/buttons.js\";\nimport { Text } from \"../../../../components/text.js\";\nimport { TokenSymbol } from \"../../../../components/token/TokenSymbol.js\";\nimport { GenericWalletIcon } from \"../../../icons/GenericWalletIcon.js\";\nimport { formatTokenBalance } from \"../../formatTokenBalance.js\";\nimport { type NativeToken, isNativeToken } from \"../../nativeToken.js\";\nimport { PayTokenIcon } from \"../PayTokenIcon.js\";\n\n/**\n * Shows an amount \"value\" and renders the selected token and chain\n * It also renders the buttons to select the token and chain\n * It also renders the balance of active wallet for the selected token in selected chain\n * @internal\n */\nexport function PayWithCrypto(props: {\n  value: string;\n  onSelectToken: () => void;\n  chain: Chain;\n  token: TokenInfo | NativeToken;\n  isLoading: boolean;\n  client: ThirdwebClient;\n  freezeChainAndTokenSelection?: boolean;\n  payerAccount: Account;\n  swapRequired: boolean;\n}) {\n  const { name } = useChainName(props.chain);\n\n  const balanceQuery = useWalletBalance({\n    address: props.payerAccount.address,\n    chain: props.chain,\n    tokenAddress: isNativeToken(props.token) ? undefined : props.token.address,\n    client: props.client,\n  });\n\n  return (\n    <Container\n      bg=\"tertiaryBg\"\n      borderColor=\"borderColor\"\n      flex=\"row\"\n      style={{\n        borderWidth: \"1px\",\n        borderTopWidth: 0,\n        borderStyle: \"solid\",\n        flexWrap: \"nowrap\",\n        justifyContent: \"space-between\",\n        minHeight: \"64px\",\n        alignItems: \"center\",\n        ...(props.swapRequired\n          ? { borderBottom: \"none\" }\n          : {\n              borderBottomLeftRadius: radius.md,\n              borderBottomRightRadius: radius.md,\n            }),\n      }}\n    >\n      {/* Left */}\n      <Button\n        variant=\"ghost\"\n        onClick={props.onSelectToken}\n        gap=\"sm\"\n        style={{\n          paddingInline: spacing.sm,\n          paddingBlock: spacing.sm,\n          minWidth: \"50%\",\n          justifyContent: \"flex-start\",\n        }}\n        disabled={props.freezeChainAndTokenSelection}\n      >\n        <PayTokenIcon\n          token={props.token}\n          chain={props.chain}\n          size=\"md\"\n          client={props.client}\n        />\n        <Container flex=\"column\" gap=\"3xs\">\n          <Container flex=\"row\" gap=\"xs\" center=\"y\" color=\"primaryText\">\n            <TokenSymbol token={props.token} chain={props.chain} size=\"sm\" />\n            <ChevronDownIcon width={iconSize.sm} height={iconSize.sm} />\n          </Container>\n          {name ? (\n            <Text size=\"xs\">{name}</Text>\n          ) : (\n            <Skeleton width=\"90px\" height={fontSize.xs} />\n          )}\n        </Container>\n      </Button>\n\n      {/* Right */}\n      <div\n        style={{\n          flexGrow: 1,\n          flexShrink: 1,\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"flex-end\",\n          gap: spacing.xxs,\n          overflow: \"hidden\",\n          textOverflow: \"ellipsis\",\n          whiteSpace: \"nowrap\",\n          justifyContent: \"center\",\n          paddingRight: spacing.sm,\n        }}\n      >\n        {props.isLoading ? (\n          <Skeleton width=\"120px\" height={fontSize.md} color=\"borderColor\" />\n        ) : (\n          <Text\n            size=\"md\"\n            color={props.value ? \"primaryText\" : \"secondaryText\"}\n            style={{}}\n          >\n            {formatNumber(Number(props.value), 6) || \"\"}\n          </Text>\n        )}\n\n        <Container flex=\"row\" gap=\"xxs\" center=\"y\" color=\"secondaryText\">\n          <GenericWalletIcon size={fontSize.xs} />\n          {balanceQuery.data ? (\n            <Text size=\"xs\" color=\"secondaryText\" weight={500}>\n              {formatTokenBalance(balanceQuery.data, false)}\n            </Text>\n          ) : (\n            <Skeleton width=\"70px\" height={fontSize.xs} />\n          )}\n        </Container>\n      </div>\n    </Container>\n  );\n}\n","import { CheckCircledIcon, CrossCircledIcon } from \"@radix-ui/react-icons\";\nimport { useState } from \"react\";\nimport type { Chain } from \"../../../../../../../chains/types.js\";\nimport type { ThirdwebClient } from \"../../../../../../../client/client.js\";\nimport { NATIVE_TOKEN_ADDRESS } from \"../../../../../../../constants/addresses.js\";\nimport { getContract } from \"../../../../../../../contract/contract.js\";\nimport { transfer } from \"../../../../../../../extensions/erc20/write/transfer.js\";\nimport { sendAndConfirmTransaction } from \"../../../../../../../transaction/actions/send-and-confirm-transaction.js\";\nimport { prepareTransaction } from \"../../../../../../../transaction/prepare-transaction.js\";\nimport { toWei } from \"../../../../../../../utils/units.js\";\nimport { iconSize } from \"../../../../../../core/design-system/index.js\";\nimport { useChainSymbol } from \"../../../../../../core/hooks/others/useChainQuery.js\";\nimport { Spacer } from \"../../../../components/Spacer.js\";\nimport { Spinner } from \"../../../../components/Spinner.js\";\nimport { StepBar } from \"../../../../components/StepBar.js\";\nimport { SwitchNetworkButton } from \"../../../../components/SwitchNetwork.js\";\nimport { Container, Line, ModalHeader } from \"../../../../components/basic.js\";\nimport { Button } from \"../../../../components/buttons.js\";\nimport { Text } from \"../../../../components/text.js\";\nimport { type ERC20OrNativeToken, isNativeToken } from \"../../nativeToken.js\";\nimport { Step } from \"../Stepper.js\";\nimport { WalletRow } from \"../WalletSelectorButton.js\";\nimport { TokenInfoRow } from \"../pay-transactions/TokenInfoRow.js\";\nimport type { PayerInfo } from \"../types.js\";\nimport { ConnectorLine } from \"./ConfirmationScreen.js\";\n\ntype TrasnferFlowProps = {\n  title: string;\n  onBack?: () => void;\n  payer: PayerInfo;\n  receiverAddress: string;\n  client: ThirdwebClient;\n  onDone: () => void;\n  chain: Chain;\n  token: ERC20OrNativeToken;\n  tokenAmount: string;\n  transactionMode?: boolean;\n};\n\nexport function TransferFlow(props: TrasnferFlowProps) {\n  const {\n    title,\n    onBack,\n    receiverAddress,\n    client,\n    payer,\n    onDone,\n    chain,\n    token,\n    tokenAmount,\n    transactionMode,\n  } = props;\n  const [step, setStep] = useState<\"transfer\" | \"execute\">(\"transfer\");\n  const [status, setStatus] = useState<\"idle\" | \"pending\" | \"error\" | \"done\">(\n    \"idle\",\n  );\n  const { symbol } = useChainSymbol(chain);\n\n  return (\n    <Container p=\"lg\">\n      <ModalHeader title={title} onBack={onBack} />\n      <Spacer y=\"xl\" />\n\n      {transactionMode && (\n        <>\n          <StepBar steps={2} currentStep={step === \"transfer\" ? 1 : 2} />\n          <Spacer y=\"sm\" />\n          <Text size=\"sm\">\n            {step === \"transfer\"\n              ? \"Step 1 of 2 - Transfer funds\"\n              : \"Step 2 of 2 - Finalize transaction\"}\n          </Text>\n          <Spacer y=\"xl\" />\n        </>\n      )}\n\n      {/* Sender Address */}\n      <Container\n        flex=\"row\"\n        center=\"y\"\n        style={{\n          justifyContent: \"space-between\",\n        }}\n      >\n        <Text size=\"sm\">From</Text>\n        <WalletRow address={payer.account.address} client={client} />\n      </Container>\n\n      <Spacer y=\"md\" />\n      <Line />\n      <Spacer y=\"md\" />\n\n      {/* Receiver Address */}\n      <Container\n        flex=\"row\"\n        center=\"y\"\n        style={{\n          justifyContent: \"space-between\",\n        }}\n      >\n        <Text size=\"sm\">To</Text>\n        <WalletRow address={receiverAddress} client={client} />\n      </Container>\n\n      <Spacer y=\"md\" />\n      <Line />\n      <Spacer y=\"md\" />\n\n      {/* Token Info */}\n      <TokenInfoRow\n        chainId={chain.id}\n        client={client}\n        label={\"Amount\"}\n        tokenAmount={tokenAmount}\n        tokenSymbol={isNativeToken(token) ? symbol || \"\" : token.symbol}\n        tokenAddress={\n          isNativeToken(token) ? NATIVE_TOKEN_ADDRESS : token.address\n        }\n      />\n\n      <Spacer y=\"lg\" />\n\n      {transactionMode && (\n        <>\n          <Spacer y=\"sm\" />\n          <Container\n            gap=\"sm\"\n            flex=\"row\"\n            style={{\n              justifyContent: \"space-between\",\n            }}\n            center=\"y\"\n            color=\"accentText\"\n          >\n            <Step\n              isDone={step === \"execute\"}\n              isActive={step === \"transfer\"}\n              label={step === \"transfer\" ? \"Transfer\" : \"Done\"}\n            />\n            <ConnectorLine />\n            <Step\n              isDone={false}\n              label=\"Finalize\"\n              isActive={step === \"execute\"}\n            />\n          </Container>\n          <Spacer y=\"lg\" />\n        </>\n      )}\n\n      {status === \"error\" && (\n        <>\n          <Container flex=\"row\" gap=\"xs\" center=\"both\" color=\"danger\">\n            <CrossCircledIcon width={iconSize.sm} height={iconSize.sm} />\n            <Text color=\"danger\" size=\"sm\">\n              {step === \"transfer\" ? \"Failed to Transfer\" : \"Failed to Execute\"}\n            </Text>\n          </Container>\n          <Spacer y=\"md\" />\n        </>\n      )}\n\n      {!transactionMode && step === \"execute\" && status === \"done\" && (\n        <>\n          <Container flex=\"row\" gap=\"xs\" center=\"both\" color=\"success\">\n            <CheckCircledIcon width={iconSize.sm} height={iconSize.sm} />\n            <Text color=\"success\" size=\"sm\">\n              {\"Payment completed\"}\n            </Text>\n          </Container>\n          <Spacer y=\"md\" />\n        </>\n      )}\n\n      {/* Execute */}\n      {payer.chain.id !== chain.id ? (\n        <SwitchNetworkButton\n          fullWidth\n          variant=\"accent\"\n          switchChain={async () => {\n            await props.payer.wallet.switchChain(chain);\n          }}\n        />\n      ) : (\n        <Button\n          variant=\"accent\"\n          fullWidth\n          disabled={status === \"pending\"}\n          onClick={async () => {\n            if (step === \"execute\") {\n              onDone();\n              return;\n            }\n\n            try {\n              setStatus(\"pending\");\n\n              const transaction = isNativeToken(token)\n                ? prepareTransaction({\n                    client,\n                    chain,\n                    to: receiverAddress,\n                    value: toWei(tokenAmount),\n                  })\n                : transfer({\n                    contract: getContract({\n                      address: token.address,\n                      chain: chain,\n                      client: client,\n                    }),\n                    to: receiverAddress,\n                    amount: tokenAmount,\n                  });\n\n              await sendAndConfirmTransaction({\n                account: props.payer.account,\n                transaction,\n              });\n\n              setStep(\"execute\");\n              if (transactionMode) {\n                setStatus(\"idle\");\n              } else {\n                setStatus(\"done\");\n              }\n            } catch (e) {\n              console.error(e);\n              setStatus(\"error\");\n            }\n          }}\n          gap=\"xs\"\n        >\n          {step === \"execute\" && (status === \"done\" ? \"Done\" : \"Continue\")}\n          {step === \"transfer\" &&\n            (status === \"pending\" ? \"Confirming\" : \"Confirm\")}\n          {status === \"pending\" && (\n            <Spinner size=\"sm\" color=\"accentButtonText\" />\n          )}\n        </Button>\n      )}\n    </Container>\n  );\n}\n","import type { TransactionReceipt } from \"../types.js\";\nimport {\n  type SendTransactionOptions,\n  sendTransaction,\n} from \"./send-transaction.js\";\nimport { waitForReceipt } from \"./wait-for-tx-receipt.js\";\n\n/**\n * Sends a transaction using the provided wallet.\n * @param options - The options for sending the transaction.\n * @returns A promise that resolves to the confirmed transaction receipt.\n * @throws An error if the wallet is not connected.\n * @transaction\n * @example\n *\n * ### Basic usage\n * ```ts\n * import { sendAndConfirmTransaction } from \"thirdweb\";\n *\n * const transactionReceipt = await sendAndConfirmTransaction({\n *  account,\n *  transaction\n * });\n * ```\n *\n * ### Gasless usage with [thirdweb Engine](https://portal.thirdweb.com/engine)\n * ```ts\n * const transactionReceipt = await sendAndConfirmTransaction({\n *  account,\n *  transaction,\n *  gasless: {\n *    provider: \"engine\",\n *    relayerUrl: \"https://thirdweb.engine-***.thirdweb.com/relayer/***\",\n *    relayerForwarderAddress: \"0x...\",\n *  }\n * });\n * ```\n */\nexport async function sendAndConfirmTransaction(\n  options: SendTransactionOptions,\n): Promise<TransactionReceipt> {\n  const submittedTx = await sendTransaction(options);\n  return waitForReceipt(submittedTx);\n}\n","import { PlusIcon } from \"@radix-ui/react-icons\";\nimport type { ThirdwebClient } from \"../../../../../../../client/client.js\";\nimport type { Wallet } from \"../../../../../../../wallets/interfaces/wallet.js\";\nimport { useCustomTheme } from \"../../../../../../core/design-system/CustomThemeProvider.js\";\nimport {\n  iconSize,\n  radius,\n  spacing,\n} from \"../../../../../../core/design-system/index.js\";\nimport { useConnectedWallets } from \"../../../../../../core/hooks/wallets/useConnectedWallets.js\";\nimport { Spacer } from \"../../../../components/Spacer.js\";\nimport { Container } from \"../../../../components/basic.js\";\nimport { Button } from \"../../../../components/buttons.js\";\nimport { Text } from \"../../../../components/text.js\";\nimport { WalletSelectorButton } from \"../WalletSelectorButton.js\";\n\nexport function WalletSwitcherDrawerContent(props: {\n  client: ThirdwebClient;\n  showAllWallets: boolean;\n  wallets: Wallet[] | undefined;\n  onSelect: (wallet: Wallet) => void;\n  onBack: () => void;\n  onConnect: () => void;\n  selectedAddress: string;\n}) {\n  const theme = useCustomTheme();\n  const connectedWallets = useConnectedWallets();\n\n  // if all wallets are connected and showAll wallets is disabled, hide the connect button\n  const hideConnectButton =\n    !props.showAllWallets &&\n    props.wallets?.every((w) => connectedWallets.includes(w));\n\n  return (\n    <Container>\n      <Container flex=\"column\" gap=\"xs\">\n        {connectedWallets.map((w) => {\n          const address = w.getAccount()?.address;\n          return (\n            <WalletSelectorButton\n              key={w.id}\n              walletId={w.id}\n              client={props.client}\n              address={address || \"\"}\n              onClick={() => {\n                props.onSelect(w);\n                props.onBack();\n              }}\n              disableChevron\n              checked={false}\n            />\n          );\n        })}\n        {!hideConnectButton && (\n          <Button\n            variant=\"secondary\"\n            fullWidth\n            onClick={props.onConnect}\n            gap=\"xs\"\n            bg=\"tertiaryBg\"\n            style={{\n              borderRadius: radius.lg,\n              border: `1px solid ${theme.colors.borderColor}`,\n              padding: spacing.sm,\n            }}\n          >\n            <Container flex=\"row\" gap=\"sm\" center=\"y\" expand>\n              <PlusIcon width={iconSize.md} height={iconSize.md} />\n              <Text size=\"sm\" color=\"primaryText\">\n                Add Another Wallet\n              </Text>\n            </Container>\n          </Button>\n        )}\n      </Container>\n      <Spacer y=\"sm\" />\n    </Container>\n  );\n}\n","import { IdCardIcon } from \"@radix-ui/react-icons\";\nimport { useCallback, useMemo, useState } from \"react\";\nimport type { Chain } from \"../../../../../../chains/types.js\";\nimport type { ThirdwebClient } from \"../../../../../../client/client.js\";\nimport { NATIVE_TOKEN_ADDRESS } from \"../../../../../../constants/addresses.js\";\nimport type { GetBuyWithCryptoQuoteParams } from \"../../../../../../pay/buyWithCrypto/getQuote.js\";\nimport type { BuyWithCryptoStatus } from \"../../../../../../pay/buyWithCrypto/getStatus.js\";\nimport type { BuyWithFiatStatus } from \"../../../../../../pay/buyWithFiat/getStatus.js\";\nimport { isSwapRequiredPostOnramp } from \"../../../../../../pay/buyWithFiat/isSwapRequiredPostOnramp.js\";\nimport { formatNumber } from \"../../../../../../utils/formatNumber.js\";\nimport type { Account } from \"../../../../../../wallets/interfaces/wallet.js\";\nimport {\n  type Theme,\n  iconSize,\n  spacing,\n} from \"../../../../../core/design-system/index.js\";\nimport type {\n  FundWalletOptions,\n  PayUIOptions,\n} from \"../../../../../core/hooks/connection/ConnectButtonProps.js\";\nimport { useWalletBalance } from \"../../../../../core/hooks/others/useWalletBalance.js\";\nimport { useBuyWithCryptoQuote } from \"../../../../../core/hooks/pay/useBuyWithCryptoQuote.js\";\nimport { useBuyWithFiatQuote } from \"../../../../../core/hooks/pay/useBuyWithFiatQuote.js\";\nimport { useActiveAccount } from \"../../../../../core/hooks/wallets/useActiveAccount.js\";\nimport type { SupportedTokens } from \"../../../../../core/utils/defaultTokens.js\";\nimport { LoadingScreen } from \"../../../../wallets/shared/LoadingScreen.js\";\nimport type { PayEmbedConnectOptions } from \"../../../PayEmbed.js\";\nimport { ChainName } from \"../../../components/ChainName.js\";\nimport {\n  Drawer,\n  DrawerOverlay,\n  useDrawer,\n} from \"../../../components/Drawer.js\";\nimport { Spacer } from \"../../../components/Spacer.js\";\nimport { Spinner } from \"../../../components/Spinner.js\";\nimport { SwitchNetworkButton } from \"../../../components/SwitchNetwork.js\";\nimport { Container, Line, ModalHeader } from \"../../../components/basic.js\";\nimport { Button } from \"../../../components/buttons.js\";\nimport { Text } from \"../../../components/text.js\";\nimport { TokenSymbol } from \"../../../components/token/TokenSymbol.js\";\nimport { ConnectButton } from \"../../ConnectButton.js\";\nimport { ChainButton, NetworkSelectorContent } from \"../../NetworkSelector.js\";\nimport { CoinsIcon } from \"../../icons/CoinsIcon.js\";\nimport type { ConnectLocale } from \"../../locale/types.js\";\nimport { TokenSelector } from \"../TokenSelector.js\";\nimport { WalletSwitcherConnectionScreen } from \"../WalletSwitcherConnectionScreen.js\";\nimport { type ERC20OrNativeToken, isNativeToken } from \"../nativeToken.js\";\nimport { DirectPaymentModeScreen } from \"./DirectPaymentModeScreen.js\";\nimport { EstimatedTimeAndFees } from \"./EstimatedTimeAndFees.js\";\nimport { PayTokenIcon } from \"./PayTokenIcon.js\";\nimport { PayWithCreditCard } from \"./PayWIthCreditCard.js\";\nimport { TransactionModeScreen } from \"./TransactionModeScreen.js\";\nimport { WalletSelectorButton } from \"./WalletSelectorButton.js\";\nimport { CurrencySelection } from \"./fiat/CurrencySelection.js\";\nimport { FiatFlow } from \"./fiat/FiatFlow.js\";\nimport type { CurrencyMeta } from \"./fiat/currencies.js\";\nimport type { SelectedScreen } from \"./main/types.js\";\nimport {\n  type PaymentMethods,\n  useEnabledPaymentMethods,\n} from \"./main/useEnabledPaymentMethods.js\";\nimport { useUISelectionStates } from \"./main/useUISelectionStates.js\";\nimport { openOnrampPopup } from \"./openOnRamppopup.js\";\nimport { BuyTokenInput } from \"./swap/BuyTokenInput.js\";\nimport { FiatFees, SwapFees } from \"./swap/Fees.js\";\nimport { PayWithCrypto } from \"./swap/PayWithCrypto.js\";\nimport { SwapFlow } from \"./swap/SwapFlow.js\";\nimport { TransferFlow } from \"./swap/TransferFlow.js\";\nimport { WalletSwitcherDrawerContent } from \"./swap/WalletSwitcherDrawerContent.js\";\nimport { addPendingTx } from \"./swap/pendingSwapTx.js\";\nimport {\n  type SupportedChainAndTokens,\n  useBuySupportedDestinations,\n  useBuySupportedSources,\n} from \"./swap/useSwapSupportedChains.js\";\nimport type { PayerInfo } from \"./types.js\";\nimport { usePayerSetup } from \"./usePayerSetup.js\";\n\nexport type BuyScreenProps = {\n  title: string;\n  onBack: (() => void) | undefined;\n  supportedTokens: SupportedTokens | undefined;\n  client: ThirdwebClient;\n  connectLocale: ConnectLocale;\n  payOptions: PayUIOptions;\n  theme: \"light\" | \"dark\" | Theme;\n  onDone: () => void;\n  connectOptions: PayEmbedConnectOptions | undefined;\n  isEmbed: boolean;\n};\n\n/**\n * @internal\n */\nexport default function BuyScreen(props: BuyScreenProps) {\n  const supportedDestinationsQuery = useBuySupportedDestinations(props.client);\n\n  if (!supportedDestinationsQuery.data) {\n    return <LoadingScreen />;\n  }\n\n  return (\n    <BuyScreenContent\n      {...props}\n      supportedDestinations={supportedDestinationsQuery.data}\n    />\n  );\n}\n\ntype BuyScreenContentProps = {\n  title: string;\n  client: ThirdwebClient;\n  onBack?: () => void;\n  supportedTokens?: SupportedTokens;\n  supportedDestinations: SupportedChainAndTokens;\n  connectLocale: ConnectLocale;\n  theme: \"light\" | \"dark\" | Theme;\n  payOptions: PayUIOptions;\n  onDone: () => void;\n  connectOptions: PayEmbedConnectOptions | undefined;\n  isEmbed: boolean;\n};\n\n/**\n * @internal\n */\nfunction BuyScreenContent(props: BuyScreenContentProps) {\n  const { client, supportedDestinations, connectLocale, payOptions } = props;\n\n  const activeAccount = useActiveAccount();\n  const { payer, setPayer } = usePayerSetup();\n\n  const [screen, setScreen] = useState<SelectedScreen>({\n    id: \"main\",\n  });\n\n  const [hasEditedAmount, setHasEditedAmount] = useState(false);\n\n  const onDone = useCallback(() => {\n    setScreen({ id: \"main\" });\n    props.onDone();\n  }, [props.onDone]);\n\n  // UI selection\n  const {\n    tokenAmount,\n    setTokenAmount,\n    toChain,\n    setToChain,\n    deferredTokenAmount,\n    fromChain,\n    setFromChain,\n    toToken,\n    setToToken,\n    fromToken,\n    setFromToken,\n    selectedCurrency,\n    setSelectedCurrency,\n  } = useUISelectionStates({\n    payOptions,\n    supportedDestinations,\n  });\n\n  // check if the screen is expanded or not\n\n  // update supportedSources whenever toToken or toChain is updated\n  const supportedSourcesQuery = useBuySupportedSources({\n    client: props.client,\n    destinationChainId: toChain.id,\n    destinationTokenAddress: isNativeToken(toToken)\n      ? NATIVE_TOKEN_ADDRESS\n      : toToken.address,\n  });\n\n  const destinationSupportedTokens: SupportedTokens = useMemo(() => {\n    return createSupportedTokens(\n      supportedDestinations,\n      payOptions,\n      props.supportedTokens,\n    );\n  }, [props.supportedTokens, supportedDestinations, payOptions]);\n\n  const sourceSupportedTokens: SupportedTokens | undefined = useMemo(() => {\n    if (!supportedSourcesQuery.data) {\n      return undefined;\n    }\n\n    return createSupportedTokens(\n      supportedSourcesQuery.data,\n      payOptions,\n      props.supportedTokens,\n    );\n  }, [props.supportedTokens, supportedSourcesQuery.data, payOptions]);\n\n  const enabledPaymentMethods = useEnabledPaymentMethods({\n    payOptions: props.payOptions,\n    supportedDestinations: props.supportedDestinations,\n    toChain: toChain,\n    toToken: toToken,\n  });\n\n  const payDisabled =\n    enabledPaymentMethods.showPaymentSelection === false &&\n    enabledPaymentMethods.buyWithCryptoEnabled === false &&\n    enabledPaymentMethods.buyWithFiatEnabled === false;\n\n  // screens ----------------------------\n\n  const onSwapSuccess = useCallback(\n    (_status: BuyWithCryptoStatus) => {\n      props.payOptions.onPurchaseSuccess?.({\n        type: \"crypto\",\n        status: _status,\n      });\n    },\n    [props.payOptions.onPurchaseSuccess],\n  );\n\n  const onFiatSuccess = useCallback(\n    (_status: BuyWithFiatStatus) => {\n      props.payOptions.onPurchaseSuccess?.({\n        type: \"fiat\",\n        status: _status,\n      });\n    },\n    [props.payOptions.onPurchaseSuccess],\n  );\n\n  if (screen.id === \"connect-payer-wallet\") {\n    return (\n      <WalletSwitcherConnectionScreen\n        accountAbstraction={props.connectOptions?.accountAbstraction}\n        appMetadata={props.connectOptions?.appMetadata}\n        chain={props.connectOptions?.chain}\n        chains={props.connectOptions?.chains}\n        client={props.client}\n        connectLocale={props.connectLocale}\n        isEmbed={props.isEmbed}\n        onBack={() => setScreen(screen.backScreen)}\n        onSelect={(w) => {\n          const account = w.getAccount();\n          const chain = w.getChain();\n          if (w && account && chain) {\n            setPayer({\n              account,\n              chain,\n              wallet: w,\n            });\n          }\n        }}\n        recommendedWallets={props.connectOptions?.recommendedWallets}\n        showAllWallets={\n          props.connectOptions?.showAllWallets === undefined\n            ? true\n            : props.connectOptions?.showAllWallets\n        }\n        walletConnect={props.connectOptions?.walletConnect}\n        wallets={props.connectOptions?.wallets}\n      />\n    );\n  }\n\n  if (screen.id === \"swap-flow\" && payer) {\n    return (\n      <SwapFlow\n        title={props.title}\n        transactionMode={payOptions.mode === \"transaction\"}\n        isEmbed={props.isEmbed}\n        client={client}\n        onBack={() => {\n          setScreen({\n            id: \"buy-with-crypto\",\n          });\n        }}\n        buyWithCryptoQuote={screen.quote}\n        payer={payer}\n        isFiatFlow={false}\n        onDone={onDone}\n        onTryAgain={() => {\n          setScreen({\n            id: \"buy-with-crypto\",\n          });\n        }}\n        onSuccess={onSwapSuccess}\n      />\n    );\n  }\n\n  if (screen.id === \"fiat-flow\" && payer) {\n    return (\n      <FiatFlow\n        title={props.title}\n        transactionMode={payOptions.mode === \"transaction\"}\n        quote={screen.quote}\n        onBack={() => {\n          setScreen({\n            id: \"buy-with-fiat\",\n          });\n        }}\n        client={client}\n        testMode={\n          props.payOptions.buyWithFiat !== false &&\n          props.payOptions.buyWithFiat?.testMode === true\n        }\n        theme={typeof props.theme === \"string\" ? props.theme : props.theme.type}\n        openedWindow={screen.openedWindow}\n        onDone={onDone}\n        isEmbed={props.isEmbed}\n        payer={payer}\n        onSuccess={onFiatSuccess}\n      />\n    );\n  }\n\n  if (screen.id === \"transfer-flow\" && payer && activeAccount) {\n    const goBack = () => setScreen({ id: \"buy-with-crypto\" });\n    // TODO (pay) pass it via screen props\n    const defaultRecipientAddress = (\n      props.payOptions as Extract<PayUIOptions, { mode: \"direct_payment\" }>\n    )?.paymentInfo?.sellerAddress;\n    const receiverAddress = defaultRecipientAddress || activeAccount.address;\n    return (\n      <TransferFlow\n        title={props.title}\n        onBack={goBack}\n        payer={payer}\n        client={props.client}\n        onDone={onDone}\n        chain={toChain}\n        token={toToken}\n        tokenAmount={tokenAmount}\n        receiverAddress={receiverAddress}\n        transactionMode={props.payOptions.mode === \"transaction\"}\n      />\n    );\n  }\n\n  if (screen.id === \"select-currency\") {\n    const goBack = () => setScreen(screen.backScreen);\n    return (\n      <CurrencySelection\n        onSelect={(currency) => {\n          goBack();\n          setSelectedCurrency(currency);\n        }}\n        onBack={goBack}\n      />\n    );\n  }\n\n  if (screen.id === \"select-to-token\") {\n    const chains = supportedDestinations.map((x) => x.chain);\n    const goBack = () => setScreen(screen.backScreen);\n    const allowEdits = (payOptions as FundWalletOptions)?.prefillBuy\n      ?.allowEdits;\n    // if token selection is disabled - only show network selector screen\n    if (allowEdits?.token === false) {\n      return (\n        <ChainSelectionScreen\n          chains={chains}\n          client={props.client}\n          connectLocale={props.connectLocale}\n          setChain={setToChain}\n          goBack={goBack}\n        />\n      );\n    }\n\n    return (\n      <TokenSelector\n        onBack={goBack}\n        tokenList={(\n          (toChain?.id ? destinationSupportedTokens[toChain.id] : undefined) ||\n          []\n        ).filter((x) => x.address !== NATIVE_TOKEN_ADDRESS)}\n        onTokenSelect={(tokenInfo) => {\n          setToToken(tokenInfo);\n          goBack();\n        }}\n        chain={toChain}\n        chainSelection={\n          // hide chain selection if it's disabled\n          allowEdits?.chain !== false\n            ? {\n                chains: chains,\n                select: (c) => {\n                  setToChain(c);\n                },\n              }\n            : undefined\n        }\n        connectLocale={connectLocale}\n        client={client}\n        modalTitle={props.title}\n      />\n    );\n  }\n\n  if (\n    screen.id === \"select-from-token\" &&\n    supportedSourcesQuery.data &&\n    sourceSupportedTokens\n  ) {\n    const chains = supportedSourcesQuery.data.map((x) => x.chain);\n    const goBack = () => setScreen(screen.backScreen);\n    // if token selection is disabled - only show network selector screen\n    if (\n      payOptions.buyWithCrypto !== false &&\n      payOptions.buyWithCrypto?.prefillSource?.allowEdits?.token === false\n    ) {\n      return (\n        <ChainSelectionScreen\n          chains={chains}\n          client={props.client}\n          connectLocale={props.connectLocale}\n          setChain={setFromChain}\n          goBack={goBack}\n        />\n      );\n    }\n\n    return (\n      <TokenSelector\n        onBack={goBack}\n        tokenList={(\n          (fromChain?.id ? sourceSupportedTokens[fromChain.id] : undefined) ||\n          []\n        ).filter((x) => x.address !== NATIVE_TOKEN_ADDRESS)}\n        onTokenSelect={(tokenInfo) => {\n          setFromToken(tokenInfo);\n          goBack();\n        }}\n        chain={fromChain}\n        chainSelection={\n          // hide chain selection if it's disabled\n          payOptions.buyWithCrypto !== false &&\n          payOptions.buyWithCrypto?.prefillSource?.allowEdits?.chain !== false\n            ? {\n                chains: supportedSourcesQuery.data.map((x) => x.chain),\n                select: (c) => setFromChain(c),\n              }\n            : undefined\n        }\n        connectLocale={connectLocale}\n        client={client}\n        modalTitle=\"Pay with\"\n      />\n    );\n  }\n\n  return (\n    <Container animate=\"fadein\">\n      <div>\n        {screen.id === \"main\" && (\n          <MainScreen\n            title={props.title}\n            payerAccount={payer?.account}\n            client={client}\n            onSelectBuyToken={() =>\n              setScreen({ id: \"select-to-token\", backScreen: screen })\n            }\n            payOptions={payOptions}\n            setTokenAmount={setTokenAmount}\n            setToChain={setToChain}\n            setToToken={setToToken}\n            setFromChain={setFromChain}\n            setFromToken={setFromToken}\n            toChain={toChain}\n            toToken={toToken}\n            tokenAmount={tokenAmount}\n            connectOptions={props.connectOptions}\n            setScreen={setScreen}\n            supportedDestinations={supportedDestinations}\n            onBack={props.onBack}\n            theme={props.theme}\n            hasEditedAmount={hasEditedAmount}\n            setHasEditedAmount={setHasEditedAmount}\n            enabledPaymentMethods={enabledPaymentMethods}\n          />\n        )}\n\n        {(screen.id === \"select-payment-method\" ||\n          screen.id === \"select-wallet\" ||\n          screen.id === \"buy-with-crypto\" ||\n          screen.id === \"buy-with-fiat\") &&\n          payer && (\n            <TokenSelectedLayout\n              title={props.title}\n              selectedChain={toChain}\n              selectedToken={toToken}\n              tokenAmount={tokenAmount}\n              client={client}\n              onBack={() => {\n                if (\n                  enabledPaymentMethods.showPaymentSelection &&\n                  (screen.id === \"select-wallet\" ||\n                    screen.id === \"buy-with-fiat\")\n                ) {\n                  setScreen({ id: \"select-payment-method\" });\n                } else if (screen.id === \"buy-with-crypto\") {\n                  setScreen({ id: \"select-wallet\" });\n                } else {\n                  setScreen({ id: \"main\" });\n                }\n              }}\n            >\n              {screen.id === \"select-payment-method\" && (\n                <PaymentMethodSelection setScreen={(id) => setScreen({ id })} />\n              )}\n\n              {screen.id === \"select-wallet\" && (\n                <WalletSwitcherDrawerContent\n                  client={client}\n                  onSelect={(w) => {\n                    const chain = w.getChain();\n                    const account = w.getAccount();\n                    if (chain && account) {\n                      setPayer({\n                        account,\n                        chain,\n                        wallet: w,\n                      });\n                      setScreen({ id: \"buy-with-crypto\" });\n                    }\n                  }}\n                  showAllWallets={!!props.connectOptions?.showAllWallets}\n                  wallets={props.connectOptions?.wallets}\n                  onBack={() => {\n                    // no-op\n                  }}\n                  onConnect={() => {\n                    setScreen({\n                      id: \"connect-payer-wallet\",\n                      backScreen: {\n                        id: \"select-wallet\",\n                      },\n                    });\n                  }}\n                  selectedAddress={payer.account.address}\n                />\n              )}\n\n              {screen.id === \"buy-with-crypto\" && activeAccount && (\n                <SwapScreenContent\n                  setScreen={setScreen}\n                  tokenAmount={deferredTokenAmount}\n                  toChain={toChain}\n                  toToken={toToken}\n                  fromChain={fromChain}\n                  fromToken={fromToken}\n                  showFromTokenSelector={() => {\n                    setScreen({\n                      id: \"select-from-token\",\n                      backScreen: screen,\n                    });\n                  }}\n                  payer={payer}\n                  client={client}\n                  isEmbed={props.isEmbed}\n                  onDone={onDone}\n                  payOptions={payOptions}\n                  connectLocale={connectLocale}\n                  connectOptions={props.connectOptions}\n                  setPayer={setPayer}\n                  // pass it even though we are passing payer, because payer might be different\n                  activeAccount={activeAccount}\n                  setTokenAmount={setTokenAmount}\n                  setHasEditedAmount={setHasEditedAmount}\n                  disableTokenSelection={\n                    payDisabled === true ||\n                    (payOptions.buyWithCrypto !== false &&\n                      payOptions.buyWithCrypto?.prefillSource?.allowEdits\n                        ?.chain === false &&\n                      payOptions.buyWithCrypto?.prefillSource?.allowEdits\n                        ?.token === false)\n                  }\n                />\n              )}\n\n              {screen.id === \"buy-with-fiat\" && (\n                <FiatScreenContent\n                  setScreen={setScreen}\n                  tokenAmount={deferredTokenAmount}\n                  toChain={toChain}\n                  toToken={toToken}\n                  selectedCurrency={selectedCurrency}\n                  client={client}\n                  isEmbed={props.isEmbed}\n                  onDone={onDone}\n                  payOptions={payOptions}\n                  theme={props.theme}\n                  showCurrencySelector={() => {\n                    setScreen({\n                      id: \"select-currency\",\n                      backScreen: screen,\n                    });\n                  }}\n                  payer={payer}\n                  setTokenAmount={setTokenAmount}\n                  setHasEditedAmount={setHasEditedAmount}\n                />\n              )}\n            </TokenSelectedLayout>\n          )}\n      </div>\n    </Container>\n  );\n}\n\nfunction SelectedTokenInfo(props: {\n  selectedToken: ERC20OrNativeToken;\n  selectedChain: Chain;\n  tokenAmount: string;\n  client: ThirdwebClient;\n}) {\n  return (\n    <div>\n      <Container\n        flex=\"row\"\n        gap=\"sm\"\n        center=\"y\"\n        style={{\n          justifyContent: \"space-between\",\n        }}\n      >\n        <Container flex=\"row\" gap=\"xs\" center=\"y\">\n          <Text color=\"primaryText\" data-testid=\"tokenAmount\" size=\"xl\">\n            {formatNumber(Number(props.tokenAmount), 6)}\n          </Text>\n\n          <Container flex=\"row\" gap=\"xxs\" center=\"y\">\n            <TokenSymbol\n              token={props.selectedToken}\n              chain={props.selectedChain}\n              size=\"md\"\n              color=\"secondaryText\"\n            />\n            <PayTokenIcon\n              chain={props.selectedChain}\n              client={props.client}\n              size=\"sm\"\n              token={props.selectedToken}\n            />\n          </Container>\n        </Container>\n\n        <ChainName\n          chain={props.selectedChain}\n          client={props.client}\n          size=\"sm\"\n          short\n        />\n      </Container>\n    </div>\n  );\n}\n\nfunction MainScreen(props: {\n  title: string;\n  client: ThirdwebClient;\n  setTokenAmount: (amount: string) => void;\n  setFromChain: (chain: Chain) => void;\n  setFromToken: (token: ERC20OrNativeToken) => void;\n  setToChain: (chain: Chain) => void;\n  setToToken: (token: ERC20OrNativeToken) => void;\n  payerAccount: Account | undefined;\n  tokenAmount: string;\n  payOptions: PayUIOptions;\n  toToken: ERC20OrNativeToken;\n  toChain: Chain;\n  onSelectBuyToken: () => void;\n  connectOptions: PayEmbedConnectOptions | undefined;\n  setScreen: (screen: SelectedScreen) => void;\n  supportedDestinations: SupportedChainAndTokens;\n  onBack: (() => void) | undefined;\n  theme: \"light\" | \"dark\" | Theme;\n  hasEditedAmount: boolean;\n  setHasEditedAmount: (hasEdited: boolean) => void;\n  enabledPaymentMethods: PaymentMethods;\n}) {\n  const {\n    setTokenAmount,\n    setToChain,\n    setToToken,\n    setFromChain,\n    setFromToken,\n    payerAccount,\n    client,\n    tokenAmount,\n    payOptions,\n    toToken,\n    toChain,\n    supportedDestinations,\n    enabledPaymentMethods,\n  } = props;\n\n  const { showPaymentSelection, buyWithCryptoEnabled, buyWithFiatEnabled } =\n    enabledPaymentMethods;\n  const disableContinue = !tokenAmount;\n\n  switch (payOptions.mode) {\n    case \"transaction\": {\n      return (\n        <TransactionModeScreen\n          supportedDestinations={supportedDestinations}\n          payUiOptions={payOptions}\n          payerAccount={payerAccount}\n          connectOptions={props.connectOptions}\n          client={client}\n          onContinue={(tokenAmount, toChain, toToken) => {\n            setTokenAmount(tokenAmount);\n            setToChain(toChain);\n            setFromChain(toChain);\n            setFromToken(toToken);\n            setToToken(toToken);\n            if (showPaymentSelection) {\n              props.setScreen({ id: \"select-payment-method\" });\n            } else if (buyWithCryptoEnabled) {\n              props.setScreen({ id: \"select-wallet\" });\n            } else if (buyWithFiatEnabled) {\n              props.setScreen({ id: \"buy-with-fiat\" });\n            } else {\n              // default to buy with crypto with connected wallet if chain not supported by pay\n              props.setScreen({ id: \"select-wallet\" });\n            }\n          }}\n        />\n      );\n    }\n    case \"direct_payment\": {\n      return (\n        <DirectPaymentModeScreen\n          client={client}\n          payUiOptions={payOptions}\n          payerAccount={payerAccount}\n          connectOptions={props.connectOptions}\n          supportedDestinations={supportedDestinations}\n          onContinue={(tokenAmount, toChain, toToken) => {\n            setTokenAmount(tokenAmount);\n            setToChain(toChain);\n            setFromChain(toChain);\n            setFromToken(toToken);\n            setToToken(toToken);\n            if (showPaymentSelection) {\n              props.setScreen({ id: \"select-payment-method\" });\n            } else if (buyWithCryptoEnabled) {\n              props.setScreen({ id: \"buy-with-crypto\" });\n            } else if (buyWithFiatEnabled) {\n              props.setScreen({ id: \"buy-with-fiat\" });\n            } else {\n              // default to buy with crypto with connected wallet if chain not supported by pay\n              props.setScreen({ id: \"select-wallet\" });\n            }\n          }}\n        />\n      );\n    }\n    default: {\n      return (\n        <Container p=\"lg\">\n          <ModalHeader title={props.title} onBack={props.onBack} />\n\n          <Spacer y=\"xl\" />\n\n          {/* To */}\n          <BuyTokenInput\n            value={tokenAmount}\n            onChange={async (value) => {\n              props.setHasEditedAmount(true);\n              setTokenAmount(value);\n            }}\n            freezeAmount={payOptions.prefillBuy?.allowEdits?.amount === false}\n            freezeChainAndToken={\n              payOptions.prefillBuy?.allowEdits?.chain === false &&\n              payOptions.prefillBuy?.allowEdits?.token === false\n            }\n            token={toToken}\n            chain={toChain}\n            onSelectToken={props.onSelectBuyToken}\n            client={props.client}\n          />\n\n          <Spacer y=\"xl\" />\n\n          {/* Continue */}\n          <Container flex=\"column\" gap=\"sm\">\n            {!payerAccount ? (\n              <div>\n                <ConnectButton\n                  {...props.connectOptions}\n                  client={props.client}\n                  theme={props.theme}\n                  connectButton={{\n                    style: {\n                      width: \"100%\",\n                    },\n                  }}\n                />\n              </div>\n            ) : (\n              <Button\n                variant=\"accent\"\n                fullWidth\n                disabled={disableContinue}\n                data-disabled={disableContinue}\n                onClick={() => {\n                  if (showPaymentSelection) {\n                    props.setScreen({ id: \"select-payment-method\" });\n                  } else if (buyWithCryptoEnabled) {\n                    props.setScreen({ id: \"buy-with-crypto\" });\n                  } else if (buyWithFiatEnabled) {\n                    props.setScreen({ id: \"buy-with-fiat\" });\n                  } else {\n                    console.error(\"No payment method enabled\");\n                  }\n                }}\n              >\n                Continue\n              </Button>\n            )}\n          </Container>\n        </Container>\n      );\n    }\n  }\n}\n\nfunction TokenSelectedLayout(props: {\n  title: string;\n  children: React.ReactNode;\n  tokenAmount: string;\n  selectedToken: ERC20OrNativeToken;\n  selectedChain: Chain;\n  client: ThirdwebClient;\n  onBack: () => void;\n}) {\n  return (\n    <Container>\n      <Container p=\"lg\">\n        <ModalHeader title={props.title} onBack={props.onBack} />\n      </Container>\n\n      <Container\n        px=\"lg\"\n        style={{\n          paddingBottom: spacing.lg,\n        }}\n      >\n        <Spacer y=\"xs\" />\n        <SelectedTokenInfo\n          selectedToken={props.selectedToken}\n          selectedChain={props.selectedChain}\n          tokenAmount={props.tokenAmount}\n          client={props.client}\n        />\n\n        <Spacer y=\"md\" />\n        <Line />\n        <Spacer y=\"lg\" />\n\n        <Text size=\"sm\"> Pay with </Text>\n        <Spacer y=\"sm\" />\n\n        {props.children}\n      </Container>\n    </Container>\n  );\n}\n\nfunction PaymentMethodSelection(props: {\n  setScreen: (screenId: \"select-wallet\" | \"buy-with-fiat\") => void;\n}) {\n  return (\n    <Container animate=\"fadein\">\n      {/* Credit Card */}\n      <Container flex=\"column\" gap=\"sm\">\n        <Button\n          variant=\"outline\"\n          bg=\"tertiaryBg\"\n          onClick={() => props.setScreen(\"buy-with-fiat\")}\n          gap=\"sm\"\n          style={{\n            justifyContent: \"flex-start\",\n            textAlign: \"left\",\n          }}\n        >\n          <Container color=\"secondaryText\" flex=\"row\" center=\"both\">\n            <IdCardIcon\n              style={{\n                width: iconSize.md,\n                height: iconSize.md,\n              }}\n            />\n          </Container>\n\n          <Container flex=\"column\" gap=\"xxs\">\n            <Text size=\"md\" color=\"primaryText\">\n              Credit Card\n            </Text>\n            <Text size=\"xs\">Securely pay with credit card</Text>\n          </Container>\n        </Button>\n\n        {/* Crypto */}\n        <Button\n          variant=\"outline\"\n          bg=\"tertiaryBg\"\n          onClick={() => props.setScreen(\"select-wallet\")}\n          style={{\n            justifyContent: \"flex-start\",\n          }}\n          gap=\"sm\"\n        >\n          <Container color=\"secondaryText\" flex=\"row\" center=\"both\">\n            <CoinsIcon size={iconSize.md} />\n          </Container>\n\n          <Container flex=\"column\" gap=\"xxs\">\n            <Text size=\"md\" color=\"primaryText\">\n              Crypto\n            </Text>\n            <Text size=\"xs\">Pay with your connected wallet</Text>\n          </Container>\n        </Button>\n      </Container>\n    </Container>\n  );\n}\n\nfunction SwapScreenContent(props: {\n  setScreen: (screen: SelectedScreen) => void;\n  tokenAmount: string;\n  toToken: ERC20OrNativeToken;\n  toChain: Chain;\n  fromChain: Chain;\n  fromToken: ERC20OrNativeToken;\n  showFromTokenSelector: () => void;\n  payer: PayerInfo;\n  client: ThirdwebClient;\n  payOptions: PayUIOptions;\n  isEmbed: boolean;\n  onDone: () => void;\n  connectOptions: PayEmbedConnectOptions | undefined;\n  connectLocale: ConnectLocale;\n  setPayer: (payer: PayerInfo) => void;\n  activeAccount: Account;\n  setTokenAmount: (amount: string) => void;\n  setHasEditedAmount: (hasEdited: boolean) => void;\n  disableTokenSelection: boolean;\n}) {\n  const {\n    setScreen,\n    payer,\n    client,\n    toChain,\n    tokenAmount,\n    toToken,\n    fromChain,\n    fromToken,\n    showFromTokenSelector,\n    payOptions,\n    disableTokenSelection,\n  } = props;\n\n  const defaultRecipientAddress = (\n    props.payOptions as Extract<PayUIOptions, { mode: \"direct_payment\" }>\n  )?.paymentInfo?.sellerAddress;\n  const receiverAddress =\n    defaultRecipientAddress || props.activeAccount.address;\n  const { drawerRef, drawerOverlayRef, isOpen, setIsOpen } = useDrawer();\n  const [drawerScreen, setDrawerScreen] = useState<\n    \"fees\" | \"receiver\" | \"payer\"\n  >(\"fees\");\n\n  const fromTokenBalanceQuery = useWalletBalance({\n    address: payer.account.address,\n    chain: fromChain,\n    tokenAddress: isNativeToken(fromToken) ? undefined : fromToken.address,\n    client,\n  });\n\n  const fromTokenId = isNativeToken(fromToken)\n    ? NATIVE_TOKEN_ADDRESS\n    : fromToken.address.toLowerCase();\n  const toTokenId = isNativeToken(toToken)\n    ? NATIVE_TOKEN_ADDRESS\n    : toToken.address.toLowerCase();\n  const swapRequired =\n    !!tokenAmount &&\n    !(fromChain.id === toChain.id && fromTokenId === toTokenId);\n  const quoteParams: GetBuyWithCryptoQuoteParams | undefined = swapRequired\n    ? {\n        // wallets\n        fromAddress: payer.account.address,\n        toAddress: receiverAddress,\n        // from\n        fromChainId: fromChain.id,\n        fromTokenAddress: isNativeToken(fromToken)\n          ? NATIVE_TOKEN_ADDRESS\n          : fromToken.address,\n        // to\n        toChainId: toChain.id,\n        toTokenAddress: isNativeToken(toToken)\n          ? NATIVE_TOKEN_ADDRESS\n          : toToken.address,\n        toAmount: tokenAmount,\n        client,\n        purchaseData: payOptions.purchaseData,\n      }\n    : undefined;\n\n  const quoteQuery = useBuyWithCryptoQuote(quoteParams, {\n    // refetch every 30 seconds\n    staleTime: 30 * 1000,\n    refetchInterval: 30 * 1000,\n    gcTime: 30 * 1000,\n  });\n\n  const sourceTokenAmount = swapRequired\n    ? quoteQuery.data?.swapDetails.fromAmount\n    : tokenAmount;\n\n  const isNotEnoughBalance =\n    !!sourceTokenAmount &&\n    !!fromTokenBalanceQuery.data &&\n    Number(fromTokenBalanceQuery.data.displayValue) < Number(sourceTokenAmount);\n\n  const disableContinue =\n    (swapRequired && !quoteQuery.data) || isNotEnoughBalance;\n  const switchChainRequired = props.payer.chain.id !== fromChain.id;\n\n  // biome-ignore lint/suspicious/noExplicitAny: <explanation>\n  function getErrorMessage(err: any) {\n    type AmountTooLowError = {\n      code: \"MINIMUM_PURCHASE_AMOUNT\";\n      data: {\n        minimumAmountUSDCents: number;\n        requestedAmountUSDCents: number;\n        minimumAmountWei: string;\n        minimumAmountEth: string;\n      };\n    };\n\n    const defaultMessage = \"Unable to get price quote\";\n    try {\n      if (err.error.code === \"MINIMUM_PURCHASE_AMOUNT\") {\n        const obj = err.error as AmountTooLowError;\n        const minAmountToken = obj.data.minimumAmountEth;\n        return {\n          minAmount: formatNumber(Number(minAmountToken), 6),\n        };\n      }\n    } catch {}\n\n    return {\n      msg: [defaultMessage],\n    };\n  }\n\n  const errorMsg =\n    !quoteQuery.isLoading && quoteQuery.error\n      ? getErrorMessage(quoteQuery.error)\n      : undefined;\n\n  function showSwapFlow() {\n    if (\n      (props.payOptions.mode === \"transaction\" ||\n        props.payOptions.mode === \"direct_payment\") &&\n      !isNotEnoughBalance &&\n      !swapRequired\n    ) {\n      if (payer.account.address !== receiverAddress) {\n        // same currency, just transfer, but from another wallet\n        setScreen({\n          id: \"transfer-flow\",\n        });\n      } else {\n        // has enough balance to just do the transaction directly\n        props.onDone();\n      }\n\n      return;\n    }\n\n    if (!quoteQuery.data) {\n      return;\n    }\n\n    setScreen({\n      id: \"swap-flow\",\n      quote: quoteQuery.data,\n    });\n  }\n\n  function showFees() {\n    if (!quoteQuery.data) {\n      return;\n    }\n\n    setIsOpen(true);\n    setDrawerScreen(\"fees\");\n  }\n\n  return (\n    <Container flex=\"column\" gap=\"md\" animate=\"fadein\">\n      {isOpen && (\n        <>\n          <DrawerOverlay ref={drawerOverlayRef} />\n          <Drawer ref={drawerRef} close={() => setIsOpen(false)}>\n            {drawerScreen === \"fees\" && quoteQuery.data && (\n              <div>\n                <Text size=\"lg\" color=\"primaryText\">\n                  Fees\n                </Text>\n                <Spacer y=\"lg\" />\n                <SwapFees quote={quoteQuery.data} align=\"left\" />\n              </div>\n            )}\n          </Drawer>\n        </>\n      )}\n\n      {/* Quote info */}\n      <div>\n        <WalletSelectorButton\n          client={props.client}\n          onClick={() => {\n            setScreen({ id: \"select-wallet\" });\n          }}\n          address={props.payer.account.address}\n          walletId={props.payer.wallet.id}\n          containerStyle={{\n            borderBottomRightRadius: 0,\n            borderBottomLeftRadius: 0,\n          }}\n        />\n\n        <PayWithCrypto\n          value={sourceTokenAmount || \"\"}\n          onSelectToken={showFromTokenSelector}\n          chain={fromChain}\n          token={fromToken}\n          isLoading={quoteQuery.isLoading && !sourceTokenAmount}\n          client={client}\n          freezeChainAndTokenSelection={disableTokenSelection}\n          payerAccount={props.payer.account}\n          swapRequired={swapRequired}\n        />\n        {swapRequired && (\n          <EstimatedTimeAndFees\n            quoteIsLoading={quoteQuery.isLoading}\n            estimatedSeconds={\n              quoteQuery.data?.swapDetails.estimated.durationSeconds\n            }\n            onViewFees={showFees}\n          />\n        )}\n        <Spacer y=\"md\" />\n      </div>\n\n      {/* Error message */}\n      {errorMsg && (\n        <div>\n          {errorMsg.minAmount && (\n            <Text color=\"danger\" size=\"sm\" center multiline>\n              Minimum amount is {errorMsg.minAmount}{\" \"}\n              <TokenSymbol\n                token={toToken}\n                chain={toChain}\n                size=\"sm\"\n                inline\n                color=\"danger\"\n              />\n            </Text>\n          )}\n\n          {errorMsg.msg?.map((msg) => (\n            <Text color=\"danger\" size=\"sm\" center multiline key={msg}>\n              {msg}\n            </Text>\n          ))}\n        </div>\n      )}\n\n      {!errorMsg && isNotEnoughBalance && (\n        <div>\n          <Text color=\"danger\" size=\"sm\" center multiline>\n            Not enough funds.\n          </Text>\n          <Text color=\"danger\" size=\"sm\" center multiline>\n            Try a different wallet or token.\n          </Text>\n        </div>\n      )}\n\n      {/* Button */}\n      {errorMsg?.minAmount ? (\n        <Button\n          variant=\"accent\"\n          fullWidth\n          onClick={() => {\n            props.setTokenAmount(String(errorMsg.minAmount));\n            props.setHasEditedAmount(true);\n          }}\n        >\n          Set Minimum\n        </Button>\n      ) : switchChainRequired &&\n        !quoteQuery.isLoading &&\n        !isNotEnoughBalance &&\n        !quoteQuery.error ? (\n        <SwitchNetworkButton\n          variant=\"accent\"\n          fullWidth\n          switchChain={async () => {\n            await props.payer.wallet.switchChain(fromChain);\n          }}\n        />\n      ) : (\n        <Button\n          variant={disableContinue ? \"outline\" : \"accent\"}\n          fullWidth\n          data-disabled={disableContinue}\n          disabled={disableContinue}\n          onClick={async () => {\n            if (!disableContinue) {\n              showSwapFlow();\n            }\n          }}\n          gap=\"xs\"\n        >\n          {quoteQuery.isLoading ? (\n            <>\n              Getting price quote\n              <Spinner size=\"sm\" color=\"accentText\" />\n            </>\n          ) : (\n            \"Continue\"\n          )}\n        </Button>\n      )}\n    </Container>\n  );\n}\n\nfunction FiatScreenContent(props: {\n  setScreen: (screen: SelectedScreen) => void;\n  tokenAmount: string;\n  toToken: ERC20OrNativeToken;\n  toChain: Chain;\n  selectedCurrency: CurrencyMeta;\n  showCurrencySelector: () => void;\n  payOptions: PayUIOptions;\n  theme: \"light\" | \"dark\" | Theme;\n  client: ThirdwebClient;\n  onDone: () => void;\n  isEmbed: boolean;\n  payer: PayerInfo;\n  setTokenAmount: (amount: string) => void;\n  setHasEditedAmount: (hasEdited: boolean) => void;\n}) {\n  const {\n    toToken,\n    tokenAmount,\n    payer,\n    client,\n    setScreen,\n    toChain,\n    showCurrencySelector,\n    selectedCurrency,\n  } = props;\n  const defaultRecipientAddress = (\n    props.payOptions as Extract<PayUIOptions, { mode: \"direct_payment\" }>\n  )?.paymentInfo?.sellerAddress;\n  const receiverAddress =\n    defaultRecipientAddress || props.payer.account.address;\n  const { drawerRef, drawerOverlayRef, isOpen, setIsOpen } = useDrawer();\n  const [drawerScreen, setDrawerScreen] = useState<\"fees\">(\"fees\");\n\n  const buyWithFiatOptions = props.payOptions.buyWithFiat;\n\n  const fiatQuoteQuery = useBuyWithFiatQuote(\n    buyWithFiatOptions !== false && tokenAmount\n      ? {\n          fromCurrencySymbol: selectedCurrency.shorthand,\n          toChainId: toChain.id,\n          toAddress: receiverAddress,\n          toTokenAddress: isNativeToken(toToken)\n            ? NATIVE_TOKEN_ADDRESS\n            : toToken.address,\n          toAmount: tokenAmount,\n          client,\n          isTestMode: buyWithFiatOptions?.testMode,\n          purchaseData: props.payOptions.purchaseData,\n          fromAddress: payer.account.address,\n        }\n      : undefined,\n  );\n\n  function handleSubmit() {\n    if (!fiatQuoteQuery.data) {\n      return;\n    }\n\n    const hasTwoSteps = isSwapRequiredPostOnramp(fiatQuoteQuery.data);\n    let openedWindow: Window | null = null;\n\n    if (!hasTwoSteps) {\n      openedWindow = openOnrampPopup(\n        fiatQuoteQuery.data.onRampLink,\n        typeof props.theme === \"string\" ? props.theme : props.theme.type,\n      );\n\n      addPendingTx({\n        type: \"fiat\",\n        intentId: fiatQuoteQuery.data.intentId,\n      });\n    }\n\n    setScreen({\n      id: \"fiat-flow\",\n      quote: fiatQuoteQuery.data,\n      openedWindow,\n    });\n  }\n\n  function showFees() {\n    if (!fiatQuoteQuery.data) {\n      return;\n    }\n\n    setDrawerScreen(\"fees\");\n    setIsOpen(true);\n  }\n\n  // biome-ignore lint/suspicious/noExplicitAny: <explanation>\n  function getErrorMessage(err: any) {\n    type AmountTooLowError = {\n      code: \"MINIMUM_PURCHASE_AMOUNT\";\n      data: {\n        minimumAmountUSDCents: number;\n        requestedAmountUSDCents: number;\n        minimumAmountWei: string;\n        minimumAmountEth: string;\n      };\n    };\n\n    const defaultMessage = \"Unable to get price quote\";\n    try {\n      if (err.error.code === \"MINIMUM_PURCHASE_AMOUNT\") {\n        const obj = err.error as AmountTooLowError;\n        const minAmountToken = obj.data.minimumAmountEth;\n        return {\n          minAmount: formatNumber(Number(minAmountToken), 6),\n        };\n      }\n    } catch {}\n\n    return {\n      msg: [defaultMessage],\n    };\n  }\n\n  const disableSubmit = !fiatQuoteQuery.data;\n\n  const errorMsg =\n    !fiatQuoteQuery.isLoading && fiatQuoteQuery.error\n      ? getErrorMessage(fiatQuoteQuery.error)\n      : undefined;\n\n  return (\n    <Container flex=\"column\" gap=\"md\" animate=\"fadein\">\n      {isOpen && (\n        <>\n          <DrawerOverlay ref={drawerOverlayRef} />\n          <Drawer ref={drawerRef} close={() => setIsOpen(false)}>\n            {drawerScreen === \"fees\" && fiatQuoteQuery.data && (\n              <div>\n                <Text size=\"lg\" color=\"primaryText\">\n                  Fees\n                </Text>\n\n                <Spacer y=\"lg\" />\n                <FiatFees quote={fiatQuoteQuery.data} />\n              </div>\n            )}\n          </Drawer>\n        </>\n      )}\n\n      <div>\n        <PayWithCreditCard\n          isLoading={fiatQuoteQuery.isLoading}\n          value={fiatQuoteQuery.data?.fromCurrencyWithFees.amount}\n          client={client}\n          currency={selectedCurrency}\n          onSelectCurrency={showCurrencySelector}\n        />\n        {/* Estimated time + View fees button */}\n        <EstimatedTimeAndFees\n          quoteIsLoading={fiatQuoteQuery.isLoading}\n          estimatedSeconds={fiatQuoteQuery.data?.estimatedDurationSeconds}\n          onViewFees={showFees}\n        />\n        <Spacer y=\"md\" />\n      </div>\n\n      {/* Error message */}\n      {errorMsg && (\n        <div>\n          {errorMsg.minAmount && (\n            <Text color=\"danger\" size=\"sm\" center multiline>\n              Minimum amount is {errorMsg.minAmount}{\" \"}\n              <TokenSymbol\n                token={toToken}\n                chain={toChain}\n                size=\"sm\"\n                inline\n                color=\"danger\"\n              />\n            </Text>\n          )}\n\n          {errorMsg.msg?.map((msg) => (\n            <Text color=\"danger\" size=\"sm\" center multiline key={msg}>\n              {msg}\n            </Text>\n          ))}\n        </div>\n      )}\n\n      {errorMsg?.minAmount ? (\n        <Button\n          variant=\"accent\"\n          fullWidth\n          onClick={() => {\n            props.setTokenAmount(String(errorMsg.minAmount));\n            props.setHasEditedAmount(true);\n          }}\n        >\n          Set Minimum\n        </Button>\n      ) : (\n        <Button\n          variant={disableSubmit ? \"outline\" : \"accent\"}\n          data-disabled={disableSubmit}\n          disabled={disableSubmit}\n          fullWidth\n          onClick={handleSubmit}\n          gap=\"xs\"\n        >\n          {fiatQuoteQuery.isLoading ? (\n            <>\n              Getting price quote\n              <Spinner size=\"sm\" color=\"accentText\" />\n            </>\n          ) : (\n            \"Continue\"\n          )}\n        </Button>\n      )}\n    </Container>\n  );\n}\n\nfunction createSupportedTokens(\n  data: SupportedChainAndTokens,\n  payOptions: PayUIOptions,\n  supportedTokensOverrides?: SupportedTokens,\n): SupportedTokens {\n  const tokens: SupportedTokens = {};\n\n  const isBuyWithFiatDisabled = payOptions.buyWithFiat === false;\n  const isBuyWithCryptoDisabled = payOptions.buyWithCrypto === false;\n\n  // FIXME (pay) when buywithFiat is disabled, missing a bunch of tokens on base??\n\n  for (const x of data) {\n    tokens[x.chain.id] = x.tokens.filter((t) => {\n      // it token supports both - include it\n      if (t.buyWithCryptoEnabled && t.buyWithFiatEnabled) {\n        return true;\n      }\n\n      // if buyWithFiat is disabled, and buyWithCrypto is not supported by token - exclude the token\n      if (!t.buyWithCryptoEnabled && isBuyWithFiatDisabled) {\n        return false;\n      }\n\n      // if buyWithCrypto is disabled, and buyWithFiat is not supported by token - exclude the token\n      if (!t.buyWithFiatEnabled && isBuyWithCryptoDisabled) {\n        return false;\n      }\n\n      return true; // include the token\n    });\n  }\n\n  // override with props.supportedTokens\n  if (supportedTokensOverrides) {\n    for (const k in supportedTokensOverrides) {\n      const key = Number(k);\n      const tokenList = supportedTokensOverrides[key];\n\n      if (tokenList) {\n        tokens[key] = tokenList;\n      }\n    }\n  }\n\n  return tokens;\n}\n\nfunction ChainSelectionScreen(props: {\n  goBack: () => void;\n  chains: Chain[];\n  client: ThirdwebClient;\n  connectLocale: ConnectLocale;\n  setChain: (chain: Chain) => void;\n}) {\n  return (\n    <NetworkSelectorContent\n      client={props.client}\n      connectLocale={props.connectLocale}\n      showTabs={false}\n      onBack={props.goBack}\n      chains={props.chains}\n      closeModal={props.goBack}\n      networkSelector={{\n        renderChain(renderChainProps) {\n          return (\n            <ChainButton\n              chain={renderChainProps.chain}\n              confirming={false}\n              switchingFailed={false}\n              onClick={() => {\n                props.setChain(renderChainProps.chain);\n                props.goBack();\n              }}\n              client={props.client}\n              connectLocale={props.connectLocale}\n            />\n          );\n        },\n      }}\n    />\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport { useActiveAccount } from \"../../../../../core/hooks/wallets/useActiveAccount.js\";\nimport { useActiveWallet } from \"../../../../../core/hooks/wallets/useActiveWallet.js\";\nimport { useActiveWalletChain } from \"../../../../../core/hooks/wallets/useActiveWalletChain.js\";\nimport type { PayerInfo } from \"./types.js\";\n\nexport function usePayerSetup() {\n  const wallet = useActiveWallet();\n  const account = useActiveAccount();\n  const activeChain = useActiveWalletChain();\n\n  const [_payer, setPayer] = useState<PayerInfo | undefined>();\n\n  useEffect(() => {\n    const wallet = _payer?.wallet;\n\n    function update() {\n      if (!wallet) {\n        setPayer(undefined);\n        return;\n      }\n\n      const account = wallet.getAccount();\n      const chain = wallet.getChain();\n      if (account && chain) {\n        console.log(\"updated to\", account, chain);\n\n        setPayer({\n          account,\n          chain,\n          wallet,\n        });\n      } else {\n        setPayer(undefined);\n      }\n    }\n\n    if (wallet) {\n      const unsubChainChanged = wallet.subscribe(\"chainChanged\", update);\n      const unsubAccountChanged = wallet.subscribe(\"accountChanged\", update);\n      return () => {\n        unsubChainChanged();\n        unsubAccountChanged();\n      };\n    }\n\n    return undefined;\n  }, [_payer]);\n\n  const initialPayer =\n    account && activeChain && wallet\n      ? { account, chain: activeChain, wallet }\n      : undefined;\n\n  // return the payer state if its set\n  // otherwise return the active wallet as payer\n  const payer: PayerInfo | undefined = _payer || initialPayer;\n\n  return {\n    payer,\n    setPayer,\n  };\n}\n","import { useState } from \"react\";\nimport { polygon } from \"../../../../../../../chains/chain-definitions/polygon.js\";\nimport type { Chain } from \"../../../../../../../chains/types.js\";\nimport type {\n  FundWalletOptions,\n  PayUIOptions,\n} from \"../../../../../../core/hooks/connection/ConnectButtonProps.js\";\nimport { useActiveWalletChain } from \"../../../../../../core/hooks/wallets/useActiveWalletChain.js\";\nimport { useDebouncedValue } from \"../../../../hooks/useDebouncedValue.js\";\nimport { type ERC20OrNativeToken, NATIVE_TOKEN } from \"../../nativeToken.js\";\nimport { defaultSelectedCurrency } from \"../fiat/currencies.js\";\nimport type { SupportedChainAndTokens } from \"../swap/useSwapSupportedChains.js\";\n\n// handle states for token and chain selection\n\nexport function useUISelectionStates(options: {\n  payOptions: PayUIOptions;\n  supportedDestinations: SupportedChainAndTokens;\n}) {\n  const activeChain = useActiveWalletChain();\n  const { payOptions, supportedDestinations } = options;\n\n  // buy token amount ---------------------------------------------------------\n  // NOTE - for transaction / direct payment modes, the token amount is set when the user tap continue\n  const prefillBuy = (payOptions as FundWalletOptions)?.prefillBuy;\n  const initialTokenAmount = prefillBuy?.amount || \"\";\n\n  const [tokenAmount, setTokenAmount] = useState<string>(initialTokenAmount);\n  const deferredTokenAmount = useDebouncedValue(tokenAmount, 300);\n\n  // --------------------------------------------------------------------------\n\n  // Destination chain and token selection -----------------------------------\n  const [toChain, setToChain] = useState<Chain>(\n    // use prefill chain if available\n    prefillBuy?.chain ||\n      (payOptions.mode === \"transaction\" && payOptions.transaction?.chain) ||\n      (payOptions.mode === \"direct_payment\" && payOptions.paymentInfo?.chain) ||\n      // use active chain if its supported as destination\n      supportedDestinations.find((x) => x.chain.id === activeChain?.id)\n        ?.chain ||\n      // default to polygon\n      polygon,\n  );\n\n  const [toToken, setToToken] = useState<ERC20OrNativeToken>(\n    prefillBuy?.token ||\n      (payOptions.mode === \"direct_payment\" && payOptions.paymentInfo.token) ||\n      NATIVE_TOKEN,\n  );\n  // --------------------------------------------------------------------------\n\n  // Source token and chain selection ---------------------------------------------------\n  const [fromChain, setFromChain] = useState<Chain>(\n    // use prefill chain if available\n    (payOptions.buyWithCrypto !== false &&\n      payOptions.buyWithCrypto?.prefillSource?.chain) ||\n      (payOptions.mode === \"transaction\" && payOptions.transaction?.chain) ||\n      (payOptions.mode === \"direct_payment\" && payOptions.paymentInfo?.chain) ||\n      // default to polygon\n      polygon,\n  );\n\n  const [fromToken, setFromToken] = useState<ERC20OrNativeToken>(\n    // use prefill token if available\n    (payOptions.buyWithCrypto !== false &&\n      payOptions.buyWithCrypto?.prefillSource?.token) ||\n      (payOptions.mode === \"direct_payment\" && payOptions.paymentInfo.token) ||\n      // default to native token\n      NATIVE_TOKEN,\n  );\n\n  // --------------------------------------------------------------------------\n\n  // stripe only supports USD, so not using a state right now\n  const [selectedCurrency, setSelectedCurrency] = useState(\n    defaultSelectedCurrency,\n  );\n\n  return {\n    tokenAmount,\n    setTokenAmount,\n\n    toChain,\n    setToChain,\n    deferredTokenAmount,\n    fromChain,\n    setFromChain,\n    toToken,\n    setToToken,\n    fromToken,\n    setFromToken,\n    selectedCurrency,\n\n    setSelectedCurrency,\n  };\n}\n","import type { Chain } from \"../../../../../../../chains/types.js\";\nimport { NATIVE_TOKEN_ADDRESS } from \"../../../../../../../constants/addresses.js\";\nimport type { PayUIOptions } from \"../../../../../../core/hooks/connection/ConnectButtonProps.js\";\nimport { type ERC20OrNativeToken, isNativeToken } from \"../../nativeToken.js\";\nimport type { SupportedChainAndTokens } from \"../swap/useSwapSupportedChains.js\";\n\n// Based on what toToken, toChain, and supportedDestinations are, determine which payment methods should be enabled\n// change the current method if it should be disabled\n// return whether the payment selection should be shown or not ( if only one payment method is enabled, don't show the selection )\nexport type PaymentMethods = {\n  showPaymentSelection: boolean;\n  buyWithFiatEnabled: boolean;\n  buyWithCryptoEnabled: boolean;\n};\n\nexport function useEnabledPaymentMethods(options: {\n  payOptions: PayUIOptions;\n  supportedDestinations: SupportedChainAndTokens;\n  toChain: Chain;\n  toToken: ERC20OrNativeToken;\n}): PaymentMethods {\n  const { payOptions, supportedDestinations, toChain, toToken } = options;\n\n  function getEnabledPayMethodsForSelectedToken(): {\n    fiat: boolean;\n    swap: boolean;\n  } {\n    const chain = supportedDestinations.find((c) => c.chain.id === toChain.id);\n    if (!chain) {\n      return {\n        fiat: false,\n        swap: false,\n      };\n    }\n\n    const toTokenAddress = isNativeToken(toToken)\n      ? NATIVE_TOKEN_ADDRESS\n      : toToken.address;\n\n    const tokenInfo = chain.tokens.find(\n      (t) => t.address.toLowerCase() === toTokenAddress.toLowerCase(),\n    );\n\n    if (!tokenInfo) {\n      return {\n        fiat: true,\n        swap: true,\n      };\n    }\n\n    return {\n      fiat: tokenInfo.buyWithFiatEnabled,\n      swap: tokenInfo.buyWithCryptoEnabled,\n    };\n  }\n\n  const { fiat, swap } = getEnabledPayMethodsForSelectedToken();\n\n  const buyWithFiatEnabled = payOptions.buyWithFiat !== false && fiat;\n  const buyWithCryptoEnabled = payOptions.buyWithCrypto !== false && swap;\n\n  const showPaymentSelection = buyWithFiatEnabled && buyWithCryptoEnabled;\n\n  return {\n    buyWithFiatEnabled,\n    buyWithCryptoEnabled,\n    showPaymentSelection,\n  };\n}\n","import {\n  type UseQueryOptions,\n  type UseQueryResult,\n  useQuery,\n} from \"@tanstack/react-query\";\nimport {\n  type BuyWithCryptoQuote,\n  type GetBuyWithCryptoQuoteParams,\n  getBuyWithCryptoQuote,\n} from \"../../../../pay/buyWithCrypto/getQuote.js\";\n\n/**\n * @internal\n */\nexport type BuyWithCryptoQuoteQueryOptions = Omit<\n  UseQueryOptions<BuyWithCryptoQuote>,\n  \"queryFn\" | \"queryKey\" | \"enabled\"\n>;\n\n/**\n * Hook to get a price quote for performing a \"Buy with crypto\" transaction that allows users to buy a token with another token - aka a swap.\n *\n * The price quote is an object of type [`BuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoQuote).\n * This quote contains the information about the purchase such as token amounts, processing fees, estimated time etc.\n *\n * This hook is a React Query wrapper of the [`getBuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithCryptoQuote) function.\n * You can also use that function directly\n *\n * Once you have the quote, you can use the [`useSendTransaction`](https://portal.thirdweb.com/references/typescript/v5/useSendTransaction) function to send the purchase\n * and [`useBuyWithCryptoStatus`](https://portal.thirdweb.com/references/typescript/v5/useBuyWithCryptoStatus) function to get the status of the swap transaction.\n * @param params - object of type [`BuyWithCryptoQuoteQueryParams`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoQuoteQueryParams)\n * @param queryParams - options to configure the react query\n * @returns A React Query object which contains the data of type [`BuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoQuote)\n * @example\n * ```tsx\n * import { useBuyWithCryptoQuote, useBuyWithCryptoStatus, type BuyWithCryptoStatusQueryParams, useActiveAccount } from \"thirdweb/react\";\n * import { sendTransaction } from 'thirdweb';\n *\n * function Component() {\n *  const buyWithCryptoQuoteQuery = useBuyWithCryptoQuote(swapParams);\n *  const [buyTxHash, setBuyTxHash] = useState<BuyWithCryptoStatusQueryParams | undefined>();\n *  const buyWithCryptoStatusQuery = useBuyWithCryptoStatus(buyTxHash ? {\n *    client,\n *    transactionHash: buyTxHash,\n *  }: undefined);\n *\n *  async function handleBuyWithCrypto() {\n *    const account = useActiveAccount();\n *\n *    // if approval is required\n *    if (buyWithCryptoQuoteQuery.data.approval) {\n *      const approveTx = await sendTransaction({\n *        transaction: swapQuote.data.approval,\n *        account: account,\n *      });\n *      await waitForApproval(approveTx);\n *    }\n *\n *    // send the transaction to buy crypto\n *    // this promise is resolved when user confirms the transaction in the wallet and the transaction is sent to the blockchain\n *    const buyTx = await sendTransaction({\n *      transaction: swapQuote.data.transactionRequest,\n *      account: account,\n *    });\n *    await waitForApproval(buyTx);\n *\n *    // set buyTx.transactionHash to poll the status of the swap transaction\n *    setBuyWithCryptoTx(buyTx.transactionHash);\n *  }\n *\n *  return <button onClick={handleBuyWithCrypto}>Swap</button>\n * }\n * ```\n * @buyCrypto\n */\nexport function useBuyWithCryptoQuote(\n  params?: GetBuyWithCryptoQuoteParams,\n  queryParams?: BuyWithCryptoQuoteQueryOptions,\n): UseQueryResult<BuyWithCryptoQuote> {\n  return useQuery({\n    ...queryParams,\n    queryKey: [\"buyWithCryptoQuote\", params],\n    queryFn: () => {\n      if (!params) {\n        throw new Error(\"Swap params are required\");\n      }\n\n      return getBuyWithCryptoQuote(params);\n    },\n    enabled: !!params,\n    retry(failureCount, error) {\n      if (failureCount > 3) {\n        return false;\n      }\n      try {\n        // biome-ignore lint/suspicious/noExplicitAny: <explanation>\n        if ((error as any).error.code === \"MINIMUM_PURCHASE_AMOUNT\") {\n          return false;\n        }\n      } catch {\n        return true;\n      }\n\n      return true;\n    },\n  });\n}\n"],"names":["FN_SELECTOR","FN_INPUTS","FN_OUTPUTS","type","async","decimals","options","readContract","contract","method","params","withCache","generatedDecimals","cacheKey","concat","chain","id","address","cacheTime","Number","POSITIVE_INFINITY","name","generatedName","symbol","generatedSymbol","getCurrencyMetadata","isNativeTokenAddress","nativeCurrency","name_","symbol_","decimals_","Promise","all","catch","e","Error","isSwapRequiredPostOnramp","buyWithFiatQuote","sameChain","toToken","chainId","onRampToken","token","sameToken","getAddress","tokenAddress","useBuyWithFiatQuote","queryOptions","useQuery","queryKey","queryFn","clientFetch","getClientFetch","client","response","getPayBuyWithFiatQuoteEndpoint","headers","Accept","body","JSON","stringify","toAddress","fromCurrencySymbol","toChainId","toString","toTokenAddress","fromAmount","toAmount","maxSlippageBPS","isTestMode","purchaseData","fromAddress","toGasAmountWei","ok","errorObj","json","status","result","error","console","getBuyWithFiatQuote","enabled","retry","failureCount","code","_templateObject","Drawer","forwardRef","props","ref","_jsx","DrawerContainer","children","DynamicHeight","_jsxs","Container","p","CrossContainer","IconButton","onClick","close","Cross2Icon","width","iconSize","md","height","style","color","StyledDiv","_","theme","useCustomTheme","zIndex","borderTopLeftRadius","radius","xl","borderTopRightRadius","background","colors","modalBg","position","bottom","left","right","animation","drawerOpenAnimation","borderTop","borderColor","keyframes","_taggedTemplateLiteral","DrawerOverlay","backgroundColor","modalOverlayBg","inset","fadeInAnimation","useDrawer","isOpen","_setIsOpen","useState","drawerRef","useRef","drawerOverlayRef","closeDrawerAnimation","useCallback","resolve","current","_drawerOverlayRef$cur","animOptions","easing","fill","duration","closeAnimation","animate","transform","opacity","onfinish","setIsOpen","value","useLayoutEffect","handleClick","event","target","Node","contains","requestAnimationFrame","document","addEventListener","removeEventListener","DirectPaymentModeScreen","_paymentInfo$token","_supportedDestination","_chainData$icon","_chainData$icon2","_chainData$icon3","payUiOptions","supportedDestinations","onContinue","payerAccount","activeWallet","useActiveWallet","metadata","paymentInfo","data","chainData","useChainMetadata","sellerEns","useEnsName","sellerAddress","totalCost","cost","tokenDecimals","isNativeToken","getContract","toTokens","amountWei","amount","undefined","LoadingScreen","icon","find","c","tokens","t","_paymentInfo$token2","toLowerCase","NATIVE_TOKEN_ADDRESS","url","ModalHeader","title","Spacer","y","image","Img","src","borderRadius","spacing","tertiaryBg","flex","center","padding","marginBottom","WalletImage","size","flexGrow","borderBottom","secondaryIconColor","marginLeft","marginRight","ChainIcon","chainIconUrl","expand","Text","weight","gap","justifyContent","TokenIcon","String","formatNumber","Line","textAlign","shortenAddress","Button","variant","fullWidth","ConnectButton","connectOptions","connectButton","EstimatedTimeAndFees","estimatedSeconds","quoteIsLoading","bg","alignItems","borderWidth","borderStyle","ClockIcon","sm","Skeleton","fontSize","xs","formatSeconds","onViewFees","ViewFeeIcon","viewBox","xmlns","d","stroke","strokeLinecap","strokeLinejoin","PayWithCreditCard","borderBottomRightRadius","borderBottomLeftRadius","flexWrap","CurrencyButton","onSelectCurrency","minHeight","minWidth","currency","shorthand","ChevronDownIcon","flexShrink","display","flexDirection","xxs","overflow","textOverflow","whiteSpace","paddingRight","isLoading","lg","styled","baseSepolia","defineChain","blockExplorers","apiUrl","testnet","base","optimismSepolia","optimism","zoraSepolia","zora","opChains","estimateGasCost","_ref","_options$from","_options$account","transaction","from","account","gasLimit","resolvePromisedValue","gas","estimateGas","gasPrice","getGasPrice","l1Fee","includes","estimateL1Fee","wei","ether","toEther","getTransactionGasCost","tx","gasCost","bufferCost","TransactionModeScreen","transactionCostAndData","args","txQueryKey","setTxQueryKey","useEffect","erc20Value","to","encode","then","_erc20Value$amountWei","erc20Currency","_chainMetadata$icon","tokenBalance","tokenMeta","gasCostWei","getWalletBalance","transactionValueWei","walletBalance","nativeWalletBalance","chainMetadata","getChainMetadata","refetchInterval","useTransactionCostAndData","sponsoredTransactionsEnabled","hasSponsoredTransactionsEnabled","totalCostWei","WalletSelectorButton","border","containerStyle","disabled","WalletRow","disableChevron","secondaryText","checked","CheckIcon","wallet","useConnectedWallets","x","_x$getAccount","getAccount","walletId","ensNameQuery","addressOrENS","ensAvatarQuery","useEnsAvatar","ensName","CurrencySelection","onBack","px","currencies","map","SelectCurrencyButton","onSelect","secondaryButtonBg","transition","openOnrampPopup","link","top","window","innerHeight","innerWidth","open","OnrampStatusScreen","_statusQuery$data","_statusQuery$data2","_statusQuery$data3","_statusQuery$data4","queryClient","useQueryClient","openedWindow","onSuccess","statusQuery","useBuyWithFiatStatus","intentId","uiStatus","purchaseCbCalled","_statusQuery$data5","_statusQuery$data6","_statusQuery$data7","invalidatedBalance","_statusQuery$data8","invalidateWalletBalance","_statusQuery$data9","onShowSwapFlow","hasTwoSteps","_Fragment","StepBar","steps","currentStep","quote","fromCurrencyWithFees","currencySymbol","OnrampStatusScreenUI","onDone","fiatStatus","transactionMode","isEmbed","statusMeta","getBuyWithFiatStatusMeta","onRampTokenQuote","txDetails","OnRampTxDetailsTable","source","fiat","text","txHash","transactionHash","Spinner","isMobile","AccentFailIcon","CheckCircledIcon","FiatFlow","screen","setScreen","popupWindow","setPopupWindow","onPostOnrampSuccess","getBuyWithFiatStatus","FiatSteps","partialQuote","fiatQuoteToPartialQuote","step","popup","onRampLink","addPendingTx","_status","PostOnRampSwapFlow","onSwapFlowStarted","payer","polygon","BuyTokenInput","useChainName","_e$currentTarget$quer","currentTarget","querySelector","focus","Input","pattern","inputMode","tabIndex","placeholder","freezeAmount","setSelectionRange","length","onChange","startsWith","numValue","isNaN","slice","boxShadow","paddingBlock","fontWeight","getWidth","chars","replace","Math","max","maxWidth","TokenSymbol","hideTokenSelector","TokenButton","onSelectToken","freezeChainAndToken","GenericWalletIcon","role","PayWithCrypto","balanceQuery","useWalletBalance","borderTopWidth","swapRequired","paddingInline","freezeChainAndTokenSelection","PayTokenIcon","formatTokenBalance","TransferFlow","receiverAddress","tokenAmount","setStep","setStatus","useChainSymbol","TokenInfoRow","label","tokenSymbol","Step","isDone","isActive","ConnectorLine","CrossCircledIcon","SwitchNetworkButton","switchChain","prepareTransaction","toWei","transfer","submittedTx","sendTransaction","waitForReceipt","sendAndConfirmTransaction","WalletSwitcherDrawerContent","_props$wallets","connectedWallets","hideConnectButton","showAllWallets","wallets","every","w","_w$getAccount","onConnect","PlusIcon","BuyScreen","supportedDestinationsQuery","useBuySupportedDestinations","BuyScreenContent","_props$connectOptions10","_props$connectOptions11","_payOptions$buyWithCr3","_payOptions$buyWithCr4","connectLocale","payOptions","activeAccount","useActiveAccount","setPayer","activeChain","useActiveWalletChain","_payer","update","getChain","log","unsubChainChanged","subscribe","unsubAccountChanged","usePayerSetup","hasEditedAmount","setHasEditedAmount","setTokenAmount","toChain","setToChain","deferredTokenAmount","fromChain","setFromChain","setToToken","fromToken","setFromToken","selectedCurrency","setSelectedCurrency","_payOptions$transacti","_payOptions$paymentIn","_payOptions$buyWithCr","_payOptions$transacti2","_payOptions$paymentIn2","_payOptions$buyWithCr2","prefillBuy","initialTokenAmount","useDebouncedValue","mode","NATIVE_TOKEN","buyWithCrypto","prefillSource","defaultSelectedCurrency","useUISelectionStates","supportedSourcesQuery","useBuySupportedSources","destinationChainId","destinationTokenAddress","destinationSupportedTokens","useMemo","createSupportedTokens","supportedTokens","sourceSupportedTokens","enabledPaymentMethods","swap","tokenInfo","buyWithFiatEnabled","buyWithCryptoEnabled","getEnabledPayMethodsForSelectedToken","buyWithFiat","showPaymentSelection","useEnabledPaymentMethods","payDisabled","onSwapSuccess","_props$payOptions$onP","_props$payOptions","onPurchaseSuccess","call","onFiatSuccess","_props$payOptions$onP2","_props$payOptions2","_props$connectOptions","_props$connectOptions2","_props$connectOptions3","_props$connectOptions4","_props$connectOptions5","_props$connectOptions6","_props$connectOptions7","_props$connectOptions8","_props$connectOptions9","_props$payOptions$buy","WalletSwitcherConnectionScreen","accountAbstraction","appMetadata","chains","backScreen","recommendedWallets","walletConnect","SwapFlow","buyWithCryptoQuote","isFiatFlow","onTryAgain","testMode","_props$payOptions3","goBack","_payOptions$prefillBu","allowEdits","ChainSelectionScreen","setChain","TokenSelector","tokenList","filter","onTokenSelect","chainSelection","select","modalTitle","MainScreen","onSelectBuyToken","TokenSelectedLayout","selectedChain","selectedToken","PaymentMethodSelection","selectedAddress","SwapScreenContent","showFromTokenSelector","disableTokenSelection","FiatScreenContent","showCurrencySelector","SelectedTokenInfo","ChainName","short","disableContinue","_payOptions$prefillBu2","_payOptions$prefillBu3","_payOptions$prefillBu4","paddingBottom","IdCardIcon","CoinsIcon","_props$payOptions4","_quoteQuery$data","_quoteQuery$data2","_errorMsg$msg","drawerScreen","setDrawerScreen","fromTokenBalanceQuery","fromTokenId","toTokenId","quoteParams","fromChainId","fromTokenAddress","quoteQuery","queryParams","staleTime","gcTime","getBuyWithCryptoQuote","sourceTokenAmount","swapDetails","isNotEnoughBalance","displayValue","switchChainRequired","errorMsg","err","minAmountToken","minimumAmountEth","minAmount","msg","getErrorMessage","SwapFees","align","estimated","durationSeconds","multiline","inline","_props$payOptions5","_fiatQuoteQuery$data","_fiatQuoteQuery$data2","_errorMsg$msg2","buyWithFiatOptions","fiatQuoteQuery","disableSubmit","FiatFees","estimatedDurationSeconds","supportedTokensOverrides","isBuyWithFiatDisabled","isBuyWithCryptoDisabled","k","key","NetworkSelectorContent","showTabs","closeModal","networkSelector","renderChain","renderChainProps","ChainButton","confirming","switchingFailed"],"sourceRoot":""}