{"version":3,"file":"static/js/55749.5635b37d.chunk.js","mappings":"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","sources":["../node_modules/thirdweb/src/react/web/wallets/in-app/useInAppWalletLocale.ts","../node_modules/thirdweb/src/react/web/wallets/shared/locale/getConnectLocale.ts","../node_modules/thirdweb/src/react/web/wallets/shared/ConnectWalletSocialOptions.tsx","../node_modules/thirdweb/src/wallets/ecosystem/get-ecosystem-wallet-auth-options.ts","../node_modules/thirdweb/src/react/web/wallets/in-app/validateEmail.ts","../node_modules/thirdweb/src/react/web/wallets/shared/oauthSignIn.ts","../node_modules/thirdweb/src/wallets/in-app/core/authentication/getLoginPath.ts","../node_modules/thirdweb/src/wallets/in-app/web/lib/auth/constants.ts","../node_modules/thirdweb/src/wallets/in-app/web/lib/auth/oauth.ts"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport type { LocaleId } from \"../../ui/types.js\";\nimport { getInAppWalletLocale } from \"../shared/locale/getConnectLocale.js\";\nimport type { InAppWalletLocale } from \"../shared/locale/types.js\";\n\n/**\n * @internal\n */\nexport function useInAppWalletLocale(localeId: LocaleId) {\n  const [locale, setLocale] = useState<InAppWalletLocale | undefined>(\n    undefined,\n  );\n\n  // TODO: move this to a useQuery hook\n  // or at the very least dedupe it?\n  useEffect(() => {\n    getInAppWalletLocale(localeId).then((l) => {\n      setLocale(l);\n    });\n  }, [localeId]);\n\n  return locale;\n}\n","import type { LocaleId } from \"../../../ui/types.js\";\nimport type { InAppWalletLocale } from \"./types.js\";\n\n/**\n * @internal\n */\nexport async function getInAppWalletLocale(\n  localeId: LocaleId,\n): Promise<InAppWalletLocale> {\n  switch (localeId) {\n    case \"es_ES\":\n      return (await import(\"./es.js\")).default;\n    case \"ja_JP\":\n      return (await import(\"./ja.js\")).default;\n    case \"tl_PH\":\n      return (await import(\"./tl.js\")).default;\n    case \"vi_VN\":\n      return (await import(\"./vi.js\")).default;\n    case \"de_DE\":\n      return (await import(\"./de.js\")).default;\n    case \"ko_KR\":\n      return (await import(\"./kr.js\")).default;\n    case \"fr_FR\":\n      return (await import(\"./fr.js\")).default;\n    default:\n      return (await import(\"./en.js\")).default;\n  }\n}\n","\"use client\";\nimport styled from \"@emotion/styled\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useMemo, useState } from \"react\";\nimport type { Chain } from \"../../../../chains/types.js\";\nimport type { ThirdwebClient } from \"../../../../client/client.js\";\nimport { webLocalStorage } from \"../../../../utils/storage/webStorage.js\";\nimport { getEcosystemWalletAuthOptions } from \"../../../../wallets/ecosystem/get-ecosystem-wallet-auth-options.js\";\nimport { isEcosystemWallet } from \"../../../../wallets/ecosystem/is-ecosystem-wallet.js\";\nimport type { Profile } from \"../../../../wallets/in-app/core/authentication/types.js\";\nimport { linkProfile } from \"../../../../wallets/in-app/core/wallet/profiles.js\";\nimport { loginWithOauthRedirect } from \"../../../../wallets/in-app/web/lib/auth/oauth.js\";\nimport type { Account, Wallet } from \"../../../../wallets/interfaces/wallet.js\";\nimport {\n  type AuthOption,\n  type SocialAuthOption,\n  socialAuthOptions,\n} from \"../../../../wallets/types.js\";\nimport type { EcosystemWalletId } from \"../../../../wallets/wallet-types.js\";\nimport { useCustomTheme } from \"../../../core/design-system/CustomThemeProvider.js\";\nimport {\n  fontSize,\n  iconSize,\n  spacing,\n} from \"../../../core/design-system/index.js\";\nimport { setLastAuthProvider } from \"../../../core/utils/storage.js\";\nimport {\n  emailIcon,\n  getWalletIcon,\n  passkeyIcon,\n  phoneIcon,\n  socialIcons,\n} from \"../../../core/utils/walletIcon.js\";\nimport { useSetSelectionData } from \"../../providers/wallet-ui-states-provider.js\";\nimport { WalletTypeRowButton } from \"../../ui/ConnectWallet/WalletTypeRowButton.js\";\nimport { Img } from \"../../ui/components/Img.js\";\nimport { TextDivider } from \"../../ui/components/TextDivider.js\";\nimport { Container } from \"../../ui/components/basic.js\";\nimport { Button } from \"../../ui/components/buttons.js\";\nimport { InputSelectionUI } from \"../in-app/InputSelectionUI.js\";\nimport { validateEmail } from \"../in-app/validateEmail.js\";\nimport { LoadingScreen } from \"./LoadingScreen.js\";\nimport type { InAppWalletLocale } from \"./locale/types.js\";\nimport { openOauthSignInWindow } from \"./oauthSignIn.js\";\n\nexport type ConnectWalletSelectUIState =\n  | undefined\n  | {\n      emailLogin?: string;\n      phoneLogin?: string;\n      socialLogin?: {\n        type: SocialAuthOption;\n        connectionPromise: Promise<Account | Profile[]>;\n      };\n      passkeyLogin?: boolean;\n      walletLogin?: boolean;\n    };\n\nconst defaultAuthOptions: AuthOption[] = [\n  \"email\",\n  \"phone\",\n  \"google\",\n  \"apple\",\n  \"facebook\",\n  \"passkey\",\n];\n\nexport type ConnectWalletSocialOptionsProps = {\n  select: () => void;\n  done: () => void;\n  locale: InAppWalletLocale;\n  wallet: Wallet<EcosystemWalletId> | Wallet<\"inApp\">;\n  goBack?: () => void;\n  chain: Chain | undefined;\n  client: ThirdwebClient;\n  size: \"compact\" | \"wide\";\n  isLinking?: boolean;\n};\n\n/**\n * @internal\n */\nexport const ConnectWalletSocialOptions = (\n  props: ConnectWalletSocialOptionsProps,\n) => {\n  const locale = props.locale;\n  const { wallet } = props;\n  const setData = useSetSelectionData() as (\n    value: ConnectWalletSelectUIState,\n  ) => void;\n\n  const themeObj = useCustomTheme();\n\n  const loginMethodsLabel = {\n    google: locale.signInWithGoogle,\n    facebook: locale.signInWithFacebook,\n    apple: locale.signInWithApple,\n    discord: locale.signInWithDiscord,\n    farcaster: \"Farcaster\",\n    telegram: \"Telegram\",\n  };\n\n  const { data: ecosystemAuthOptions, isLoading } = useQuery({\n    queryKey: [\"auth-options\", wallet.id],\n    queryFn: async () => {\n      if (isEcosystemWallet(wallet)) {\n        return getEcosystemWalletAuthOptions(wallet.id);\n      }\n      return null;\n    },\n    enabled: isEcosystemWallet(wallet),\n    retry: false,\n  });\n  const authOptions = isEcosystemWallet(wallet)\n    ? ecosystemAuthOptions ?? defaultAuthOptions\n    : wallet.getConfig()?.auth?.options ?? defaultAuthOptions;\n\n  const emailIndex = authOptions.indexOf(\"email\");\n  const isEmailEnabled = emailIndex !== -1;\n  const phoneIndex = authOptions.indexOf(\"phone\");\n  const isPhoneEnabled = phoneIndex !== -1;\n\n  const [manualInputMode, setManualInputMode] = useState<\n    \"email\" | \"phone\" | \"none\" | null\n  >(null);\n\n  const inputMode = useMemo(() => {\n    if (manualInputMode) {\n      return manualInputMode;\n    }\n    if (isEmailEnabled && isPhoneEnabled) {\n      return emailIndex < phoneIndex ? \"email\" : \"phone\";\n    }\n    if (isEmailEnabled) {\n      return \"email\";\n    }\n    if (isPhoneEnabled) {\n      return \"phone\";\n    }\n    return \"none\";\n  }, [isEmailEnabled, isPhoneEnabled, emailIndex, phoneIndex, manualInputMode]);\n\n  if (isEcosystemWallet(wallet) && isLoading) {\n    return <LoadingScreen />;\n  }\n\n  const passKeyEnabled = authOptions.includes(\"passkey\");\n\n  const placeholder =\n    inputMode === \"email\" ? locale.emailPlaceholder : locale.phonePlaceholder;\n  const emptyErrorMessage =\n    inputMode === \"email\" ? locale.emailRequired : locale.phoneRequired;\n\n  let type = \"text\";\n  if (inputMode === \"email\") {\n    type = \"email\";\n  } else if (inputMode === \"phone\") {\n    type = \"tel\";\n  }\n\n  const socialLogins = authOptions.filter((o) =>\n    socialAuthOptions.includes(o as SocialAuthOption),\n  );\n\n  const hasSocialLogins = socialLogins.length > 0;\n  const ecosystemInfo = isEcosystemWallet(wallet)\n    ? {\n        id: wallet.id,\n        partnerId: wallet.getConfig()?.partnerId,\n      }\n    : undefined;\n\n  // Need to trigger login on button click to avoid popup from being blocked\n  const handleSocialLogin = async (strategy: SocialAuthOption) => {\n    const walletConfig = wallet.getConfig();\n    if (\n      walletConfig &&\n      \"auth\" in walletConfig &&\n      walletConfig?.auth?.mode === \"redirect\" &&\n      !props.isLinking // We do not support redirects for linking\n    ) {\n      return loginWithOauthRedirect({\n        authOption: strategy,\n        client: props.client,\n        ecosystem: ecosystemInfo,\n        redirectUrl: walletConfig?.auth?.redirectUrl,\n        redirectExternally: walletConfig?.auth?.redirectExternally,\n      });\n    }\n\n    try {\n      const socialLoginWindow = openOauthSignInWindow({\n        authOption: strategy,\n        themeObj,\n        client: props.client,\n        ecosystem: ecosystemInfo,\n      });\n      if (!socialLoginWindow) {\n        throw new Error(\"Failed to open login window\");\n      }\n      const connectOptions = {\n        chain: props.chain,\n        client: props.client,\n        strategy,\n        openedWindow: socialLoginWindow,\n        closeOpenedWindow: (openedWindow: Window) => {\n          openedWindow.close();\n        },\n      };\n\n      const connectPromise = (() => {\n        if (props.isLinking) {\n          if (wallet.id !== \"inApp\") {\n            throw new Error(\"Only in-app wallets support multi-auth\");\n          }\n          return linkProfile(wallet, connectOptions);\n        } else {\n          const connectPromise = wallet.connect(connectOptions);\n          setLastAuthProvider(strategy, webLocalStorage);\n          return connectPromise;\n        }\n      })();\n\n      setData({\n        socialLogin: {\n          type: strategy,\n          connectionPromise: connectPromise,\n        },\n      });\n\n      props.select(); // show Connect UI\n\n      // Note: do not call done() here, it will be called SocialLogin component\n      // we simply trigger the connect and save promise here - its resolution is handled in SocialLogin\n    } catch (e) {\n      console.error(`Error signing in with ${strategy}`, e);\n    }\n  };\n\n  function handlePassKeyLogin() {\n    setData({\n      passkeyLogin: true,\n    });\n    props.select();\n  }\n\n  function handleWalletLogin() {\n    setData({\n      walletLogin: true,\n    });\n    props.select();\n  }\n\n  const showOnlyIcons = socialLogins.length > 2;\n\n  return (\n    <Container\n      flex=\"column\"\n      gap=\"md\"\n      style={{\n        position: \"relative\",\n      }}\n    >\n      {/* Social Login */}\n      {hasSocialLogins && (\n        <Container\n          flex=\"row\"\n          center=\"x\"\n          gap={socialLogins.length > 4 ? \"xs\" : \"sm\"}\n          style={{\n            justifyContent: \"space-between\",\n            display: \"grid\",\n            gridTemplateColumns: `repeat(${socialLogins.length}, 1fr)`,\n          }}\n        >\n          {socialLogins.map((loginMethod) => {\n            const imgIconSize = (() => {\n              if (!showOnlyIcons) {\n                return iconSize.md;\n              } else {\n                if (socialLogins.length > 4) {\n                  return iconSize.md;\n                }\n                return iconSize.lg;\n              }\n            })();\n\n            return (\n              <SocialButton\n                aria-label={`Login with ${loginMethod}`}\n                data-variant={showOnlyIcons ? \"icon\" : \"full\"}\n                key={loginMethod}\n                variant={\"outline\"}\n                onClick={() => {\n                  handleSocialLogin(loginMethod as SocialAuthOption);\n                }}\n              >\n                <Img\n                  src={socialIcons[loginMethod as SocialAuthOption]}\n                  width={imgIconSize}\n                  height={imgIconSize}\n                  client={props.client}\n                />\n                {!showOnlyIcons &&\n                  `${socialLogins.length === 1 ? \"Continue with \" : \"\"}${loginMethodsLabel[loginMethod as SocialAuthOption]}`}\n              </SocialButton>\n            );\n          })}\n        </Container>\n      )}\n\n      {props.size === \"wide\" &&\n        hasSocialLogins &&\n        (isEmailEnabled || isPhoneEnabled) && <TextDivider text={locale.or} />}\n\n      {/* Email/Phone Login */}\n      {isEmailEnabled && (\n        <>\n          {inputMode === \"email\" ? (\n            <InputSelectionUI\n              type={type}\n              onSelect={(value) => {\n                setData({ emailLogin: value });\n                props.select();\n              }}\n              placeholder={placeholder}\n              name=\"email\"\n              errorMessage={(input) => {\n                const isValidEmail = validateEmail(input.toLowerCase());\n                if (!isValidEmail) {\n                  return locale.invalidEmail;\n                }\n                return undefined;\n              }}\n              emptyErrorMessage={emptyErrorMessage}\n              submitButtonText={locale.submitEmail}\n            />\n          ) : (\n            <WalletTypeRowButton\n              client={props.client}\n              icon={emailIcon}\n              onClick={() => {\n                setManualInputMode(\"email\");\n              }}\n              title={locale.emailPlaceholder}\n            />\n          )}\n        </>\n      )}\n      {isPhoneEnabled && (\n        <>\n          {inputMode === \"phone\" ? (\n            <InputSelectionUI\n              format=\"phone\"\n              type={type}\n              onSelect={(value) => {\n                // removes white spaces and special characters\n                setData({ phoneLogin: value.replace(/[-\\(\\) ]/g, \"\") });\n                props.select();\n              }}\n              placeholder={placeholder}\n              name=\"phone\"\n              errorMessage={(_input) => {\n                // removes white spaces and special characters\n                const input = _input.replace(/[-\\(\\) ]/g, \"\");\n                const isPhone = /^[0-9]+$/.test(input);\n\n                if (!isPhone && isPhoneEnabled) {\n                  return locale.invalidPhone;\n                }\n\n                return undefined;\n              }}\n              emptyErrorMessage={emptyErrorMessage}\n              submitButtonText={locale.submitEmail}\n            />\n          ) : (\n            <WalletTypeRowButton\n              client={props.client}\n              icon={phoneIcon}\n              onClick={() => {\n                setManualInputMode(\"phone\");\n              }}\n              title={locale.phonePlaceholder}\n            />\n          )}\n        </>\n      )}\n\n      {passKeyEnabled && (\n        <>\n          <WalletTypeRowButton\n            client={props.client}\n            icon={passkeyIcon}\n            onClick={() => {\n              handlePassKeyLogin();\n            }}\n            title={locale.passkey}\n          />\n        </>\n      )}\n\n      {props.isLinking && (\n        <>\n          <WalletTypeRowButton\n            client={props.client}\n            icon={getWalletIcon(\"\")}\n            onClick={() => {\n              handleWalletLogin();\n            }}\n            title={locale.linkWallet}\n          />\n        </>\n      )}\n    </Container>\n  );\n};\n\nconst SocialButton = /* @__PURE__ */ styled(Button)({\n  flexGrow: 1,\n  \"&[data-variant='full']\": {\n    display: \"flex\",\n    justifyContent: \"flex-start\",\n    padding: spacing.md,\n    gap: spacing.sm,\n    fontSize: fontSize.md,\n    fontWeight: 500,\n    transition: \"background-color 0.2s ease\",\n    \"&:active\": {\n      boxShadow: \"none\",\n    },\n  },\n  \"&[data-variant='icon']\": {\n    padding: spacing.sm,\n  },\n});\n","import { getThirdwebBaseUrl } from \"../../utils/domains.js\";\nimport type { AuthOption } from \"../types.js\";\nimport type { EcosystemWalletId } from \"../wallet-types.js\";\n\n/**\n * Retrieves the specified auth options for a given ecosystem wallet, if any.\n * @param walletId The ecosystem wallet ID.\n * @returns {AuthOption[] | undefined} The auth options for the ecosystem wallet.\n * @internal\n */\nexport async function getEcosystemWalletAuthOptions(\n  walletId: EcosystemWalletId,\n): Promise<AuthOption[] | undefined> {\n  const res = await fetch(\n    `${getThirdwebBaseUrl(\"inAppWallet\")}/api/2024-05-05/ecosystem-wallet`,\n    {\n      headers: {\n        \"x-ecosystem-id\": walletId,\n      },\n    },\n  );\n\n  const data = await res.json();\n\n  if (!data || data.code === \"UNAUTHORIZED\") {\n    throw new Error(\n      data.message ||\n        `Could not find ecosystem wallet with id ${walletId}, please check your ecosystem wallet configuration.`,\n    );\n  }\n\n  return data.authOptions ?? undefined;\n}\n","// A super basic email validation function that is very forgiving to allow for a wide range emails\nexport function validateEmail(str: string) {\n  // <string> + @ + <string> + . + <string>\n  const emailRegex = /^\\S+@\\S+\\.\\S+$/;\n\n  return emailRegex.test(str.replace(/\\+/g, \"\"));\n}\n","import type { ThirdwebClient } from \"../../../../client/client.js\";\nimport { getLoginUrl } from \"../../../../wallets/in-app/core/authentication/getLoginPath.js\";\nimport type { InAppWalletSocialAuth } from \"../../../../wallets/in-app/core/wallet/types.js\";\nimport type { Ecosystem } from \"../../../../wallets/in-app/web/types.js\";\nimport type { Theme } from \"../../../core/design-system/index.js\";\n\nfunction getBodyTitle(authOption: InAppWalletSocialAuth) {\n  switch (authOption) {\n    case \"google\":\n      return \"Sign In - Google Accounts\";\n    default:\n      return `Sign In - ${authOption\n        .slice(0, 1)\n        .toUpperCase()}${authOption.slice(1)}`;\n  }\n}\n\nfunction getWidthAndHeight(authOption: InAppWalletSocialAuth) {\n  switch (authOption) {\n    case \"facebook\":\n      return { width: 715, height: 555 };\n    default:\n      return { width: 350, height: 500 };\n  }\n}\n\nfunction getOauthLoginPath(\n  authOption: InAppWalletSocialAuth,\n  client: ThirdwebClient,\n  ecosystem?: Ecosystem,\n) {\n  switch (authOption) {\n    case \"apple\":\n    case \"facebook\":\n    case \"google\":\n    case \"farcaster\":\n    case \"telegram\":\n    case \"discord\":\n      return getLoginUrl({ authOption, client, ecosystem });\n    default:\n      return \"\";\n  }\n}\n\n/**\n * @internal\n */\nexport function openOauthSignInWindow({\n  authOption,\n  themeObj,\n  client,\n  ecosystem,\n}: {\n  authOption: InAppWalletSocialAuth;\n  themeObj: Theme;\n  client: ThirdwebClient;\n  ecosystem?: Ecosystem;\n}) {\n  // open the popup in the center of the screen\n  const { height, width } = getWidthAndHeight(authOption);\n  const top = (window.innerHeight - height) / 2;\n  const left = (window.innerWidth - width) / 2;\n\n  const win = window.open(\n    getOauthLoginPath(authOption, client, ecosystem),\n    undefined,\n    `width=${width}, height=${height}, top=${top}, left=${left}`,\n  );\n  if (win) {\n    const title = getBodyTitle(authOption);\n    win.document.title = title;\n    win.document.body.innerHTML = spinnerWindowHtml;\n    win.document.body.style.background = themeObj.colors.modalBg;\n    win.document.body.style.color = themeObj.colors.accentText;\n  }\n\n  // close it when current window is closed or refreshed\n  if (win) {\n    window.addEventListener(\"beforeunload\", () => {\n      win?.close();\n    });\n  }\n\n  return win;\n}\n\nconst spinnerWindowHtml = `\n<svg class=\"loader\" viewBox=\"0 0 50 50\">\n  <circle\n    cx=\"25\"\n    cy=\"25\"\n    r=\"20\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    stroke-width=\"4\"\n  />\n</svg>\n\n<style>\n  body,\n  html {\n    height: 100%;\n    margin: 0;\n    padding: 0;\n  }\n\n  body {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  .loader {\n    width: 50px;\n    height: 50px;\n    animation: spin 2s linear infinite;\n  }\n\n  .loader circle {\n    animation: loading 1.5s linear infinite;\n  }\n\n  @keyframes loading {\n    0% {\n      stroke-dasharray: 1, 150;\n      stroke-dashoffset: 0;\n    }\n    50% {\n      stroke-dasharray: 90, 150;\n      stroke-dashoffset: -35;\n    }\n    100% {\n      stroke-dasharray: 90, 150;\n      stroke-dashoffset: -124;\n    }\n  }\n\n  @keyframes spin {\n    100% {\n      transform: rotate(360deg);\n        }\n  }\n</style>\n`;\n","import type { ThirdwebClient } from \"../../../../client/client.js\";\nimport { getThirdwebBaseUrl } from \"../../../../utils/domains.js\";\nimport { type AuthOption, authOptions } from \"../../../../wallets/types.js\";\nimport type { Ecosystem } from \"../../web/types.js\";\n\nconst getLoginOptionRoute = (option: AuthOption | \"wallet\") => {\n  if (!authOptions.includes(option as AuthOption) && option !== \"wallet\") {\n    throw new Error(`Unknown auth option ${option}`);\n  }\n  switch (option) {\n    case \"wallet\":\n      return \"siwe\";\n    default:\n      return option;\n  }\n};\n\nexport const getLoginUrl = ({\n  authOption,\n  client,\n  ecosystem,\n  mode = \"popup\",\n  redirectUrl,\n}: {\n  authOption: AuthOption | \"wallet\";\n  client: ThirdwebClient;\n  ecosystem?: Ecosystem;\n  mode?: \"popup\" | \"redirect\" | \"mobile\";\n  redirectUrl?: string;\n}) => {\n  const route = getLoginOptionRoute(authOption);\n  let baseUrl = `${getThirdwebBaseUrl(\"inAppWallet\")}/api/2024-05-05/login/${route}?clientId=${client.clientId}`;\n  if (ecosystem?.partnerId) {\n    baseUrl = `${baseUrl}&ecosystemId=${ecosystem.id}&ecosystemPartnerId=${ecosystem.partnerId}`;\n  } else if (ecosystem) {\n    baseUrl = `${baseUrl}&ecosystemId=${ecosystem.id}`;\n  }\n\n  if (mode === \"redirect\") {\n    const formattedRedirectUrl = new URL(redirectUrl || window.location.href);\n    formattedRedirectUrl.searchParams.set(\"walletId\", ecosystem?.id || \"inApp\");\n    formattedRedirectUrl.searchParams.set(\"authProvider\", authOption);\n    baseUrl = `${baseUrl}&redirectUrl=${encodeURIComponent(formattedRedirectUrl.toString())}`;\n  }\n\n  if (mode === \"mobile\") {\n    if (!redirectUrl) {\n      throw new Error(\"Redirect URL is required for mobile authentication\");\n    }\n    baseUrl = `${baseUrl}&redirectUrl=${encodeURIComponent(redirectUrl)}`;\n  }\n\n  return baseUrl;\n};\n\nexport const getLoginCallbackUrl = ({\n  authOption,\n  client,\n  ecosystem,\n}: {\n  authOption: AuthOption | \"wallet\";\n  client: ThirdwebClient;\n  ecosystem?: Ecosystem;\n}): string => {\n  const route = getLoginOptionRoute(authOption);\n  let baseUrl = `${getThirdwebBaseUrl(\"inAppWallet\")}/api/2024-05-05/login/${route}/callback?clientId=${client.clientId}`;\n  if (ecosystem?.partnerId) {\n    baseUrl = `${baseUrl}&ecosystemId=${ecosystem.id}&ecosystemPartnerId=${ecosystem.partnerId}`;\n  } else if (ecosystem) {\n    baseUrl = `${baseUrl}&ecosystemId=${ecosystem.id}`;\n  }\n\n  return baseUrl;\n};\n","export const DEFAULT_POP_UP_SIZE = \"width=350, height=500\";\n","import type { ThirdwebClient } from \"../../../../../client/client.js\";\nimport { getThirdwebBaseUrl } from \"../../../../../utils/domains.js\";\nimport type { SocialAuthOption } from \"../../../../../wallets/types.js\";\nimport { getLoginUrl } from \"../../../core/authentication/getLoginPath.js\";\nimport type { AuthStoredTokenWithCookieReturnType } from \"../../../core/authentication/types.js\";\nimport type { Ecosystem } from \"../../types.js\";\nimport { DEFAULT_POP_UP_SIZE } from \"./constants.js\";\n\nconst closeWindow = ({\n  isWindowOpenedByFn,\n  win,\n  closeOpenedWindow,\n}: {\n  win?: Window | null;\n  isWindowOpenedByFn: boolean;\n  closeOpenedWindow?: (openedWindow: Window) => void;\n}) => {\n  if (isWindowOpenedByFn) {\n    win?.close();\n  } else {\n    if (win && closeOpenedWindow) {\n      closeOpenedWindow(win);\n    } else if (win) {\n      win.close();\n    }\n  }\n};\n\nexport const loginWithOauthRedirect = (options: {\n  authOption: SocialAuthOption;\n  client: ThirdwebClient;\n  ecosystem?: Ecosystem;\n  redirectUrl?: string;\n  redirectExternally?: boolean;\n}): void => {\n  const loginUrl = getLoginUrl({\n    ...options,\n    mode: \"redirect\",\n  });\n  if (options.redirectExternally === true) {\n    window.open(loginUrl);\n  } else {\n    window.location.href = loginUrl;\n  }\n};\n\nexport const loginWithOauth = async (options: {\n  authOption: SocialAuthOption;\n  client: ThirdwebClient;\n  ecosystem?: Ecosystem;\n  openedWindow?: Window | null | undefined;\n  closeOpenedWindow?: ((openedWindow: Window) => void) | undefined;\n}): Promise<AuthStoredTokenWithCookieReturnType> => {\n  let win = options.openedWindow;\n  let isWindowOpenedByFn = false;\n  if (!win) {\n    win = window.open(\n      getLoginUrl({ ...options, mode: \"popup\" }),\n      `Login to ${options.authOption}`,\n      DEFAULT_POP_UP_SIZE,\n    );\n    isWindowOpenedByFn = true;\n  }\n  if (!win) {\n    throw new Error(\"Something went wrong opening pop-up\");\n  }\n\n  const result = await new Promise<AuthStoredTokenWithCookieReturnType>(\n    (resolve, reject) => {\n      // detect when the user closes the login window\n      const pollTimer = window.setInterval(async () => {\n        if (win.closed) {\n          clearInterval(pollTimer);\n          window.removeEventListener(\"message\", messageListener);\n          reject(new Error(\"User closed login window\"));\n        }\n      }, 1000);\n\n      const messageListener = async (\n        event: MessageEvent<{\n          eventType: string;\n          authResult?: AuthStoredTokenWithCookieReturnType;\n          errorString?: string;\n        }>,\n      ) => {\n        if (event.origin !== getThirdwebBaseUrl(\"inAppWallet\")) {\n          return;\n        }\n        if (typeof event.data !== \"object\") {\n          reject(new Error(\"Invalid event data\"));\n          return;\n        }\n\n        switch (event.data.eventType) {\n          case \"oauthSuccessResult\": {\n            window.removeEventListener(\"message\", messageListener);\n            clearInterval(pollTimer);\n            closeWindow({\n              isWindowOpenedByFn,\n              win,\n              closeOpenedWindow: options.closeOpenedWindow,\n            });\n            if (event.data.authResult) {\n              resolve(event.data.authResult);\n            }\n            break;\n          }\n          case \"oauthFailureResult\": {\n            window.removeEventListener(\"message\", messageListener);\n            clearInterval(pollTimer);\n            closeWindow({\n              isWindowOpenedByFn,\n              win,\n              closeOpenedWindow: options.closeOpenedWindow,\n            });\n            reject(new Error(event.data.errorString));\n            break;\n          }\n          default: {\n            // no-op, DO NOT THROW HERE\n          }\n        }\n      };\n      window.addEventListener(\"message\", messageListener);\n    },\n  );\n  return result;\n};\n"],"names":["useInAppWalletLocale","localeId","locale","setLocale","useState","undefined","useEffect","async","default","getInAppWalletLocale","then","l","defaultAuthOptions","ConnectWalletSocialOptions","props","_wallet$getConfig$aut","_wallet$getConfig","_wallet$getConfig2","wallet","setData","useSetSelectionData","themeObj","useCustomTheme","loginMethodsLabel","google","signInWithGoogle","facebook","signInWithFacebook","apple","signInWithApple","discord","signInWithDiscord","farcaster","telegram","data","ecosystemAuthOptions","isLoading","useQuery","queryKey","id","queryFn","isEcosystemWallet","walletId","_data$authOptions","res","fetch","concat","getThirdwebBaseUrl","headers","json","code","Error","message","authOptions","getEcosystemWalletAuthOptions","enabled","retry","getConfig","auth","options","emailIndex","indexOf","isEmailEnabled","phoneIndex","isPhoneEnabled","manualInputMode","setManualInputMode","inputMode","useMemo","_jsx","LoadingScreen","passKeyEnabled","includes","placeholder","emailPlaceholder","phonePlaceholder","emptyErrorMessage","emailRequired","phoneRequired","type","socialLogins","filter","o","socialAuthOptions","hasSocialLogins","length","ecosystemInfo","partnerId","showOnlyIcons","_jsxs","Container","flex","gap","style","position","children","center","justifyContent","display","gridTemplateColumns","map","loginMethod","imgIconSize","iconSize","md","lg","SocialButton","variant","onClick","_walletConfig$auth","walletConfig","_walletConfig$auth2","_walletConfig$auth3","mode","isLinking","loginWithOauthRedirect","authOption","strategy","client","ecosystem","redirectUrl","redirectExternally","socialLoginWindow","openOauthSignInWindow","connectOptions","chain","openedWindow","closeOpenedWindow","close","connectPromise","linkProfile","connect","setLastAuthProvider","webLocalStorage","socialLogin","connectionPromise","select","e","console","error","handleSocialLogin","Img","src","socialIcons","width","height","size","TextDivider","text","or","_Fragment","InputSelectionUI","onSelect","value","emailLogin","name","errorMessage","input","str","toLowerCase","test","replace","invalidEmail","submitButtonText","submitEmail","WalletTypeRowButton","icon","emailIcon","title","format","phoneLogin","_input","invalidPhone","phoneIcon","passkeyIcon","passkeyLogin","passkey","getWalletIcon","walletLogin","linkWallet","styled","Button","flexGrow","padding","spacing","sm","fontSize","fontWeight","transition","boxShadow","_ref","getWidthAndHeight","top","window","innerHeight","left","innerWidth","win","open","getLoginUrl","getOauthLoginPath","slice","toUpperCase","getBodyTitle","document","body","innerHTML","spinnerWindowHtml","background","colors","modalBg","color","accentText","addEventListener","getLoginOptionRoute","option","route","baseUrl","clientId","formattedRedirectUrl","URL","location","href","searchParams","set","encodeURIComponent","toString","getLoginCallbackUrl","_ref2","closeWindow","isWindowOpenedByFn","loginUrl","loginWithOauth","Promise","resolve","reject","pollTimer","setInterval","closed","clearInterval","removeEventListener","messageListener","event","origin","eventType","authResult","errorString"],"sourceRoot":""}