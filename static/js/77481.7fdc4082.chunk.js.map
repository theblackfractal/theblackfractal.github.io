{"version":3,"file":"static/js/77481.7fdc4082.chunk.js","mappings":"ySAgBO,MAAMA,EAAc,aACrBC,EAAY,CAChB,CACEC,KAAM,UACNC,KAAM,YAGJC,EAAa,CACjB,CACEF,KAAM,YAgBHG,eAAeC,EAAmBC,GACvC,OAAOC,EAAAA,EAAAA,GAAa,CAClBD,WACAE,OAAQ,CAACT,EAAaC,EAAWG,IAErC,CAeM,SAAUM,EAAoBC,GAClC,OAAOC,EAAAA,EAAAA,qBAAoBX,EAAW,CAACU,EAAQE,SACjD,CAeM,SAAUC,EAAcH,GAG5B,OAAQX,EACNU,EAAoBC,GAASI,MAAM,EACvC,CAaM,SAAUC,EAAoBC,GAClC,OAAOC,EAAAA,EAAAA,GAAoBd,EAAYa,GAAQ,EACjD,CAkBOZ,eAAec,EAAQR,GAC5B,OAAOS,EAAAA,EAAAA,cAAa,CAClBb,SAAUI,EAAQJ,SAClBE,OAAQ,CAACT,EAAaC,EAAWG,GACjCiB,OAAQ,CAACV,EAAQE,UAErB,C","sources":["../node_modules/thirdweb/src/extensions/erc721/__generated__/IERC721A/read/ownerOf.ts"],"sourcesContent":["import type { AbiParameterToPrimitiveType } from \"abitype\";\nimport { readContract } from \"../../../../../transaction/read-contract.js\";\nimport type { BaseTransactionOptions } from \"../../../../../transaction/types.js\";\nimport { encodeAbiParameters } from \"../../../../../utils/abi/encodeAbiParameters.js\";\nimport { decodeAbiParameters } from \"viem\";\nimport type { Hex } from \"../../../../../utils/encoding/hex.js\";\nimport type { ThirdwebContract } from \"../../../../../contract/contract.js\";\nimport { detectMethod } from \"../../../../../utils/bytecode/detectExtension.js\";\n\n/**\n * Represents the parameters for the \"ownerOf\" function.\n */\nexport type OwnerOfParams = {\n  tokenId: AbiParameterToPrimitiveType<{ type: \"uint256\"; name: \"tokenId\" }>;\n};\n\nexport const FN_SELECTOR = \"0x6352211e\" as const;\nconst FN_INPUTS = [\n  {\n    type: \"uint256\",\n    name: \"tokenId\",\n  },\n] as const;\nconst FN_OUTPUTS = [\n  {\n    type: \"address\",\n  },\n] as const;\n\n/**\n * Checks if the `ownerOf` method is supported by the given contract.\n * @param contract The ThirdwebContract.\n * @returns A promise that resolves to a boolean indicating if the `ownerOf` method is supported.\n * @extension ERC721\n * @example\n * ```ts\n * import { isOwnerOfSupported } from \"thirdweb/extensions/erc721\";\n *\n * const supported = await isOwnerOfSupported(contract);\n * ```\n */\nexport async function isOwnerOfSupported(contract: ThirdwebContract<any>) {\n  return detectMethod({\n    contract,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS] as const,\n  });\n}\n\n/**\n * Encodes the parameters for the \"ownerOf\" function.\n * @param options - The options for the ownerOf function.\n * @returns The encoded ABI parameters.\n * @extension ERC721\n * @example\n * ```ts\n * import { encodeOwnerOfParams } \"thirdweb/extensions/erc721\";\n * const result = encodeOwnerOfParams({\n *  tokenId: ...,\n * });\n * ```\n */\nexport function encodeOwnerOfParams(options: OwnerOfParams) {\n  return encodeAbiParameters(FN_INPUTS, [options.tokenId]);\n}\n\n/**\n * Encodes the \"ownerOf\" function into a Hex string with its parameters.\n * @param options - The options for the ownerOf function.\n * @returns The encoded hexadecimal string.\n * @extension ERC721\n * @example\n * ```ts\n * import { encodeOwnerOf } \"thirdweb/extensions/erc721\";\n * const result = encodeOwnerOf({\n *  tokenId: ...,\n * });\n * ```\n */\nexport function encodeOwnerOf(options: OwnerOfParams) {\n  // we do a \"manual\" concat here to avoid the overhead of the \"concatHex\" function\n  // we can do this because we know the specific formats of the values\n  return (FN_SELECTOR +\n    encodeOwnerOfParams(options).slice(2)) as `${typeof FN_SELECTOR}${string}`;\n}\n\n/**\n * Decodes the result of the ownerOf function call.\n * @param result - The hexadecimal result to decode.\n * @returns The decoded result as per the FN_OUTPUTS definition.\n * @extension ERC721\n * @example\n * ```ts\n * import { decodeOwnerOfResult } from \"thirdweb/extensions/erc721\";\n * const result = decodeOwnerOfResult(\"...\");\n * ```\n */\nexport function decodeOwnerOfResult(result: Hex) {\n  return decodeAbiParameters(FN_OUTPUTS, result)[0];\n}\n\n/**\n * Calls the \"ownerOf\" function on the contract.\n * @param options - The options for the ownerOf function.\n * @returns The parsed result of the function call.\n * @extension ERC721\n * @example\n * ```ts\n * import { ownerOf } from \"thirdweb/extensions/erc721\";\n *\n * const result = await ownerOf({\n *  contract,\n *  tokenId: ...,\n * });\n *\n * ```\n */\nexport async function ownerOf(options: BaseTransactionOptions<OwnerOfParams>) {\n  return readContract({\n    contract: options.contract,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS] as const,\n    params: [options.tokenId],\n  });\n}\n"],"names":["FN_SELECTOR","FN_INPUTS","type","name","FN_OUTPUTS","async","isOwnerOfSupported","contract","detectMethod","method","encodeOwnerOfParams","options","encodeAbiParameters","tokenId","encodeOwnerOf","slice","decodeOwnerOfResult","result","decodeAbiParameters","ownerOf","readContract","params"],"sourceRoot":""}