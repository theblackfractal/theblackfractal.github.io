{"version":3,"file":"static/js/94052.739f2b8b.chunk.js","mappings":"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","sources":["../node_modules/thirdweb/src/wallets/wallet-connect/receiver/session-proposal.ts"],"sourcesContent":["import type { Chain } from \"../../../chains/types.js\";\nimport type { Account, Wallet } from \"../../interfaces/wallet.js\";\nimport { disconnectWalletConnectSession } from \"./index.js\";\nimport { getSessions, saveSession } from \"./session-store.js\";\nimport type { WalletConnectClient } from \"./types.js\";\nimport type {\n  WalletConnectSession,\n  WalletConnectSessionProposalEvent,\n} from \"./types.js\";\n\n/**\n * @internal\n */\nexport async function onSessionProposal(options: {\n  wallet: Wallet;\n  walletConnectClient: WalletConnectClient;\n  event: WalletConnectSessionProposalEvent;\n  chains?: Chain[];\n  onConnect?: (session: WalletConnectSession) => void;\n}) {\n  const { wallet, walletConnectClient, event, chains, onConnect } = options;\n\n  const account = wallet.getAccount();\n  if (!account) {\n    throw new Error(\"No account connected to provided wallet\");\n  }\n\n  const origin = event.verifyContext?.verified?.origin;\n  if (origin) {\n    await disconnectExistingSessions({ origin, walletConnectClient });\n  }\n  const session = await acceptSessionProposal({\n    account,\n    walletConnectClient,\n    sessionProposal: event,\n    chains,\n  });\n\n  await saveSession(session);\n\n  wallet.subscribe(\"disconnect\", () => {\n    disconnectWalletConnectSession({ session, walletConnectClient });\n  });\n\n  onConnect?.(session);\n}\n\n/**\n * @internal\n */\nexport async function disconnectExistingSessions({\n  walletConnectClient,\n  origin,\n}: { walletConnectClient: WalletConnectClient; origin: string }) {\n  const sessions = await getSessions();\n  for (const session of sessions) {\n    if (session.origin === origin) {\n      await disconnectWalletConnectSession({ session, walletConnectClient });\n    }\n  }\n}\n\n/**\n * @internal\n */\nexport async function acceptSessionProposal({\n  account,\n  walletConnectClient,\n  sessionProposal,\n  chains,\n}: {\n  account: Account;\n  walletConnectClient: WalletConnectClient;\n  sessionProposal: WalletConnectSessionProposalEvent;\n  chains?: Chain[];\n}): Promise<WalletConnectSession> {\n  if (\n    !sessionProposal.params.requiredNamespaces?.eip155 &&\n    !sessionProposal.params.optionalNamespaces?.eip155\n  ) {\n    throw new Error(\n      \"No EIP155 namespace found in Wallet Connect session proposal\",\n    );\n  }\n\n  const namespaces = {\n    chains: [\n      ...Array.from(\n        new Set([\n          ...(sessionProposal.params.requiredNamespaces?.eip155?.chains?.map(\n            (chain: string) => `${chain}:${account.address}`,\n          ) ?? []),\n          ...(sessionProposal.params.optionalNamespaces?.eip155?.chains?.map(\n            (chain: string) => `${chain}:${account.address}`,\n          ) ?? []),\n          ...(chains?.map((chain) => `eip155:${chain.id}:${account.address}`) ??\n            []),\n        ]),\n      ),\n    ],\n    methods: [\n      ...(sessionProposal.params.requiredNamespaces?.eip155?.methods ?? []),\n      ...(sessionProposal.params.optionalNamespaces?.eip155?.methods ?? []),\n    ],\n    events: [\n      ...(sessionProposal.params.requiredNamespaces?.eip155?.events ?? []),\n      ...(sessionProposal.params.optionalNamespaces?.eip155?.events ?? []),\n    ],\n  };\n  const approval = await walletConnectClient.approve({\n    id: sessionProposal.id,\n    namespaces: {\n      eip155: {\n        accounts: namespaces.chains,\n        methods: namespaces.methods,\n        events: namespaces.events,\n      },\n    },\n  });\n\n  const session = await approval.acknowledged();\n  return {\n    topic: session.topic,\n    origin: sessionProposal.verifyContext?.verified?.origin || \"Unknown origin\",\n  };\n}\n"],"names":["async","onSessionProposal","options","_event$verifyContext","wallet","walletConnectClient","event","chains","onConnect","account","getAccount","Error","origin","verifyContext","verified","_ref","sessions","getSessions","session","disconnectWalletConnectSession","disconnectExistingSessions","_ref2","_sessionProposal$para","_sessionProposal$para2","_sessionProposal$para3","_sessionProposal$para4","_sessionProposal$para5","_sessionProposal$para6","_chains$map","_sessionProposal$para7","_sessionProposal$para8","_sessionProposal$para9","_sessionProposal$para10","_sessionProposal$para11","_sessionProposal$para12","_sessionProposal$para13","_sessionProposal$para14","_sessionProposal$veri","sessionProposal","params","requiredNamespaces","eip155","optionalNamespaces","namespaces","Array","from","Set","map","chain","concat","address","id","methods","events","approval","approve","accounts","acknowledged","topic","acceptSessionProposal","saveSession","subscribe"],"sourceRoot":""}